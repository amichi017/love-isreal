{"ast":null,"code":"import _classCallCheck from \"C:\\\\react\\\\my-app\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\react\\\\my-app\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\react\\\\my-app\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\react\\\\my-app\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport { AstronomicalCalculator } from './AstronomicalCalculator';\nimport { MathUtils } from '../polyfills/Utils';\n/**\r\n * Implementation of sunrise and sunset methods to calculate astronomical times based on the <a\r\n * href=\"http://noaa.gov\">NOAA</a> algorithm. This calculator uses the Java algorithm based on the implementation by <a\r\n * href=\"http://noaa.gov\">NOAA - National Oceanic and Atmospheric Administration</a>'s <a href =\r\n * \"http://www.srrb.noaa.gov/highlights/sunrise/sunrise.html\">Surface Radiation Research Branch</a>. NOAA's <a\r\n * href=\"http://www.srrb.noaa.gov/highlights/sunrise/solareqns.PDF\">implementation</a> is based on equations from <a\r\n * href=\"http://www.willbell.com/math/mc1.htm\">Astronomical Algorithms</a> by <a\r\n * href=\"http://en.wikipedia.org/wiki/Jean_Meeus\">Jean Meeus</a>. Added to the algorithm is an adjustment of the zenith\r\n * to account for elevation. The algorithm can be found in the <a\r\n * href=\"http://en.wikipedia.org/wiki/Sunrise_equation\">Wikipedia Sunrise Equation</a> article.\r\n *\r\n * @author &copy; Eliyahu Hershfeld 2011 - 2019\r\n */\n\nexport var NOAACalculator = /*#__PURE__*/function (_AstronomicalCalculat) {\n  _inherits(NOAACalculator, _AstronomicalCalculat);\n\n  var _super = _createSuper(NOAACalculator);\n\n  function NOAACalculator() {\n    _classCallCheck(this, NOAACalculator);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(NOAACalculator, [{\n    key: \"getCalculatorName\",\n\n    /**\r\n     * @see net.sourceforge.zmanim.util.AstronomicalCalculator#getCalculatorName()\r\n     */\n    // eslint-disable-next-line class-methods-use-this\n    value: function getCalculatorName() {\n      return 'US National Oceanic and Atmospheric Administration Algorithm';\n    }\n    /**\r\n     * @see net.sourceforge.zmanim.util.AstronomicalCalculator#getUTCSunrise(Calendar, GeoLocation, double, boolean)\r\n     */\n\n  }, {\n    key: \"getUTCSunrise\",\n    value: function getUTCSunrise(date, geoLocation, zenith, adjustForElevation) {\n      var elevation = adjustForElevation ? geoLocation.getElevation() : 0;\n      var adjustedZenith = this.adjustZenith(zenith, elevation);\n      var sunrise = NOAACalculator.getSunriseUTC(NOAACalculator.getJulianDay(date), geoLocation.getLatitude(), -geoLocation.getLongitude(), adjustedZenith);\n      sunrise = sunrise / 60; // ensure that the time is >= 0 and < 24\n\n      while (sunrise < 0) {\n        sunrise += 24;\n      }\n\n      while (sunrise >= 24) {\n        sunrise -= 24;\n      }\n\n      return sunrise;\n    }\n    /**\r\n     * @see net.sourceforge.zmanim.util.AstronomicalCalculator#getUTCSunset(Calendar, GeoLocation, double, boolean)\r\n     */\n\n  }, {\n    key: \"getUTCSunset\",\n    value: function getUTCSunset(date, geoLocation, zenith, adjustForElevation) {\n      var elevation = adjustForElevation ? geoLocation.getElevation() : 0;\n      var adjustedZenith = this.adjustZenith(zenith, elevation);\n      var sunset = NOAACalculator.getSunsetUTC(NOAACalculator.getJulianDay(date), geoLocation.getLatitude(), -geoLocation.getLongitude(), adjustedZenith);\n      sunset = sunset / 60; // ensure that the time is >= 0 and < 24\n\n      while (sunset < 0) {\n        sunset += 24;\n      }\n\n      while (sunset >= 24) {\n        sunset -= 24;\n      }\n\n      return sunset;\n    }\n    /**\r\n     * Return the <a href=\"http://en.wikipedia.org/wiki/Julian_day\">Julian day</a> from a Java Calendar\r\n     *\r\n     * @param calendar\r\n     *            The Java Calendar\r\n     * @return the Julian day corresponding to the date Note: Number is returned for start of day. Fractional days\r\n     *         should be added later.\r\n     */\n\n  }], [{\n    key: \"getJulianDay\",\n    value: function getJulianDay(date) {\n      var year = date.year,\n          month = date.month;\n      var day = date.day;\n\n      if (month <= 2) {\n        year -= 1;\n        month += 12;\n      }\n\n      var a = Math.trunc(year / 100);\n      var b = Math.trunc(2 - a + a / 4);\n      return Math.floor(365.25 * (year + 4716)) + Math.floor(30.6001 * (month + 1)) + day + b - 1524.5;\n    }\n    /**\r\n     * Convert <a href=\"http://en.wikipedia.org/wiki/Julian_day\">Julian day</a> to centuries since J2000.0.\r\n     *\r\n     * @param julianDay\r\n     *            the Julian Day to convert\r\n     * @return the centuries since 2000 Julian corresponding to the Julian Day\r\n     */\n\n  }, {\n    key: \"getJulianCenturiesFromJulianDay\",\n    value: function getJulianCenturiesFromJulianDay(julianDay) {\n      return (julianDay - NOAACalculator.JULIAN_DAY_JAN_1_2000) / NOAACalculator.JULIAN_DAYS_PER_CENTURY;\n    }\n    /**\r\n     * Convert centuries since J2000.0 to <a href=\"http://en.wikipedia.org/wiki/Julian_day\">Julian day</a>.\r\n     *\r\n     * @param julianCenturies\r\n     *            the number of Julian centuries since J2000.0\r\n     * @return the Julian Day corresponding to the Julian centuries passed in\r\n     */\n\n  }, {\n    key: \"getJulianDayFromJulianCenturies\",\n    value: function getJulianDayFromJulianCenturies(julianCenturies) {\n      return julianCenturies * NOAACalculator.JULIAN_DAYS_PER_CENTURY + NOAACalculator.JULIAN_DAY_JAN_1_2000;\n    }\n    /**\r\n     * Returns the Geometric <a href=\"http://en.wikipedia.org/wiki/Mean_longitude\">Mean Longitude</a> of the Sun.\r\n     *\r\n     * @param julianCenturies\r\n     *            the number of Julian centuries since J2000.0\r\n     * @return the Geometric Mean Longitude of the Sun in degrees\r\n     */\n\n  }, {\n    key: \"getSunGeometricMeanLongitude\",\n    value: function getSunGeometricMeanLongitude(julianCenturies) {\n      var longitude = 280.46646 + julianCenturies * (36000.76983 + 0.0003032 * julianCenturies);\n\n      while (longitude > 360) {\n        longitude -= 360;\n      }\n\n      while (longitude < 0) {\n        longitude += 360;\n      }\n\n      return longitude; // in degrees\n    }\n    /**\r\n     * Returns the Geometric <a href=\"http://en.wikipedia.org/wiki/Mean_anomaly\">Mean Anomaly</a> of the Sun.\r\n     *\r\n     * @param julianCenturies\r\n     *            the number of Julian centuries since J2000.0\r\n     * @return the Geometric Mean Anomaly of the Sun in degrees\r\n     */\n\n  }, {\n    key: \"getSunGeometricMeanAnomaly\",\n    value: function getSunGeometricMeanAnomaly(julianCenturies) {\n      return 357.52911 + julianCenturies * (35999.05029 - 0.0001537 * julianCenturies); // in degrees\n    }\n    /**\r\n     * Return the <a href=\"http://en.wikipedia.org/wiki/Eccentricity_%28orbit%29\">eccentricity of earth's orbit</a>.\r\n     *\r\n     * @param julianCenturies\r\n     *            the number of Julian centuries since J2000.0\r\n     * @return the unitless eccentricity\r\n     */\n\n  }, {\n    key: \"getEarthOrbitEccentricity\",\n    value: function getEarthOrbitEccentricity(julianCenturies) {\n      return 0.016708634 - julianCenturies * (0.000042037 + 0.0000001267 * julianCenturies); // unitless\n    }\n    /**\r\n     * Returns the <a href=\"http://en.wikipedia.org/wiki/Equation_of_the_center\">equation of center</a> for the sun.\r\n     *\r\n     * @param julianCenturies\r\n     *            the number of Julian centuries since J2000.0\r\n     * @return the equation of center for the sun in degrees\r\n     */\n\n  }, {\n    key: \"getSunEquationOfCenter\",\n    value: function getSunEquationOfCenter(julianCenturies) {\n      var m = NOAACalculator.getSunGeometricMeanAnomaly(julianCenturies);\n      var mrad = MathUtils.degreesToRadians(m);\n      var sinm = Math.sin(mrad);\n      var sin2m = Math.sin(mrad + mrad);\n      var sin3m = Math.sin(mrad + mrad + mrad);\n      return sinm * (1.914602 - julianCenturies * (0.004817 + 0.000014 * julianCenturies)) + sin2m * (0.019993 - 0.000101 * julianCenturies) + sin3m * 0.000289; // in degrees\n    }\n    /**\r\n     * Return the true longitude of the sun\r\n     *\r\n     * @param julianCenturies\r\n     *            the number of Julian centuries since J2000.0\r\n     * @return the sun's true longitude in degrees\r\n     */\n\n  }, {\n    key: \"getSunTrueLongitude\",\n    value: function getSunTrueLongitude(julianCenturies) {\n      var sunLongitude = NOAACalculator.getSunGeometricMeanLongitude(julianCenturies);\n      var center = NOAACalculator.getSunEquationOfCenter(julianCenturies);\n      return sunLongitude + center; // in degrees\n    } // /**\n    // * Returns the <a href=\"http://en.wikipedia.org/wiki/True_anomaly\">true anamoly</a> of the sun.\n    // *\n    // * @param julianCenturies\n    // * the number of Julian centuries since J2000.0\n    // * @return the sun's true anamoly in degrees\n    // */\n    // private static double getSunTrueAnomaly(double julianCenturies) {\n    // double meanAnomaly = getSunGeometricMeanAnomaly(julianCenturies);\n    // double equationOfCenter = getSunEquationOfCenter(julianCenturies);\n    //\n    // return meanAnomaly + equationOfCenter; // in degrees\n    // }\n\n    /**\r\n     * Return the apparent longitude of the sun\r\n     *\r\n     * @param julianCenturies\r\n     *            the number of Julian centuries since J2000.0\r\n     * @return sun's apparent longitude in degrees\r\n     */\n\n  }, {\n    key: \"getSunApparentLongitude\",\n    value: function getSunApparentLongitude(julianCenturies) {\n      var sunTrueLongitude = NOAACalculator.getSunTrueLongitude(julianCenturies);\n      var omega = 125.04 - 1934.136 * julianCenturies;\n      var lambda = sunTrueLongitude - 0.00569 - 0.00478 * Math.sin(MathUtils.degreesToRadians(omega));\n      return lambda; // in degrees\n    }\n    /**\r\n     * Returns the mean <a href=\"http://en.wikipedia.org/wiki/Axial_tilt\">obliquity of the ecliptic</a> (Axial tilt).\r\n     *\r\n     * @param julianCenturies\r\n     *            the number of Julian centuries since J2000.0\r\n     * @return the mean obliquity in degrees\r\n     */\n\n  }, {\n    key: \"getMeanObliquityOfEcliptic\",\n    value: function getMeanObliquityOfEcliptic(julianCenturies) {\n      var seconds = 21.448 - julianCenturies * (46.8150 + julianCenturies * (0.00059 - julianCenturies * 0.001813));\n      return 23 + (26 + seconds / 60) / 60; // in degrees\n    }\n    /**\r\n     * Returns the corrected <a href=\"http://en.wikipedia.org/wiki/Axial_tilt\">obliquity of the ecliptic</a> (Axial\r\n     * tilt).\r\n     *\r\n     * @param julianCenturies\r\n     *            the number of Julian centuries since J2000.0\r\n     * @return the corrected obliquity in degrees\r\n     */\n\n  }, {\n    key: \"getObliquityCorrection\",\n    value: function getObliquityCorrection(julianCenturies) {\n      var obliquityOfEcliptic = NOAACalculator.getMeanObliquityOfEcliptic(julianCenturies);\n      var omega = 125.04 - 1934.136 * julianCenturies;\n      return obliquityOfEcliptic + 0.00256 * Math.cos(MathUtils.degreesToRadians(omega)); // in degrees\n    }\n    /**\r\n     * Return the <a href=\"http://en.wikipedia.org/wiki/Declination\">declination</a> of the sun.\r\n     *\r\n     * @param julianCenturies\r\n     *            the number of Julian centuries since J2000.0\r\n     * @return\r\n     *            the sun's declination in degrees\r\n     */\n\n  }, {\n    key: \"getSunDeclination\",\n    value: function getSunDeclination(julianCenturies) {\n      var obliquityCorrection = NOAACalculator.getObliquityCorrection(julianCenturies);\n      var lambda = NOAACalculator.getSunApparentLongitude(julianCenturies);\n      var sint = Math.sin(MathUtils.degreesToRadians(obliquityCorrection)) * Math.sin(MathUtils.degreesToRadians(lambda));\n      var theta = MathUtils.radiansToDegrees(Math.asin(sint));\n      return theta; // in degrees\n    }\n    /**\r\n     * Return the <a href=\"http://en.wikipedia.org/wiki/Equation_of_time\">Equation of Time</a> - the difference between\r\n     * true solar time and mean solar time\r\n     *\r\n     * @param julianCenturies\r\n     *            the number of Julian centuries since J2000.0\r\n     * @return equation of time in minutes of time\r\n     */\n\n  }, {\n    key: \"getEquationOfTime\",\n    value: function getEquationOfTime(julianCenturies) {\n      var epsilon = NOAACalculator.getObliquityCorrection(julianCenturies);\n      var geomMeanLongSun = NOAACalculator.getSunGeometricMeanLongitude(julianCenturies);\n      var eccentricityEarthOrbit = NOAACalculator.getEarthOrbitEccentricity(julianCenturies);\n      var geomMeanAnomalySun = NOAACalculator.getSunGeometricMeanAnomaly(julianCenturies);\n      var y = Math.tan(MathUtils.degreesToRadians(epsilon) / 2);\n      y *= y;\n      var sin2l0 = Math.sin(2 * MathUtils.degreesToRadians(geomMeanLongSun));\n      var sinm = Math.sin(MathUtils.degreesToRadians(geomMeanAnomalySun));\n      var cos2l0 = Math.cos(2 * MathUtils.degreesToRadians(geomMeanLongSun));\n      var sin4l0 = Math.sin(4 * MathUtils.degreesToRadians(geomMeanLongSun));\n      var sin2m = Math.sin(2 * MathUtils.degreesToRadians(geomMeanAnomalySun));\n      var equationOfTime = y * sin2l0 - 2 * eccentricityEarthOrbit * sinm + 4 * eccentricityEarthOrbit * y * sinm * cos2l0 - 0.5 * y * y * sin4l0 - 1.25 * eccentricityEarthOrbit * eccentricityEarthOrbit * sin2m;\n      return MathUtils.radiansToDegrees(equationOfTime) * 4; // in minutes of time\n    }\n    /**\r\n     * Return the <a href=\"http://en.wikipedia.org/wiki/Hour_angle\">hour angle</a> of the sun at sunrise for the\r\n     * latitude.\r\n     *\r\n     * @param lat\r\n     *            , the latitude of observer in degrees\r\n     * @param solarDec\r\n     *            the declination angle of sun in degrees\r\n     * @param zenith\r\n     *            the zenith\r\n     * @return hour angle of sunrise in radians\r\n     */\n\n  }, {\n    key: \"getSunHourAngleAtSunrise\",\n    value: function getSunHourAngleAtSunrise(lat, solarDec, zenith) {\n      var latRad = MathUtils.degreesToRadians(lat);\n      var sdRad = MathUtils.degreesToRadians(solarDec);\n      return Math.acos(Math.cos(MathUtils.degreesToRadians(zenith)) / (Math.cos(latRad) * Math.cos(sdRad)) - Math.tan(latRad) * Math.tan(sdRad)); // in radians\n    }\n    /**\r\n     * Returns the <a href=\"http://en.wikipedia.org/wiki/Hour_angle\">hour angle</a> of the sun at sunset for the\r\n     * latitude. TODO: use - {@link #getSunHourAngleAtSunrise(double, double, double)} implementation to avoid\r\n     * duplication of code.\r\n     *\r\n     * @param lat\r\n     *            the latitude of observer in degrees\r\n     * @param solarDec\r\n     *            the declination angle of sun in degrees\r\n     * @param zenith\r\n     *            the zenith\r\n     * @return the hour angle of sunset in radians\r\n     */\n\n  }, {\n    key: \"getSunHourAngleAtSunset\",\n    value: function getSunHourAngleAtSunset(lat, solarDec, zenith) {\n      var latRad = MathUtils.degreesToRadians(lat);\n      var sdRad = MathUtils.degreesToRadians(solarDec);\n      var hourAngle = Math.acos(Math.cos(MathUtils.degreesToRadians(zenith)) / (Math.cos(latRad) * Math.cos(sdRad)) - Math.tan(latRad) * Math.tan(sdRad));\n      return -hourAngle; // in radians\n    }\n    /**\r\n     * Return the <a href=\"http://en.wikipedia.org/wiki/Celestial_coordinate_system\">Solar Elevation</a> for the\r\n     * horizontal coordinate system at the given location at the given time. Can be negative if the sun is below the\r\n     * horizon. Not corrected for altitude.\r\n     *\r\n     * @param cal\r\n     *            time of calculation\r\n     * @param lat\r\n     *            latitude of location for calculation\r\n     * @param lon\r\n     *            longitude of location for calculation\r\n     * @return solar elevation in degrees - horizon is 0 degrees, civil twilight is -6 degrees\r\n     */\n\n  }, {\n    key: \"getSolarElevation\",\n    value: function getSolarElevation(date, lat, lon) {\n      var julianDay = NOAACalculator.getJulianDay(date);\n      var julianCenturies = NOAACalculator.getJulianCenturiesFromJulianDay(julianDay);\n      var equationOfTime = NOAACalculator.getEquationOfTime(julianCenturies);\n      var longitude = date.hour + 12 + (date.minute + equationOfTime + date.second / 60) / 60;\n      longitude = -(longitude * 360 / 24) % 360;\n      var hourAngleRad = MathUtils.degreesToRadians(lon - longitude);\n      var declination = NOAACalculator.getSunDeclination(julianCenturies);\n      var decRad = MathUtils.degreesToRadians(declination);\n      var latRad = MathUtils.degreesToRadians(lat);\n      return MathUtils.radiansToDegrees(Math.asin(Math.sin(latRad) * Math.sin(decRad) + Math.cos(latRad) * Math.cos(decRad) * Math.cos(hourAngleRad)));\n    }\n    /**\r\n     * Return the <a href=\"http://en.wikipedia.org/wiki/Celestial_coordinate_system\">Solar Azimuth</a> for the\r\n     * horizontal coordinate system at the given location at the given time. Not corrected for altitude. True south is 0\r\n     * degrees.\r\n     *\r\n     * @param cal\r\n     *            time of calculation\r\n     * @param latitude\r\n     *            latitude of location for calculation\r\n     * @param lon\r\n     *            longitude of location for calculation\r\n     * @return FIXME\r\n     */\n\n  }, {\n    key: \"getSolarAzimuth\",\n    value: function getSolarAzimuth(date, latitude, lon) {\n      var julianDay = NOAACalculator.getJulianDay(date);\n      var julianCenturies = NOAACalculator.getJulianCenturiesFromJulianDay(julianDay);\n      var equationOfTime = NOAACalculator.getEquationOfTime(julianCenturies);\n      var longitude = date.hour + 12 + (date.minute + equationOfTime + date.second / 60) / 60;\n      longitude = -(longitude * 360 / 24) % 360;\n      var hourAngleRad = MathUtils.degreesToRadians(lon - longitude);\n      var declination = NOAACalculator.getSunDeclination(julianCenturies);\n      var decRad = MathUtils.degreesToRadians(declination);\n      var latRad = MathUtils.degreesToRadians(latitude);\n      return MathUtils.radiansToDegrees(Math.atan(Math.sin(hourAngleRad) / (Math.cos(hourAngleRad) * Math.sin(latRad) - Math.tan(decRad) * Math.cos(latRad)))) + 180;\n    }\n    /**\r\n     * Return the <a href=\"http://en.wikipedia.org/wiki/Universal_Coordinated_Time\">Universal Coordinated Time</a> (UTC)\r\n     * of sunrise for the given day at the given location on earth\r\n     *\r\n     * @param julianDay\r\n     *            the Julian day\r\n     * @param latitude\r\n     *            the latitude of observer in degrees\r\n     * @param longitude\r\n     *            the longitude of observer in degrees\r\n     * @param zenith\r\n     *            the zenith\r\n     * @return the time in minutes from zero UTC\r\n     */\n\n  }, {\n    key: \"getSunriseUTC\",\n    value: function getSunriseUTC(julianDay, latitude, longitude, zenith) {\n      var julianCenturies = NOAACalculator.getJulianCenturiesFromJulianDay(julianDay); // Find the time of solar noon at the location, and use that declination. This is better than start of the\n      // Julian day\n\n      var noonmin = NOAACalculator.getSolarNoonUTC(julianCenturies, longitude);\n      var tnoon = NOAACalculator.getJulianCenturiesFromJulianDay(julianDay + noonmin / 1440); // First pass to approximate sunrise (using solar noon)\n\n      var eqTime = NOAACalculator.getEquationOfTime(tnoon);\n      var solarDec = NOAACalculator.getSunDeclination(tnoon);\n      var hourAngle = NOAACalculator.getSunHourAngleAtSunrise(latitude, solarDec, zenith);\n      var delta = longitude - MathUtils.radiansToDegrees(hourAngle);\n      var timeDiff = 4 * delta; // in minutes of time\n\n      var timeUTC = 720 + timeDiff - eqTime; // in minutes\n      // Second pass includes fractional Julian Day in gamma calc\n\n      var newt = NOAACalculator.getJulianCenturiesFromJulianDay(NOAACalculator.getJulianDayFromJulianCenturies(julianCenturies) + timeUTC / 1440);\n      eqTime = NOAACalculator.getEquationOfTime(newt);\n      solarDec = NOAACalculator.getSunDeclination(newt);\n      hourAngle = NOAACalculator.getSunHourAngleAtSunrise(latitude, solarDec, zenith);\n      delta = longitude - MathUtils.radiansToDegrees(hourAngle);\n      timeDiff = 4 * delta;\n      timeUTC = 720 + timeDiff - eqTime; // in minutes\n\n      return timeUTC;\n    }\n    /**\r\n     * Return the <a href=\"http://en.wikipedia.org/wiki/Universal_Coordinated_Time\">Universal Coordinated Time</a> (UTC)\r\n     * of <a href=\"http://en.wikipedia.org/wiki/Noon#Solar_noon\">solar noon</a> for the given day at the given location\r\n     * on earth.\r\n     *\r\n     * @param julianCenturies\r\n     *            the number of Julian centuries since J2000.0\r\n     * @param longitude\r\n     *            the longitude of observer in degrees\r\n     * @return the time in minutes from zero UTC\r\n     */\n\n  }, {\n    key: \"getSolarNoonUTC\",\n    value: function getSolarNoonUTC(julianCenturies, longitude) {\n      // First pass uses approximate solar noon to calculate eqtime\n      var tnoon = NOAACalculator.getJulianCenturiesFromJulianDay(NOAACalculator.getJulianDayFromJulianCenturies(julianCenturies) + longitude / 360);\n      var eqTime = NOAACalculator.getEquationOfTime(tnoon);\n      var solNoonUTC = 720 + longitude * 4 - eqTime; // min\n\n      var newt = NOAACalculator.getJulianCenturiesFromJulianDay(NOAACalculator.getJulianDayFromJulianCenturies(julianCenturies) - 0.5 + solNoonUTC / 1440);\n      eqTime = NOAACalculator.getEquationOfTime(newt);\n      return 720 + longitude * 4 - eqTime; // min\n    }\n    /**\r\n     * Return the <a href=\"http://en.wikipedia.org/wiki/Universal_Coordinated_Time\">Universal Coordinated Time</a> (UTC)\r\n     * of sunset for the given day at the given location on earth\r\n     *\r\n     * @param julianDay\r\n     *            the Julian day\r\n     * @param latitude\r\n     *            the latitude of observer in degrees\r\n     * @param longitude\r\n     *            : longitude of observer in degrees\r\n     * @param zenith\r\n     *            the zenith\r\n     * @return the time in minutes from zero Universal Coordinated Time (UTC)\r\n     */\n\n  }, {\n    key: \"getSunsetUTC\",\n    value: function getSunsetUTC(julianDay, latitude, longitude, zenith) {\n      var julianCenturies = NOAACalculator.getJulianCenturiesFromJulianDay(julianDay); // Find the time of solar noon at the location, and use that declination. This is better than start of the\n      // Julian day\n\n      var noonmin = NOAACalculator.getSolarNoonUTC(julianCenturies, longitude);\n      var tnoon = NOAACalculator.getJulianCenturiesFromJulianDay(julianDay + noonmin / 1440); // First calculates sunrise and approx length of day\n\n      var eqTime = NOAACalculator.getEquationOfTime(tnoon);\n      var solarDec = NOAACalculator.getSunDeclination(tnoon);\n      var hourAngle = NOAACalculator.getSunHourAngleAtSunset(latitude, solarDec, zenith);\n      var delta = longitude - MathUtils.radiansToDegrees(hourAngle);\n      var timeDiff = 4 * delta;\n      var timeUTC = 720 + timeDiff - eqTime; // Second pass includes fractional Julian Day in gamma calc\n\n      var newt = NOAACalculator.getJulianCenturiesFromJulianDay(NOAACalculator.getJulianDayFromJulianCenturies(julianCenturies) + timeUTC / 1440);\n      eqTime = NOAACalculator.getEquationOfTime(newt);\n      solarDec = NOAACalculator.getSunDeclination(newt);\n      hourAngle = NOAACalculator.getSunHourAngleAtSunset(latitude, solarDec, zenith);\n      delta = longitude - MathUtils.radiansToDegrees(hourAngle);\n      timeDiff = 4 * delta;\n      timeUTC = 720 + timeDiff - eqTime; // in minutes\n\n      return timeUTC;\n    }\n  }]);\n\n  return NOAACalculator;\n}(AstronomicalCalculator);\n/**\r\n * The <a href=\"http://en.wikipedia.org/wiki/Julian_day\">Julian day</a> of January 1, 2000\r\n */\n\nNOAACalculator.JULIAN_DAY_JAN_1_2000 = 2451545;\n/**\r\n * Julian days per century\r\n */\n\nNOAACalculator.JULIAN_DAYS_PER_CENTURY = 36525;","map":{"version":3,"sources":["../../../src/util/NOAACalculator.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { AstronomicalCalculator } from './AstronomicalCalculator';\r\nimport { MathUtils } from '../polyfills/Utils';\r\n/**\r\n * Implementation of sunrise and sunset methods to calculate astronomical times based on the <a\r\n * href=\"http://noaa.gov\">NOAA</a> algorithm. This calculator uses the Java algorithm based on the implementation by <a\r\n * href=\"http://noaa.gov\">NOAA - National Oceanic and Atmospheric Administration</a>'s <a href =\r\n * \"http://www.srrb.noaa.gov/highlights/sunrise/sunrise.html\">Surface Radiation Research Branch</a>. NOAA's <a\r\n * href=\"http://www.srrb.noaa.gov/highlights/sunrise/solareqns.PDF\">implementation</a> is based on equations from <a\r\n * href=\"http://www.willbell.com/math/mc1.htm\">Astronomical Algorithms</a> by <a\r\n * href=\"http://en.wikipedia.org/wiki/Jean_Meeus\">Jean Meeus</a>. Added to the algorithm is an adjustment of the zenith\r\n * to account for elevation. The algorithm can be found in the <a\r\n * href=\"http://en.wikipedia.org/wiki/Sunrise_equation\">Wikipedia Sunrise Equation</a> article.\r\n *\r\n * @author &copy; Eliyahu Hershfeld 2011 - 2019\r\n */\r\nexport class NOAACalculator extends AstronomicalCalculator {\r\n    /**\r\n     * @see net.sourceforge.zmanim.util.AstronomicalCalculator#getCalculatorName()\r\n     */\r\n    // eslint-disable-next-line class-methods-use-this\r\n    getCalculatorName() {\r\n        return 'US National Oceanic and Atmospheric Administration Algorithm';\r\n    }\r\n    /**\r\n     * @see net.sourceforge.zmanim.util.AstronomicalCalculator#getUTCSunrise(Calendar, GeoLocation, double, boolean)\r\n     */\r\n    getUTCSunrise(date, geoLocation, zenith, adjustForElevation) {\r\n        const elevation = adjustForElevation ? geoLocation.getElevation() : 0;\r\n        const adjustedZenith = this.adjustZenith(zenith, elevation);\r\n        let sunrise = NOAACalculator.getSunriseUTC(NOAACalculator.getJulianDay(date), geoLocation.getLatitude(), -geoLocation.getLongitude(), adjustedZenith);\r\n        sunrise = sunrise / 60;\r\n        // ensure that the time is >= 0 and < 24\r\n        while (sunrise < 0) {\r\n            sunrise += 24;\r\n        }\r\n        while (sunrise >= 24) {\r\n            sunrise -= 24;\r\n        }\r\n        return sunrise;\r\n    }\r\n    /**\r\n     * @see net.sourceforge.zmanim.util.AstronomicalCalculator#getUTCSunset(Calendar, GeoLocation, double, boolean)\r\n     */\r\n    getUTCSunset(date, geoLocation, zenith, adjustForElevation) {\r\n        const elevation = adjustForElevation ? geoLocation.getElevation() : 0;\r\n        const adjustedZenith = this.adjustZenith(zenith, elevation);\r\n        let sunset = NOAACalculator.getSunsetUTC(NOAACalculator.getJulianDay(date), geoLocation.getLatitude(), -geoLocation.getLongitude(), adjustedZenith);\r\n        sunset = sunset / 60;\r\n        // ensure that the time is >= 0 and < 24\r\n        while (sunset < 0) {\r\n            sunset += 24;\r\n        }\r\n        while (sunset >= 24) {\r\n            sunset -= 24;\r\n        }\r\n        return sunset;\r\n    }\r\n    /**\r\n     * Return the <a href=\"http://en.wikipedia.org/wiki/Julian_day\">Julian day</a> from a Java Calendar\r\n     *\r\n     * @param calendar\r\n     *            The Java Calendar\r\n     * @return the Julian day corresponding to the date Note: Number is returned for start of day. Fractional days\r\n     *         should be added later.\r\n     */\r\n    static getJulianDay(date) {\r\n        let { year, month } = date;\r\n        const { day } = date;\r\n        if (month <= 2) {\r\n            year -= 1;\r\n            month += 12;\r\n        }\r\n        const a = Math.trunc(year / 100);\r\n        const b = Math.trunc(2 - a + a / 4);\r\n        return Math.floor(365.25 * (year + 4716)) + Math.floor(30.6001 * (month + 1)) + day + b - 1524.5;\r\n    }\r\n    /**\r\n     * Convert <a href=\"http://en.wikipedia.org/wiki/Julian_day\">Julian day</a> to centuries since J2000.0.\r\n     *\r\n     * @param julianDay\r\n     *            the Julian Day to convert\r\n     * @return the centuries since 2000 Julian corresponding to the Julian Day\r\n     */\r\n    static getJulianCenturiesFromJulianDay(julianDay) {\r\n        return (julianDay - NOAACalculator.JULIAN_DAY_JAN_1_2000) / NOAACalculator.JULIAN_DAYS_PER_CENTURY;\r\n    }\r\n    /**\r\n     * Convert centuries since J2000.0 to <a href=\"http://en.wikipedia.org/wiki/Julian_day\">Julian day</a>.\r\n     *\r\n     * @param julianCenturies\r\n     *            the number of Julian centuries since J2000.0\r\n     * @return the Julian Day corresponding to the Julian centuries passed in\r\n     */\r\n    static getJulianDayFromJulianCenturies(julianCenturies) {\r\n        return julianCenturies * NOAACalculator.JULIAN_DAYS_PER_CENTURY + NOAACalculator.JULIAN_DAY_JAN_1_2000;\r\n    }\r\n    /**\r\n     * Returns the Geometric <a href=\"http://en.wikipedia.org/wiki/Mean_longitude\">Mean Longitude</a> of the Sun.\r\n     *\r\n     * @param julianCenturies\r\n     *            the number of Julian centuries since J2000.0\r\n     * @return the Geometric Mean Longitude of the Sun in degrees\r\n     */\r\n    static getSunGeometricMeanLongitude(julianCenturies) {\r\n        let longitude = 280.46646 + julianCenturies * (36000.76983 + 0.0003032 * julianCenturies);\r\n        while (longitude > 360) {\r\n            longitude -= 360;\r\n        }\r\n        while (longitude < 0) {\r\n            longitude += 360;\r\n        }\r\n        return longitude; // in degrees\r\n    }\r\n    /**\r\n     * Returns the Geometric <a href=\"http://en.wikipedia.org/wiki/Mean_anomaly\">Mean Anomaly</a> of the Sun.\r\n     *\r\n     * @param julianCenturies\r\n     *            the number of Julian centuries since J2000.0\r\n     * @return the Geometric Mean Anomaly of the Sun in degrees\r\n     */\r\n    static getSunGeometricMeanAnomaly(julianCenturies) {\r\n        return 357.52911 + julianCenturies * (35999.05029 - 0.0001537 * julianCenturies); // in degrees\r\n    }\r\n    /**\r\n     * Return the <a href=\"http://en.wikipedia.org/wiki/Eccentricity_%28orbit%29\">eccentricity of earth's orbit</a>.\r\n     *\r\n     * @param julianCenturies\r\n     *            the number of Julian centuries since J2000.0\r\n     * @return the unitless eccentricity\r\n     */\r\n    static getEarthOrbitEccentricity(julianCenturies) {\r\n        return 0.016708634 - julianCenturies * (0.000042037 + 0.0000001267 * julianCenturies); // unitless\r\n    }\r\n    /**\r\n     * Returns the <a href=\"http://en.wikipedia.org/wiki/Equation_of_the_center\">equation of center</a> for the sun.\r\n     *\r\n     * @param julianCenturies\r\n     *            the number of Julian centuries since J2000.0\r\n     * @return the equation of center for the sun in degrees\r\n     */\r\n    static getSunEquationOfCenter(julianCenturies) {\r\n        const m = NOAACalculator.getSunGeometricMeanAnomaly(julianCenturies);\r\n        const mrad = MathUtils.degreesToRadians(m);\r\n        const sinm = Math.sin(mrad);\r\n        const sin2m = Math.sin(mrad + mrad);\r\n        const sin3m = Math.sin(mrad + mrad + mrad);\r\n        return sinm * (1.914602 - julianCenturies * (0.004817 + 0.000014 * julianCenturies)) + sin2m\r\n            * (0.019993 - 0.000101 * julianCenturies) + sin3m * 0.000289; // in degrees\r\n    }\r\n    /**\r\n     * Return the true longitude of the sun\r\n     *\r\n     * @param julianCenturies\r\n     *            the number of Julian centuries since J2000.0\r\n     * @return the sun's true longitude in degrees\r\n     */\r\n    static getSunTrueLongitude(julianCenturies) {\r\n        const sunLongitude = NOAACalculator.getSunGeometricMeanLongitude(julianCenturies);\r\n        const center = NOAACalculator.getSunEquationOfCenter(julianCenturies);\r\n        return sunLongitude + center; // in degrees\r\n    }\r\n    // /**\r\n    // * Returns the <a href=\"http://en.wikipedia.org/wiki/True_anomaly\">true anamoly</a> of the sun.\r\n    // *\r\n    // * @param julianCenturies\r\n    // * the number of Julian centuries since J2000.0\r\n    // * @return the sun's true anamoly in degrees\r\n    // */\r\n    // private static double getSunTrueAnomaly(double julianCenturies) {\r\n    // double meanAnomaly = getSunGeometricMeanAnomaly(julianCenturies);\r\n    // double equationOfCenter = getSunEquationOfCenter(julianCenturies);\r\n    //\r\n    // return meanAnomaly + equationOfCenter; // in degrees\r\n    // }\r\n    /**\r\n     * Return the apparent longitude of the sun\r\n     *\r\n     * @param julianCenturies\r\n     *            the number of Julian centuries since J2000.0\r\n     * @return sun's apparent longitude in degrees\r\n     */\r\n    static getSunApparentLongitude(julianCenturies) {\r\n        const sunTrueLongitude = NOAACalculator.getSunTrueLongitude(julianCenturies);\r\n        const omega = 125.04 - 1934.136 * julianCenturies;\r\n        const lambda = sunTrueLongitude - 0.00569 - 0.00478 * Math.sin(MathUtils.degreesToRadians(omega));\r\n        return lambda; // in degrees\r\n    }\r\n    /**\r\n     * Returns the mean <a href=\"http://en.wikipedia.org/wiki/Axial_tilt\">obliquity of the ecliptic</a> (Axial tilt).\r\n     *\r\n     * @param julianCenturies\r\n     *            the number of Julian centuries since J2000.0\r\n     * @return the mean obliquity in degrees\r\n     */\r\n    static getMeanObliquityOfEcliptic(julianCenturies) {\r\n        const seconds = 21.448 - julianCenturies\r\n            * (46.8150 + julianCenturies * (0.00059 - julianCenturies * (0.001813)));\r\n        return 23 + (26 + (seconds / 60)) / 60; // in degrees\r\n    }\r\n    /**\r\n     * Returns the corrected <a href=\"http://en.wikipedia.org/wiki/Axial_tilt\">obliquity of the ecliptic</a> (Axial\r\n     * tilt).\r\n     *\r\n     * @param julianCenturies\r\n     *            the number of Julian centuries since J2000.0\r\n     * @return the corrected obliquity in degrees\r\n     */\r\n    static getObliquityCorrection(julianCenturies) {\r\n        const obliquityOfEcliptic = NOAACalculator.getMeanObliquityOfEcliptic(julianCenturies);\r\n        const omega = 125.04 - 1934.136 * julianCenturies;\r\n        return obliquityOfEcliptic + 0.00256 * Math.cos(MathUtils.degreesToRadians(omega)); // in degrees\r\n    }\r\n    /**\r\n     * Return the <a href=\"http://en.wikipedia.org/wiki/Declination\">declination</a> of the sun.\r\n     *\r\n     * @param julianCenturies\r\n     *            the number of Julian centuries since J2000.0\r\n     * @return\r\n     *            the sun's declination in degrees\r\n     */\r\n    static getSunDeclination(julianCenturies) {\r\n        const obliquityCorrection = NOAACalculator.getObliquityCorrection(julianCenturies);\r\n        const lambda = NOAACalculator.getSunApparentLongitude(julianCenturies);\r\n        const sint = Math.sin(MathUtils.degreesToRadians(obliquityCorrection)) * Math.sin(MathUtils.degreesToRadians(lambda));\r\n        const theta = MathUtils.radiansToDegrees(Math.asin(sint));\r\n        return theta; // in degrees\r\n    }\r\n    /**\r\n     * Return the <a href=\"http://en.wikipedia.org/wiki/Equation_of_time\">Equation of Time</a> - the difference between\r\n     * true solar time and mean solar time\r\n     *\r\n     * @param julianCenturies\r\n     *            the number of Julian centuries since J2000.0\r\n     * @return equation of time in minutes of time\r\n     */\r\n    static getEquationOfTime(julianCenturies) {\r\n        const epsilon = NOAACalculator.getObliquityCorrection(julianCenturies);\r\n        const geomMeanLongSun = NOAACalculator.getSunGeometricMeanLongitude(julianCenturies);\r\n        const eccentricityEarthOrbit = NOAACalculator.getEarthOrbitEccentricity(julianCenturies);\r\n        const geomMeanAnomalySun = NOAACalculator.getSunGeometricMeanAnomaly(julianCenturies);\r\n        let y = Math.tan(MathUtils.degreesToRadians(epsilon) / 2);\r\n        y *= y;\r\n        const sin2l0 = Math.sin(2 * MathUtils.degreesToRadians(geomMeanLongSun));\r\n        const sinm = Math.sin(MathUtils.degreesToRadians(geomMeanAnomalySun));\r\n        const cos2l0 = Math.cos(2 * MathUtils.degreesToRadians(geomMeanLongSun));\r\n        const sin4l0 = Math.sin(4 * MathUtils.degreesToRadians(geomMeanLongSun));\r\n        const sin2m = Math.sin(2 * MathUtils.degreesToRadians(geomMeanAnomalySun));\r\n        const equationOfTime = y * sin2l0 - 2 * eccentricityEarthOrbit * sinm + 4 * eccentricityEarthOrbit * y\r\n            * sinm * cos2l0 - 0.5 * y * y * sin4l0 - 1.25 * eccentricityEarthOrbit * eccentricityEarthOrbit * sin2m;\r\n        return MathUtils.radiansToDegrees(equationOfTime) * 4; // in minutes of time\r\n    }\r\n    /**\r\n     * Return the <a href=\"http://en.wikipedia.org/wiki/Hour_angle\">hour angle</a> of the sun at sunrise for the\r\n     * latitude.\r\n     *\r\n     * @param lat\r\n     *            , the latitude of observer in degrees\r\n     * @param solarDec\r\n     *            the declination angle of sun in degrees\r\n     * @param zenith\r\n     *            the zenith\r\n     * @return hour angle of sunrise in radians\r\n     */\r\n    static getSunHourAngleAtSunrise(lat, solarDec, zenith) {\r\n        const latRad = MathUtils.degreesToRadians(lat);\r\n        const sdRad = MathUtils.degreesToRadians(solarDec);\r\n        return (Math.acos(Math.cos(MathUtils.degreesToRadians(zenith)) / (Math.cos(latRad) * Math.cos(sdRad))\r\n            - Math.tan(latRad) * Math.tan(sdRad))); // in radians\r\n    }\r\n    /**\r\n     * Returns the <a href=\"http://en.wikipedia.org/wiki/Hour_angle\">hour angle</a> of the sun at sunset for the\r\n     * latitude. TODO: use - {@link #getSunHourAngleAtSunrise(double, double, double)} implementation to avoid\r\n     * duplication of code.\r\n     *\r\n     * @param lat\r\n     *            the latitude of observer in degrees\r\n     * @param solarDec\r\n     *            the declination angle of sun in degrees\r\n     * @param zenith\r\n     *            the zenith\r\n     * @return the hour angle of sunset in radians\r\n     */\r\n    static getSunHourAngleAtSunset(lat, solarDec, zenith) {\r\n        const latRad = MathUtils.degreesToRadians(lat);\r\n        const sdRad = MathUtils.degreesToRadians(solarDec);\r\n        const hourAngle = (Math.acos(Math.cos(MathUtils.degreesToRadians(zenith)) / (Math.cos(latRad) * Math.cos(sdRad))\r\n            - Math.tan(latRad) * Math.tan(sdRad)));\r\n        return -hourAngle; // in radians\r\n    }\r\n    /**\r\n     * Return the <a href=\"http://en.wikipedia.org/wiki/Celestial_coordinate_system\">Solar Elevation</a> for the\r\n     * horizontal coordinate system at the given location at the given time. Can be negative if the sun is below the\r\n     * horizon. Not corrected for altitude.\r\n     *\r\n     * @param cal\r\n     *            time of calculation\r\n     * @param lat\r\n     *            latitude of location for calculation\r\n     * @param lon\r\n     *            longitude of location for calculation\r\n     * @return solar elevation in degrees - horizon is 0 degrees, civil twilight is -6 degrees\r\n     */\r\n    static getSolarElevation(date, lat, lon) {\r\n        const julianDay = NOAACalculator.getJulianDay(date);\r\n        const julianCenturies = NOAACalculator.getJulianCenturiesFromJulianDay(julianDay);\r\n        const equationOfTime = NOAACalculator.getEquationOfTime(julianCenturies);\r\n        let longitude = (date.hour + 12) + (date.minute + equationOfTime + date.second / 60) / 60;\r\n        longitude = -(longitude * 360 / 24) % 360;\r\n        const hourAngleRad = MathUtils.degreesToRadians(lon - longitude);\r\n        const declination = NOAACalculator.getSunDeclination(julianCenturies);\r\n        const decRad = MathUtils.degreesToRadians(declination);\r\n        const latRad = MathUtils.degreesToRadians(lat);\r\n        return MathUtils.radiansToDegrees(Math.asin((Math.sin(latRad) * Math.sin(decRad))\r\n            + (Math.cos(latRad) * Math.cos(decRad) * Math.cos(hourAngleRad))));\r\n    }\r\n    /**\r\n     * Return the <a href=\"http://en.wikipedia.org/wiki/Celestial_coordinate_system\">Solar Azimuth</a> for the\r\n     * horizontal coordinate system at the given location at the given time. Not corrected for altitude. True south is 0\r\n     * degrees.\r\n     *\r\n     * @param cal\r\n     *            time of calculation\r\n     * @param latitude\r\n     *            latitude of location for calculation\r\n     * @param lon\r\n     *            longitude of location for calculation\r\n     * @return FIXME\r\n     */\r\n    static getSolarAzimuth(date, latitude, lon) {\r\n        const julianDay = NOAACalculator.getJulianDay(date);\r\n        const julianCenturies = NOAACalculator.getJulianCenturiesFromJulianDay(julianDay);\r\n        const equationOfTime = NOAACalculator.getEquationOfTime(julianCenturies);\r\n        let longitude = (date.hour + 12) + (date.minute + equationOfTime + date.second / 60) / 60;\r\n        longitude = -(longitude * 360 / 24) % 360;\r\n        const hourAngleRad = MathUtils.degreesToRadians(lon - longitude);\r\n        const declination = NOAACalculator.getSunDeclination(julianCenturies);\r\n        const decRad = MathUtils.degreesToRadians(declination);\r\n        const latRad = MathUtils.degreesToRadians(latitude);\r\n        return MathUtils.radiansToDegrees(Math.atan(Math.sin(hourAngleRad)\r\n            / ((Math.cos(hourAngleRad) * Math.sin(latRad)) - (Math.tan(decRad) * Math.cos(latRad))))) + 180;\r\n    }\r\n    /**\r\n     * Return the <a href=\"http://en.wikipedia.org/wiki/Universal_Coordinated_Time\">Universal Coordinated Time</a> (UTC)\r\n     * of sunrise for the given day at the given location on earth\r\n     *\r\n     * @param julianDay\r\n     *            the Julian day\r\n     * @param latitude\r\n     *            the latitude of observer in degrees\r\n     * @param longitude\r\n     *            the longitude of observer in degrees\r\n     * @param zenith\r\n     *            the zenith\r\n     * @return the time in minutes from zero UTC\r\n     */\r\n    static getSunriseUTC(julianDay, latitude, longitude, zenith) {\r\n        const julianCenturies = NOAACalculator.getJulianCenturiesFromJulianDay(julianDay);\r\n        // Find the time of solar noon at the location, and use that declination. This is better than start of the\r\n        // Julian day\r\n        const noonmin = NOAACalculator.getSolarNoonUTC(julianCenturies, longitude);\r\n        const tnoon = NOAACalculator.getJulianCenturiesFromJulianDay(julianDay + noonmin / 1440);\r\n        // First pass to approximate sunrise (using solar noon)\r\n        let eqTime = NOAACalculator.getEquationOfTime(tnoon);\r\n        let solarDec = NOAACalculator.getSunDeclination(tnoon);\r\n        let hourAngle = NOAACalculator.getSunHourAngleAtSunrise(latitude, solarDec, zenith);\r\n        let delta = longitude - MathUtils.radiansToDegrees(hourAngle);\r\n        let timeDiff = 4 * delta; // in minutes of time\r\n        let timeUTC = 720 + timeDiff - eqTime; // in minutes\r\n        // Second pass includes fractional Julian Day in gamma calc\r\n        const newt = NOAACalculator.getJulianCenturiesFromJulianDay(NOAACalculator.getJulianDayFromJulianCenturies(julianCenturies) + timeUTC / 1440);\r\n        eqTime = NOAACalculator.getEquationOfTime(newt);\r\n        solarDec = NOAACalculator.getSunDeclination(newt);\r\n        hourAngle = NOAACalculator.getSunHourAngleAtSunrise(latitude, solarDec, zenith);\r\n        delta = longitude - MathUtils.radiansToDegrees(hourAngle);\r\n        timeDiff = 4 * delta;\r\n        timeUTC = 720 + timeDiff - eqTime; // in minutes\r\n        return timeUTC;\r\n    }\r\n    /**\r\n     * Return the <a href=\"http://en.wikipedia.org/wiki/Universal_Coordinated_Time\">Universal Coordinated Time</a> (UTC)\r\n     * of <a href=\"http://en.wikipedia.org/wiki/Noon#Solar_noon\">solar noon</a> for the given day at the given location\r\n     * on earth.\r\n     *\r\n     * @param julianCenturies\r\n     *            the number of Julian centuries since J2000.0\r\n     * @param longitude\r\n     *            the longitude of observer in degrees\r\n     * @return the time in minutes from zero UTC\r\n     */\r\n    static getSolarNoonUTC(julianCenturies, longitude) {\r\n        // First pass uses approximate solar noon to calculate eqtime\r\n        const tnoon = NOAACalculator.getJulianCenturiesFromJulianDay(NOAACalculator.getJulianDayFromJulianCenturies(julianCenturies) + longitude / 360);\r\n        let eqTime = NOAACalculator.getEquationOfTime(tnoon);\r\n        const solNoonUTC = 720 + (longitude * 4) - eqTime; // min\r\n        const newt = NOAACalculator.getJulianCenturiesFromJulianDay(NOAACalculator.getJulianDayFromJulianCenturies(julianCenturies) - 0.5 + solNoonUTC / 1440);\r\n        eqTime = NOAACalculator.getEquationOfTime(newt);\r\n        return 720 + (longitude * 4) - eqTime; // min\r\n    }\r\n    /**\r\n     * Return the <a href=\"http://en.wikipedia.org/wiki/Universal_Coordinated_Time\">Universal Coordinated Time</a> (UTC)\r\n     * of sunset for the given day at the given location on earth\r\n     *\r\n     * @param julianDay\r\n     *            the Julian day\r\n     * @param latitude\r\n     *            the latitude of observer in degrees\r\n     * @param longitude\r\n     *            : longitude of observer in degrees\r\n     * @param zenith\r\n     *            the zenith\r\n     * @return the time in minutes from zero Universal Coordinated Time (UTC)\r\n     */\r\n    static getSunsetUTC(julianDay, latitude, longitude, zenith) {\r\n        const julianCenturies = NOAACalculator.getJulianCenturiesFromJulianDay(julianDay);\r\n        // Find the time of solar noon at the location, and use that declination. This is better than start of the\r\n        // Julian day\r\n        const noonmin = NOAACalculator.getSolarNoonUTC(julianCenturies, longitude);\r\n        const tnoon = NOAACalculator.getJulianCenturiesFromJulianDay(julianDay + noonmin / 1440);\r\n        // First calculates sunrise and approx length of day\r\n        let eqTime = NOAACalculator.getEquationOfTime(tnoon);\r\n        let solarDec = NOAACalculator.getSunDeclination(tnoon);\r\n        let hourAngle = NOAACalculator.getSunHourAngleAtSunset(latitude, solarDec, zenith);\r\n        let delta = longitude - MathUtils.radiansToDegrees(hourAngle);\r\n        let timeDiff = 4 * delta;\r\n        let timeUTC = 720 + timeDiff - eqTime;\r\n        // Second pass includes fractional Julian Day in gamma calc\r\n        const newt = NOAACalculator.getJulianCenturiesFromJulianDay(NOAACalculator.getJulianDayFromJulianCenturies(julianCenturies) + timeUTC / 1440);\r\n        eqTime = NOAACalculator.getEquationOfTime(newt);\r\n        solarDec = NOAACalculator.getSunDeclination(newt);\r\n        hourAngle = NOAACalculator.getSunHourAngleAtSunset(latitude, solarDec, zenith);\r\n        delta = longitude - MathUtils.radiansToDegrees(hourAngle);\r\n        timeDiff = 4 * delta;\r\n        timeUTC = 720 + timeDiff - eqTime; // in minutes\r\n        return timeUTC;\r\n    }\r\n}\r\n/**\r\n * The <a href=\"http://en.wikipedia.org/wiki/Julian_day\">Julian day</a> of January 1, 2000\r\n */\r\nNOAACalculator.JULIAN_DAY_JAN_1_2000 = 2451545;\r\n/**\r\n * Julian days per century\r\n */\r\nNOAACalculator.JULIAN_DAYS_PER_CENTURY = 36525;\r\n//# sourceMappingURL=NOAACalculator.js.map"]},"metadata":{},"sourceType":"module"}