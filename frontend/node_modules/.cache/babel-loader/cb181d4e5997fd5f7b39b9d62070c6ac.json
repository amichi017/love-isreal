{"ast":null,"code":"import _classCallCheck from \"C:\\\\react\\\\my-app\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\react\\\\my-app\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _get from \"C:\\\\react\\\\my-app\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:\\\\react\\\\my-app\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\react\\\\my-app\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\react\\\\my-app\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport { AstronomicalCalendar } from './AstronomicalCalendar';\nimport { JewishCalendar } from './hebrewcalendar/JewishCalendar';\nimport { NullPointerException } from './polyfills/errors';\n/**\r\n * The ZmanimCalendar is a specialized calendar that can calculate sunrise and sunset and Jewish <em>zmanim</em>\r\n * (religious times) for prayers and other Jewish religious duties. This class contains the main functionality of the\r\n * Zmanim library. For a much more extensive list of zmanim use the {@link ComplexZmanimCalendar} that extends this\r\n * class. See documentation for the {@link ComplexZmanimCalendar} and {@link AstronomicalCalendar} for simple examples\r\n * on using the API. According to Rabbi Dovid Yehudah Bursztyn in his <a href=\"http://www.worldcat.org/oclc/659793988\">\r\n * Zmanim Kehilchasam (second edition published in 2007)</a> chapter 2 (pages 186-187) no zmanim besides sunrise and\r\n * sunset should use elevation. However Rabbi Yechiel Avrahom Zilber in the <a href=\"http://hebrewbooks.org/51654\">\r\n * Birur Halacha Vol. 6</a> Ch. 58 Pages <a href=\"http://hebrewbooks.org/pdfpager.aspx?req=51654&amp;pgnum=42\">34</a>\r\n * and <a href=\"http://hebrewbooks.org/pdfpager.aspx?req=51654&amp;pgnum=50\">42</a> is of the opinion that elevation\r\n * should be accounted for in zmanim calculations. Related to this, Rabbi Yaakov Karp in <a href=\r\n * \"http://www.worldcat.org/oclc/919472094\">Shimush Zekeinim</a>, Ch. 1, page 17 states that obstructing horizons should\r\n * be factored into zmanim calculations. The setting defaults to false (elevation will not be used for zmanim calculations),\r\n * unless the setting is changed to true in {@link #setUseElevation(boolean)}. This will impact sunrise and sunset based\r\n * zmanim such as {@link #getSunrise()}, {@link #getSunset()}, {@link #getSofZmanShmaGRA()}, alos based zmanim such as\r\n * {@link #getSofZmanShmaMGA()} that are based on a fixed offset of sunrise or sunset and zmanim based on a percentage of\r\n * the day such as {@link ComplexZmanimCalendar#getSofZmanShmaMGA90MinutesZmanis()} that are based on sunrise and sunset.\r\n * It will not impact zmanim that are a degree based offset of sunrise and sunset, such as\r\n * {@link ComplexZmanimCalendar#getSofZmanShmaMGA16Point1Degrees()} or {@link ComplexZmanimCalendar#getSofZmanShmaBaalHatanya()}.\r\n *\r\n * <p><b>Note:</b> It is important to read the technical notes on top of the {@link AstronomicalCalculator} documentation\r\n * before using this code.\r\n * <p>I would like to thank Rabbi Yaakov Shakow, the author of Luach Ikvei Hayom who spent a considerable amount of time\r\n * reviewing, correcting and making suggestions on the documentation in this library.\r\n * <h2>Disclaimer:</h2> I did my best to get accurate results, but please double-check before relying on these zmanim for\r\n *\r\n * @author &copy; Eliyahu Hershfeld 2004 - 2019\r\n */\n\nexport var ZmanimCalendar = /*#__PURE__*/function (_AstronomicalCalendar) {\n  _inherits(ZmanimCalendar, _AstronomicalCalendar);\n\n  var _super = _createSuper(ZmanimCalendar);\n\n  function ZmanimCalendar() {\n    var _this;\n\n    _classCallCheck(this, ZmanimCalendar);\n\n    _this = _super.apply(this, arguments);\n    /**\r\n     * Is elevation factored in for some zmanim (see {@link #isUseElevation()} for additional information).\r\n     * @see #isUseElevation()\r\n     * @see #setUseElevation(boolean)\r\n     */\n\n    _this.useElevation = false;\n    /**\r\n     * The default <em>Shabbos</em> candle lighting offset is 18 minutes. This can be changed via the\r\n     * {@link #setCandleLightingOffset(double)} and retrieved by the {@link #getCandleLightingOffset()}.\r\n     */\n\n    _this.candleLightingOffset = 18;\n    return _this;\n  }\n  /**\r\n   * Is elevation above sea level calculated for times besides sunrise and sunset. According to Rabbi Dovid Yehuda\r\n   * Bursztyn in his <a href=\"http://www.worldcat.org/oclc/659793988\">Zmanim Kehilchasam (second edition published\r\n   * in 2007)</a> chapter 2 (pages 186-187) no zmanim besides sunrise and sunset should use elevation. However Rabbi\r\n   * Yechiel Avrahom Zilber in the <a href=\"http://hebrewbooks.org/51654\">Birur Halacha Vol. 6</a> Ch. 58 Pages\r\n   * <a href=\"http://hebrewbooks.org/pdfpager.aspx?req=51654&amp;pgnum=42\">34</a> and <a href=\r\n   * \"http://hebrewbooks.org/pdfpager.aspx?req=51654&amp;pgnum=50\">42</a> is of the opinion that elevation should be\r\n   * accounted for in zmanim calculations. Related to this, Rabbi Yaakov Karp in <a href=\r\n   * \"http://www.worldcat.org/oclc/919472094\">Shimush Zekeinim</a>, Ch. 1, page 17 states that obstructing horizons\r\n   * should be factored into zmanim calculations.The setting defaults to false (elevation will not be used for zmanim\r\n   * calculations), unless the setting is changed to true in {@link #setUseElevation(boolean)}. This will impact sunrise\r\n   * and sunset based zmanim such as {@link #getSunrise()}, {@link #getSunset()}, {@link #getSofZmanShmaGRA()}, alos based\r\n   * zmanim such as {@link #getSofZmanShmaMGA()} that are based on a fixed offset of sunrise or sunset and zmanim based on\r\n   * a percentage of the day such as {@link ComplexZmanimCalendar#getSofZmanShmaMGA90MinutesZmanis()} that are based on\r\n   * sunrise and sunset. It will not impact zmanim that are a degree based offset of sunrise and sunset, such as\r\n   * {@link ComplexZmanimCalendar#getSofZmanShmaMGA16Point1Degrees()} or {@link ComplexZmanimCalendar#getSofZmanShmaBaalHatanya()}.\r\n   *\r\n   * @return if the use of elevation is active\r\n   *\r\n   * @see #setUseElevation(boolean)\r\n   */\n\n\n  _createClass(ZmanimCalendar, [{\n    key: \"isUseElevation\",\n    value: function isUseElevation() {\n      return this.useElevation;\n    }\n    /**\r\n     * Sets whether elevation above sea level is factored into <em>zmanim</em> calculations for times besides sunrise and sunset.\r\n     * See {@link #isUseElevation()} for more details.\r\n     * @see #isUseElevation()\r\n     *\r\n     * @param useElevation set to true to use elevation in zmanim calculations\r\n     */\n\n  }, {\n    key: \"setUseElevation\",\n    value: function setUseElevation(useElevation) {\n      this.useElevation = useElevation;\n    }\n    /**\r\n     * This method will return {@link #getSeaLevelSunrise() sea level sunrise} if {@link #isUseElevation()} is false\r\n     * (the default), or elevation adjusted {@link AstronomicalCalendar#getSunrise()} if it is true. This allows relevant zmanim\r\n     * in this and extending classes (such as the {@link ComplexZmanimCalendar}) to automatically adjust to the elevation setting.\r\n     *\r\n     * @return {@link #getSeaLevelSunrise()} if {@link #isUseElevation()} is false (the default), or elevation adjusted\r\n     *          {@link AstronomicalCalendar#getSunrise()} if it is true.\r\n     * @see net.sourceforge.zmanim.AstronomicalCalendar#getSunrise()\r\n     */\n\n  }, {\n    key: \"getElevationAdjustedSunrise\",\n    value: function getElevationAdjustedSunrise() {\n      if (this.isUseElevation()) {\n        return _get(_getPrototypeOf(ZmanimCalendar.prototype), \"getSunrise\", this).call(this);\n      }\n\n      return this.getSeaLevelSunrise();\n    }\n    /**\r\n     * This method will return {@link #getSeaLevelSunrise() sea level sunrise} if {@link #isUseElevation()} is false\r\n     * (the default), or elevation adjusted {@link AstronomicalCalendar#getSunrise()} if it is true. This allows relevant zmanim\r\n     * in this and extending classes (such as the {@link ComplexZmanimCalendar}) to automatically adjust to the elevation setting.\r\n     *\r\n     * @return {@link #getSeaLevelSunset()} if {@link #isUseElevation()} is false (the default), or elevation adjusted\r\n     *          {@link AstronomicalCalendar#getSunset()} if it is true.\r\n     * @see net.sourceforge.zmanim.AstronomicalCalendar#getSunset()\r\n     */\n\n  }, {\n    key: \"getElevationAdjustedSunset\",\n    value: function getElevationAdjustedSunset() {\n      if (this.isUseElevation()) {\n        return _get(_getPrototypeOf(ZmanimCalendar.prototype), \"getSunset\", this).call(this);\n      }\n\n      return this.getSeaLevelSunset();\n    }\n    /**\r\n     * A method that returns <em>tzais</em> (nightfall) when the sun is {@link #ZENITH_8_POINT_5 8.5&deg;} below the\r\n     * {@link #GEOMETRIC_ZENITH geometric horizon} (90&deg;) after {@link #getSunset sunset}, a time that Rabbi Meir\r\n     * Posen in his the <em><a href=\"http://www.worldcat.org/oclc/29283612\">Ohr Meir</a></em> calculated that 3 small\r\n     * stars are visible, which is later than the required 3 medium stars. See the {@link #ZENITH_8_POINT_5} constant.\r\n     *\r\n     * @see #ZENITH_8_POINT_5\r\n     *\r\n     * @return The <code>Date</code> of nightfall. If the calculation can't be computed such as northern and southern\r\n     *         locations even south of the Arctic Circle and north of the Antarctic Circle where the sun may not reach\r\n     *         low enough below the horizon for this calculation, a null will be returned. See detailed explanation on\r\n     *         top of the {@link AstronomicalCalendar} documentation.\r\n     * @see #ZENITH_8_POINT_5\r\n     * ComplexZmanimCalendar#getTzaisGeonim8Point5Degrees() that returns an identical time to this generic <em>tzais</em>\r\n     */\n\n  }, {\n    key: \"getTzais\",\n    value: function getTzais() {\n      return this.getSunsetOffsetByDegrees(ZmanimCalendar.ZENITH_8_POINT_5);\n    }\n    /**\r\n     * Returns <em>alos</em> (dawn) based on the time when the sun is {@link #ZENITH_16_POINT_1 16.1&deg;} below the\r\n     * eastern {@link #GEOMETRIC_ZENITH geometric horizon} before {@link #getSunrise sunrise}. This is based on the\r\n     * calculation that the time between dawn and sunrise (and sunset to nightfall) is 72 minutes, the time that is\r\n     * takes to walk 4 <em>mil</em> at 18 minutes a mil (<em><a href=\"https://en.wikipedia.org/wiki/Maimonides\"\r\n     * >Rambam</a></em> and others). The sun's position at 72 minutes before {@link #getSunrise sunrise} in Jerusalem\r\n     * on the equinox (on March 16, about 4 days before the astronomical equinox, the day that a solar hour is 60\r\n     * minutes) is 16.1&deg; below. See the {@link #GEOMETRIC_ZENITH} constant.\r\n     *\r\n     * @see #ZENITH_16_POINT_1\r\n     * @see ComplexZmanimCalendar#getAlos16Point1Degrees()\r\n     *\r\n     * @return The <code>Date</code> of dawn. If the calculation can't be computed such as northern and southern\r\n     *         locations even south of the Arctic Circle and north of the Antarctic Circle where the sun may not reach\r\n     *         low enough below the horizon for this calculation, a null will be returned. See detailed explanation on\r\n     *         top of the {@link AstronomicalCalendar} documentation.\r\n     */\n\n  }, {\n    key: \"getAlosHashachar\",\n    value: function getAlosHashachar() {\n      return this.getSunriseOffsetByDegrees(ZmanimCalendar.ZENITH_16_POINT_1);\n    }\n    /**\r\n     * Method to return <em>alos</em> (dawn) calculated using 72 minutes before {@link #getSunrise() sunrise} or\r\n     * {@link #getSeaLevelSunrise() sea level sunrise} (depending on the {@link #isUseElevation()} setting). This time\r\n     * is based on the time to walk the distance of 4 <em>Mil</em> at 18 minutes a <em>Mil</em>. The 72 minute time (but\r\n     * not the concept of fixed minutes) is based on the opinion that the time of the <em>Neshef</em> (twilight between\r\n     * dawn and sunrise) does not vary by the time of year or location but depends on the time it takes to walk the\r\n     * distance of 4 <em>Mil</em>.\r\n     *\r\n     * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\r\n     *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\r\n     *         a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n     *         documentation.\r\n     */\n\n  }, {\n    key: \"getAlos72\",\n    value: function getAlos72() {\n      return ZmanimCalendar.getTimeOffset(this.getElevationAdjustedSunrise(), -72 * ZmanimCalendar.MINUTE_MILLIS);\n    }\n    /**\r\n     * This method returns <em>chatzos</em> (midday) following most opinions that <em>chatzos</em> is the midpoint\r\n     * between {@link #getSeaLevelSunrise sea level sunrise} and {@link #getSeaLevelSunset sea level sunset}. A day\r\n     * starting at <em>alos</em> and ending at <em>tzais</em> using the same time or degree offset will also return\r\n     * the same time. The returned value is identical to {@link #getSunTransit()}. In reality due to lengthening or\r\n     * shortening of day, this is not necessarily the exact midpoint of the day, but it is very close.\r\n     *\r\n     * @see AstronomicalCalendar#getSunTransit()\r\n     * @return the <code>Date</code> of chatzos. If the calculation can't be computed such as in the Arctic Circle\r\n     *         where there is at least one day where the sun does not rise, and one where it does not set, a null will\r\n     *         be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n     */\n\n  }, {\n    key: \"getChatzos\",\n    value: function getChatzos() {\n      return this.getSunTransit();\n    }\n    /**\r\n     * A generic method for calculating the latest <em>zman krias shema</em> (time to recite shema in the morning)\r\n     * that is 3 * <em>shaos zmaniyos</em> (temporal hours) after the start of the day, calculated using the start and\r\n     * end of the day passed to this method.\r\n     * The time from the start of day to the end of day are divided into 12 <em>shaos zmaniyos</em> (temporal hours),\r\n     * and the latest <em>zman krias shema</em> is calculated as 3 of those <em>shaos zmaniyos</em> after the beginning of\r\n     * the day. As an example, passing {@link #getSunrise() sunrise} and {@link #getSunset sunset} or {@link #getSeaLevelSunrise()\r\n       * sea level sunrise} and {@link #getSeaLevelSunset() sea level sunset} (depending on the {@link #isUseElevation()}\r\n     * elevation setting) to this method will return <em>sof zman krias shema</em> according to the opinion of the\r\n     * <em><a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a></em>.\r\n     *\r\n     * @param startOfDay\r\n     *            the start of day for calculating <em>zman krias shema</em>. This can be sunrise or any alos passed to\r\n     *            this method.\r\n     * @param endOfDay\r\n     *            the start of day for calculating <em>zman krias shema</em>. This can be sunset or any tzais passed to\r\n     *            this method.\r\n     * @return the <code>Date</code> of the latest <em>zman shema</em> based on the start and end of day times passed to this\r\n     *         method. If the calculation can't be computed such as in the Arctic Circle where there is at least one day\r\n     *         a year where the sun does not rise, and one where it does not set, a null will be returned. See detailed\r\n     *         explanation on top of the {@link AstronomicalCalendar} documentation.\r\n     */\n\n  }, {\n    key: \"getSofZmanShma\",\n    value: function getSofZmanShma(startOfDay, endOfDay) {\n      var shaahZmanis = this.getTemporalHour(startOfDay, endOfDay);\n      return ZmanimCalendar.getTimeOffset(startOfDay, shaahZmanis * 3);\n    }\n    /**\r\n     * This method returns the latest <em>zman krias shema</em> (time to recite shema in the morning) that is 3 *\r\n     * <em>{@link #getShaahZmanisGra() shaos zmaniyos}</em> (solar hours) after {@link #getSunrise() sunrise} or\r\n     * {@link #getSeaLevelSunrise() sea level sunrise} (depending on the {@link #isUseElevation()} setting), according\r\n     * to the <em><a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a></em>.\r\n     * The day is calculated from {@link #getSeaLevelSunrise() sea level sunrise} to {@link #getSeaLevelSunrise sea level\r\n       * sunset} or {@link #getSunrise() sunrise} to {@link #getSunset() sunset} (depending on the {@link #isUseElevation()}\r\n     * setting).\r\n     *\r\n     * @see #getSofZmanShma(Date, Date)\r\n     * @see #getShaahZmanisGra()\r\n     * @see #isUseElevation()\r\n     * @see ComplexZmanimCalendar#getSofZmanShmaBaalHatanya()\r\n     * @return the <code>Date</code> of the latest zman shema according to the GRA. If the calculation can't be computed\r\n     * such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n     * does not set, a null will be returned. See the detailed explanation on top of the {@link AstronomicalCalendar}\r\n     * documentation.\r\n     */\n\n  }, {\n    key: \"getSofZmanShmaGRA\",\n    value: function getSofZmanShmaGRA() {\n      return this.getSofZmanShma(this.getElevationAdjustedSunrise(), this.getElevationAdjustedSunset());\n    }\n    /**\r\n     * This method returns the latest <em>zman krias shema</em> (time to recite shema in the morning) that is 3 *\r\n     * <em>{@link #getShaahZmanisMGA() shaos zmaniyos}</em> (solar hours) after {@link #getAlos72()}, according to the\r\n     * <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em>. The day is calculated\r\n     * from 72 minutes before {@link #getSeaLevelSunrise() sea level sunrise} to 72 minutes after {@link\r\n      * #getSeaLevelSunrise sea level sunset} or from 72 minutes before {@link #getSunrise() sunrise} to {@link #getSunset()\r\n       * sunset} (depending on the {@link #isUseElevation()} setting).\r\n     *\r\n     * @return the <code>Date</code> of the latest <em>zman shema</em>. If the calculation can't be computed such as in\r\n     *         the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n     *         does not set, a null will be returned. See detailed explanation on top of the\r\n     *         {@link AstronomicalCalendar} documentation.\r\n     * @see #getSofZmanShma(Date, Date)\r\n     * @see ComplexZmanimCalendar#getShaahZmanis72Minutes()\r\n     * @see ComplexZmanimCalendar#getAlos72()\r\n     * @see ComplexZmanimCalendar#getSofZmanShmaMGA72Minutes()\r\n     */\n\n  }, {\n    key: \"getSofZmanShmaMGA\",\n    value: function getSofZmanShmaMGA() {\n      return this.getSofZmanShma(this.getAlos72(), this.getTzais72());\n    }\n    /**\r\n     * This method returns the <em>tzais</em> (nightfall) based on the opinion of the <em><a href=\r\n     * \"https://en.wikipedia.org/wiki/Maimonides\">Rambam</a></em> and <em>Rabbeinu Tam</em> that <em>tzais</em> is\r\n     * calculated as 72 minutes, the time it takes to walk 4 <em>Mil</em> at 18 minutes a <em>Mil</em>. Based on\r\n     * the on the {@link #isUseElevation()} setting) a 72 minute offset from either {@link #getSunset() sunset} or\r\n     * {@link #getSeaLevelSunset() sea level sunset} is used.\r\n     *\r\n     * @see ComplexZmanimCalendar#getTzais16Point1Degrees()\r\n     * @return the <code>Date</code> representing 72 minutes after sunset. If the calculation can't be\r\n     *         computed such as in the Arctic Circle where there is at least one day a year where the sun does not rise,\r\n     *         and one where it does not set, a null will be returned See detailed explanation on top of the\r\n     *         {@link AstronomicalCalendar} documentation.\r\n     */\n\n  }, {\n    key: \"getTzais72\",\n    value: function getTzais72() {\n      return ZmanimCalendar.getTimeOffset(this.getElevationAdjustedSunset(), 72 * ZmanimCalendar.MINUTE_MILLIS);\n    }\n    /**\r\n     * A method to return candle lighting time, calculated as {@link #getCandleLightingOffset()} minutes before\r\n     * {@link #getSeaLevelSunset() sea level sunset}. This will return the time for any day of the week, since it can be\r\n     * used to calculate candle lighting time for <em>Yom Tov</em> (mid-week holidays) as well. Elevation adjustments\r\n     * are intentionally not performed by this method, but you can calculate it by passing the elevation adjusted sunset\r\n     * to {@link #getTimeOffset(Date, long)}.\r\n     *\r\n     * @return candle lighting time. If the calculation can't be computed such as in the Arctic Circle where there is at\r\n     *         least one day a year where the sun does not rise, and one where it does not set, a null will be returned.\r\n     *         See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n     *\r\n     * @see #getSeaLevelSunset()\r\n     * @see #getCandleLightingOffset()\r\n     * @see #setCandleLightingOffset(double)\r\n     */\n\n  }, {\n    key: \"getCandleLighting\",\n    value: function getCandleLighting() {\n      return ZmanimCalendar.getTimeOffset(this.getSeaLevelSunset(), -this.getCandleLightingOffset() * ZmanimCalendar.MINUTE_MILLIS);\n    }\n    /**\r\n     * A generic method for calculating the latest <em>zman tfilah</em> (time to recite the morning prayers)\r\n     * that is 4 * <em>shaos zmaniyos</em> (temporal hours) after the start of the day, calculated using the start and\r\n     * end of the day passed to this method.\r\n     * The time from the start of day to the end of day are divided into 12 <em>shaos zmaniyos</em> (temporal hours),\r\n     * and <em>sof zman tfila</em> is calculated as 4 of those <em>shaos zmaniyos</em> after the beginning of the day.\r\n     * As an example, passing {@link #getSunrise() sunrise} and {@link #getSunset sunset} or {@link #getSeaLevelSunrise()\r\n       * sea level sunrise} and {@link #getSeaLevelSunset() sea level sunset} (depending on the {@link #isUseElevation()}\r\n     * elevation setting) to this method will return <em>zman tfilah</em> according to the opinion of the <em><a href=\r\n     * \"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a></em>.\r\n     *\r\n     * @param startOfDay\r\n     *            the start of day for calculating <em>zman tefila</em>. This can be sunrise or any alos passed to\r\n     *            this method.\r\n     * @param endOfDay\r\n     *            the start of day for calculating <em>zman tefila</em>. This can be sunset or any tzais passed to this\r\n     *            method.\r\n     * @return the <code>Date</code> of the latest <em>zman tefila</em> based on the start and end of day times passed\r\n     *         to this method. If the calculation can't be computed such as in the Arctic Circle where there is at least\r\n     *         one day a year where the sun does not rise, and one where it does not set, a null will be returned. See\r\n     *         detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n     */\n\n  }, {\n    key: \"getSofZmanTfila\",\n    value: function getSofZmanTfila(startOfDay, endOfDay) {\n      var shaahZmanis = this.getTemporalHour(startOfDay, endOfDay);\n      return ZmanimCalendar.getTimeOffset(startOfDay, shaahZmanis * 4);\n    }\n    /**\r\n     * This method returns the latest <em>zman tfila</em> (time to recite shema in the morning) that is 4 *\r\n     * <em>{@link #getShaahZmanisGra() shaos zmaniyos}</em> (solar hours) after {@link #getSunrise() sunrise} or\r\n     * {@link #getSeaLevelSunrise() sea level sunrise} (depending on the {@link #isUseElevation()} setting), according\r\n     * to the <em><a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a></em>.\r\n     * The day is calculated from {@link #getSeaLevelSunrise() sea level sunrise} to {@link #getSeaLevelSunrise sea level\r\n       * sunset} or {@link #getSunrise() sunrise} to {@link #getSunset() sunset} (depending on the {@link #isUseElevation()}\r\n     * setting).\r\n     *\r\n     * @see #getSofZmanTfila(Date, Date)\r\n     * @see #getShaahZmanisGra()\r\n     * @see ComplexZmanimCalendar#getSofZmanTfilaBaalHatanya()\r\n     * @return the <code>Date</code> of the latest zman tfilah. If the calculation can't be computed such as in the\r\n     *         Arctic Circle where there is at least one day a year where the sun does not rise, and one where it does\r\n     *         not set, a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n     *         documentation.\r\n     */\n\n  }, {\n    key: \"getSofZmanTfilaGRA\",\n    value: function getSofZmanTfilaGRA() {\n      return this.getSofZmanTfila(this.getElevationAdjustedSunrise(), this.getElevationAdjustedSunset());\n    }\n    /**\r\n     * This method returns the latest <em>zman tfila</em> (time to recite shema in the morning) that is 4 *\r\n     * <em>{@link #getShaahZmanisMGA() shaos zmaniyos}</em> (solar hours) after {@link #getAlos72()}, according to the\r\n     * <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em>. The day is calculated\r\n     * from 72 minutes before {@link #getSeaLevelSunrise() sea level sunrise} to 72 minutes after {@link\r\n      * #getSeaLevelSunrise sea level sunset} or from 72 minutes before {@link #getSunrise() sunrise} to {@link #getSunset()\r\n       * sunset} (depending on the {@link #isUseElevation()} setting).\r\n     *\r\n     * @return the <code>Date</code> of the latest zman tfila. If the calculation can't be computed such as in the\r\n     *         Arctic Circle where there is at least one day a year where the sun does not rise, and one where it does\r\n     *         not set), a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n     *         documentation.\r\n     * @see #getSofZmanTfila(Date, Date)\r\n     * @see #getShaahZmanisMGA()\r\n     * @see #getAlos72()\r\n     */\n\n  }, {\n    key: \"getSofZmanTfilaMGA\",\n    value: function getSofZmanTfilaMGA() {\n      return this.getSofZmanTfila(this.getAlos72(), this.getTzais72());\n    }\n    /**\r\n     * A generic method for calculating the latest <em>mincha gedola</em> (the earliest time to recite the mincha  prayers)\r\n     * that is 6.5 * <em>shaos zmaniyos</em> (temporal hours) after the start of the day, calculated using the start and end\r\n     * of the day passed to this method.\r\n     * The time from the start of day to the end of day are divided into 12 <em>shaos zmaniyos</em> (temporal hours), and\r\n     * <em>mincha gedola</em> is calculated as 6.5 of those <em>shaos zmaniyos</em> after the beginning of the day. As an\r\n     * example, passing {@link #getSunrise() sunrise} and {@link #getSunset sunset} or {@link #getSeaLevelSunrise() sea level\r\n       * sunrise} and {@link #getSeaLevelSunset() sea level sunset} (depending on the {@link #isUseElevation()} elevation\r\n     * setting) to this method will return <em>mincha gedola</em> according to the opinion of the\r\n     * <em><a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a></em>.\r\n     *\r\n     * @param startOfDay\r\n     *            the start of day for calculating <em>Mincha gedola</em>. This can be sunrise or any alos passed to\r\n     *            this method.\r\n     * @param endOfDay\r\n     *            the start of day for calculating <em>Mincha gedola</em>. This can be sunrise or any alos passed to\r\n     *            this method.\r\n     * @return the <code>Date</code> of the time of <em>Mincha gedola</em> based on the start and end of day times\r\n     *         passed to this method. If the calculation can't be computed such as in the Arctic Circle where there is\r\n     *         at least one day a year where the sun does not rise, and one where it does not set, a null will be\r\n     *         returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n     */\n\n  }, {\n    key: \"getMinchaGedola\",\n    value: function getMinchaGedola() {\n      var startOfDay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getElevationAdjustedSunrise();\n      var endOfDay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getElevationAdjustedSunset();\n      var shaahZmanis = this.getTemporalHour(startOfDay, endOfDay);\n      return ZmanimCalendar.getTimeOffset(startOfDay, shaahZmanis * 6.5);\n    }\n    /**\r\n     * This method returns the latest <em>mincha gedola</em>,the earliest time one can pray <em>mincha</em> that is 6.5 *\r\n     * <em>{@link #getShaahZmanisGra() shaos zmaniyos}</em> (solar hours) after {@link #getSunrise() sunrise} or\r\n     * {@link #getSeaLevelSunrise() sea level sunrise} (depending on the {@link #isUseElevation()} setting), according\r\n     * to the <em><a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a></em>. <em>Mincha gedola</em> is the earliest\r\n     * time one can pray <em>mincha</em>. The Ramba\"m is of the opinion that it is better to delay <em>mincha</em> until\r\n     * <em>{@link #getMinchaKetana() mincha ketana}</em> while the <em>Ra\"sh, Tur, GRA</em> and others are of the\r\n     * opinion that <em>mincha</em> can be prayed <em>lechatchila</em> starting at <em>mincha gedola</em>.\r\n     * The day is calculated from {@link #getSeaLevelSunrise() sea level sunrise} to {@link #getSeaLevelSunrise sea level\r\n       * sunset} or {@link #getSunrise() sunrise} to {@link #getSunset() sunset} (depending on the {@link #isUseElevation()}\r\n     * setting).\r\n     *\r\n     * @see #getMinchaGedola(Date, Date)\r\n     * @see #getShaahZmanisGra()\r\n     * @see #getMinchaKetana()\r\n     * @see ComplexZmanimCalendar#getMinchaGedolaBaalHatanya()\r\n     * @return the <code>Date</code> of the time of mincha gedola. If the calculation can't be computed such as in the\r\n     *         Arctic Circle where there is at least one day a year where the sun does not rise, and one where it does\r\n     *         not set, a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n     *         documentation.\r\n     */\n\n    /*\r\n        public getMinchaGedola(): Date {\r\n            return this.getMinchaGedola(this.getSeaLevelSunrise(), this.getSeaLevelSunset());\r\n        }\r\n    */\n\n    /**\r\n     * A generic method for calculating <em>mincha ketana</em>, (the preferred time to recite the mincha prayers in\r\n     * the opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Maimonides\">Rambam</a></em> and others) that is\r\n     * 9.5 * <em>shaos zmaniyos</em> (temporal hours) after the start of the day, calculated using the start and end\r\n     * of the day passed to this method.\r\n     * The time from the start of day to the end of day are divided into 12 <em>shaos zmaniyos</em> (temporal hours), and\r\n     * <em>mincha ketana</em> is calculated as 9.5 of those <em>shaos zmaniyos</em> after the beginning of the day. As an\r\n     * example, passing {@link #getSunrise() sunrise} and {@link #getSunset sunset} or {@link #getSeaLevelSunrise() sea level\r\n       * sunrise} and {@link #getSeaLevelSunset() sea level sunset} (depending on the {@link #isUseElevation()} elevation\r\n     * setting) to this method will return <em>mincha ketana</em> according to the opinion of the\r\n     * <em><a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a></em>.\r\n     *\r\n     * @param startOfDay\r\n     *            the start of day for calculating <em>Mincha ketana</em>. This can be sunrise or any alos passed to\r\n     *            this method.\r\n     * @param endOfDay\r\n     *            the start of day for calculating <em>Mincha ketana</em>. This can be sunrise or any alos passed to\r\n     *            this method.\r\n     * @return the <code>Date</code> of the time of <em>Mincha ketana</em> based on the start and end of day times\r\n     *         passed to this method. If the calculation can't be computed such as in the Arctic Circle where there is\r\n     *         at least one day a year where the sun does not rise, and one where it does not set, a null will be\r\n     *         returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n     */\n\n  }, {\n    key: \"getMinchaKetana\",\n    value: function getMinchaKetana() {\n      var startOfDay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getElevationAdjustedSunrise();\n      var endOfDay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getElevationAdjustedSunset();\n      var shaahZmanis = this.getTemporalHour(startOfDay, endOfDay);\n      return ZmanimCalendar.getTimeOffset(startOfDay, shaahZmanis * 9.5);\n    }\n    /**\r\n     * This method returns <em>mincha ketana</em>,the preferred earliest time to pray <em>mincha</em> in the\r\n     * opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Maimonides\">Rambam</a></em> and others, that is 9.5\r\n     * * <em>{@link #getShaahZmanisGra() shaos zmaniyos}</em> (solar hours) after {@link #getSunrise() sunrise} or\r\n     * {@link #getSeaLevelSunrise() sea level sunrise} (depending on the {@link #isUseElevation()} setting), according\r\n     * to the <em><a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a></em>. For more information on this see the\r\n     * documentation on <em>{@link #getMinchaGedola() mincha gedola}</em>.\r\n     * The day is calculated from {@link #getSeaLevelSunrise() sea level sunrise} to {@link #getSeaLevelSunrise sea level\r\n     * sunset} or {@link #getSunrise() sunrise} to {@link #getSunset() sunset} (depending on the {@link #isUseElevation()}\r\n     * setting.\r\n     *\r\n     * @see #getMinchaKetana(Date, Date)\r\n     * @see #getShaahZmanisGra()\r\n     * @see #getMinchaGedola()\r\n     * @see ComplexZmanimCalendar#getMinchaKetanaBaalHatanya()\r\n     * @return the <code>Date</code> of the time of mincha ketana. If the calculation can't be computed such as in the\r\n     *         Arctic Circle where there is at least one day a year where the sun does not rise, and one where it does\r\n     *         not set, a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n     *         documentation.\r\n     */\n\n    /*\r\n        public getMinchaKetana(): Date {\r\n            return this.getMinchaKetana(this.getSeaLevelSunrise(), this.getSeaLevelSunset());\r\n        }\r\n    */\n\n    /**\r\n     * A generic method for calculating <em>plag hamincha</em> (the earliest time that Shabbos can be started) that is\r\n     * 10.75 hours after the start of the day, (or 1.25 hours before the end of the day) based on the start and end of\r\n     * the day passed to the method.\r\n     * The time from the start of day to the end of day are divided into 12 <em>shaos zmaniyos</em> (temporal hours), and\r\n     * <em>plag hamincha</em> is calculated as 10.75 of those <em>shaos zmaniyos</em> after the beginning of the day. As an\r\n     * example, passing {@link #getSunrise() sunrise} and {@link #getSunset sunset} or {@link #getSeaLevelSunrise() sea level\r\n       * sunrise} and {@link #getSeaLevelSunset() sea level sunset} (depending on the {@link #isUseElevation()} elevation\r\n     * setting) to this method will return <em>plag mincha</em> according to the opinion of the\r\n     * <em><a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a></em>.\r\n     *\r\n     * @param startOfDay\r\n     *            the start of day for calculating plag. This can be sunrise or any alos passed to this method.\r\n     * @param endOfDay\r\n     *            the start of day for calculating plag. This can be sunrise or any alos passed to this method.\r\n     * @return the <code>Date</code> of the time of <em>plag hamincha</em> based on the start and end of day times\r\n     *         passed to this method. If the calculation can't be computed such as in the Arctic Circle where there is\r\n     *         at least one day a year where the sun does not rise, and one where it does not set, a null will be\r\n     *         returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n     */\n\n  }, {\n    key: \"getPlagHamincha\",\n    value: function getPlagHamincha() {\n      var startOfDay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getElevationAdjustedSunrise();\n      var endOfDay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getElevationAdjustedSunset();\n      var shaahZmanis = this.getTemporalHour(startOfDay, endOfDay);\n      return ZmanimCalendar.getTimeOffset(startOfDay, shaahZmanis * 10.75);\n    }\n    /**\r\n     * This method returns <em>plag hamincha</em>, that is 10.75 * <em>{@link #getShaahZmanisGra() shaos zmaniyos}</em>\r\n     * (solar hours) after {@link #getSunrise() sunrise} or {@link #getSeaLevelSunrise() sea level sunrise} (depending on\r\n     * the {@link #isUseElevation()} setting), according to the <em><a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\"\r\n     * >GRA</a></em>. Plag hamincha is the earliest time that <em>Shabbos</em> can be started.\r\n     * The day is calculated from {@link #getSeaLevelSunrise() sea level sunrise} to {@link #getSeaLevelSunrise sea level\r\n       * sunset} or {@link #getSunrise() sunrise} to {@link #getSunset() sunset} (depending on the {@link #isUseElevation()}\r\n     *\r\n     * @see #getPlagHamincha(Date, Date)\r\n     * @see ComplexZmanimCalendar#getPlagHaminchaBaalHatanya()\r\n     * @return the <code>Date</code> of the time of <em>plag hamincha</em>. If the calculation can't be computed such as\r\n     *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n     *         does not set, a null will be returned. See detailed explanation on top of the\r\n     *         {@link AstronomicalCalendar} documentation.\r\n     */\n\n    /*\r\n        public getPlagHamincha(): Date {\r\n            return this.getPlagHamincha(this.getSeaLevelSunrise(), this.getSeaLevelSunset());\r\n        }\r\n    */\n\n    /**\r\n     * A method that returns a <em>shaah zmanis</em> ({@link #getTemporalHour(Date, Date) temporal hour}) according to\r\n     * the opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a></em>. This calculation divides\r\n     * the day based on the opinion of the <em>GRA</em> that the day runs from from {@link #getSeaLevelSunrise() sea\r\n       * level sunrise} to {@link #getSeaLevelSunrise sea level sunset} or {@link #getSunrise() sunrise} to\r\n     * {@link #getSunset() sunset} (depending on the {@link #isUseElevation()} setting). The day is split into 12 equal\r\n     * parts with each one being a <em>shaah zmanis</em>. This method is similar to {@link #getTemporalHour}, but can\r\n     * account for elevation.\r\n     *\r\n     * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em> calculated from sunrise to sunset.\r\n     *         If the calculation can't be computed such as in the Arctic Circle where there is at least one day a year\r\n     *         where the sun does not rise, and one where it does not set, {@link Long#MIN_VALUE} will be returned. See\r\n     *         detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n     * @see #getTemporalHour(Date, Date)\r\n     * @see #getSeaLevelSunrise()\r\n     * @see #getSeaLevelSunset()\r\n     * @see ComplexZmanimCalendar#getShaahZmanisBaalHatanya()\r\n     */\n\n  }, {\n    key: \"getShaahZmanisGra\",\n    value: function getShaahZmanisGra() {\n      return this.getTemporalHour(this.getElevationAdjustedSunrise(), this.getElevationAdjustedSunset());\n    }\n    /**\r\n     * A method that returns a <em>shaah zmanis</em> (temporal hour) according to the opinion of the <em><a href=\r\n     * \"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> based on a 72 minutes <em>alos</em>\r\n     * and <em>tzais</em>. This calculation divides the day that runs from dawn to dusk (for sof zman krias shema and tfila).\r\n     * Dawn for this calculation is 72 minutes before {@link #getSunrise() sunrise} or {@link #getSeaLevelSunrise() sea level\r\n       * sunrise} (depending on the {@link #isUseElevation()} elevation setting) and dusk is 72 minutes after {@link #getSunset\r\n       * sunset} or {@link #getSeaLevelSunset() sea level sunset} (depending on the {@link #isUseElevation()} elevation setting).\r\n     * This day is split into 12 equal parts with each part being a <em>shaah zmanis</em>. Alternate methods of calculating a\r\n     * <em>shaah zmanis</em> according to the Magen Avraham (MGA) are available in the subclass {@link ComplexZmanimCalendar}.\r\n     *\r\n     * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em>. If the calculation can't be computed\r\n     *         such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\r\n     *         where it does not set, {@link Long#MIN_VALUE} will be returned. See detailed explanation on top of the\r\n     *         {@link AstronomicalCalendar} documentation.\r\n     */\n\n  }, {\n    key: \"getShaahZmanisMGA\",\n    value: function getShaahZmanisMGA() {\n      return this.getTemporalHour(this.getAlos72(), this.getTzais72());\n    }\n    /**\r\n     * Default constructor will set a default {@link GeoLocation#GeoLocation()}, a default\r\n     * {@link AstronomicalCalculator#getDefault() AstronomicalCalculator} and default the calendar to the current date.\r\n     *\r\n     * @see AstronomicalCalendar#AstronomicalCalendar()\r\n     */\n\n    /*\r\n        public ZmanimCalendar() {\r\n            super();\r\n        }\r\n    */\n\n    /**\r\n     * A constructor that takes a {@link GeoLocation} as a parameter.\r\n     *\r\n     * @param location\r\n     *            the location\r\n     */\n\n    /*\r\n    constructor(location?: GeoLocation) {\r\n      super(location);\r\n    }\r\n    */\n\n    /**\r\n     * A method to get the offset in minutes before {@link AstronomicalCalendar#getSeaLevelSunset() sea level sunset} which\r\n     * is used in calculating candle lighting time. The default time used is 18 minutes before sea level sunset. Some\r\n     * calendars use 15 minutes, while the custom in Jerusalem is to use a 40 minute offset. Please check the local custom\r\n     * for candle lighting time.\r\n     *\r\n     * @return Returns the currently set candle lighting offset in minutes.\r\n     * @see #getCandleLighting()\r\n     * @see #setCandleLightingOffset(double)\r\n     */\n\n  }, {\n    key: \"getCandleLightingOffset\",\n    value: function getCandleLightingOffset() {\n      return this.candleLightingOffset;\n    }\n    /**\r\n     * A method to set the offset in minutes before {@link AstronomicalCalendar#getSeaLevelSunset() sea level sunset} that is\r\n     * used in calculating candle lighting time. The default time used is 18 minutes before sunset. Some calendars use 15\r\n     * minutes, while the custom in Jerusalem is to use a 40 minute offset.\r\n     *\r\n     * @param candleLightingOffset\r\n     *            The candle lighting offset to set in minutes.\r\n     * @see #getCandleLighting()\r\n     * @see #getCandleLightingOffset()\r\n     */\n\n  }, {\n    key: \"setCandleLightingOffset\",\n    value: function setCandleLightingOffset(candleLightingOffset) {\n      this.candleLightingOffset = candleLightingOffset;\n    } // eslint-disable-next-line class-methods-use-this\n\n  }, {\n    key: \"getClassName\",\n    value: function getClassName() {\n      return 'net.sourceforge.zmanim.ZmanimCalendar';\n    }\n    /**\r\n     * This is a utility method to determine if the current Date (date-time) passed in has a <em>melacha</em> (work) prohibition.\r\n     * Since there are many opinions on the time of <em>tzais</em>, the <em>tzais</em> for the current day has to be passed to this\r\n     * class. Sunset is the classes current day's {@link #getElevationAdjustedSunset() elevation adjusted sunset} that observes the\r\n     * {@link #isUseElevation()} settings. The {@link JewishCalendar#getInIsrael()} will be set by the inIsrael parameter.\r\n     *\r\n     * @param currentTime the current time\r\n     * @param tzais the time of tzais\r\n     * @param inIsrael whether to use Israel holiday scheme or not\r\n     *\r\n     * @return true if <em>melacha</em> is prohibited or false if it is not.\r\n     *\r\n     * @see JewishCalendar#isAssurBemelacha()\r\n     * @see JewishCalendar#hasCandleLighting()\r\n     * @see JewishCalendar#setInIsrael(boolean)\r\n     */\n\n  }, {\n    key: \"isAssurBemlacha\",\n    value: function isAssurBemlacha(currentTime, tzais, inIsrael) {\n      var jewishCalendar = new JewishCalendar();\n      var date = this.getDate();\n      jewishCalendar.setGregorianDate(date.year, date.month, date.day);\n      jewishCalendar.setInIsrael(inIsrael); // erev shabbos, YT or YT sheni and after shkiah\n\n      var sunset = this.getElevationAdjustedSunset();\n      if (!sunset) throw new NullPointerException();\n\n      if (jewishCalendar.hasCandleLighting() && currentTime >= sunset) {\n        return true;\n      } // is shabbos or YT and it is before tzais\n\n\n      return jewishCalendar.isAssurBemelacha() && currentTime >= tzais;\n    }\n  }]);\n\n  return ZmanimCalendar;\n}(AstronomicalCalendar);\n/**\r\n * The zenith of 16.1&deg; below geometric zenith (90&deg;). This calculation is used for determining <em>alos</em>\r\n * (dawn) and <em>tzais</em> (nightfall) in some opinions. It is based on the calculation that the time between dawn\r\n * and sunrise (and sunset to nightfall) is 72 minutes, the time that is takes to walk 4 <em>mil</em> at 18 minutes\r\n * a mil (<em><a href=\"https://en.wikipedia.org/wiki/Maimonides\">Rambam</a></em> and others). The sun's position at\r\n * 72 minutes before {@link #getSunrise sunrise} in Jerusalem on the equinox (on March 16, about 4 days before the\r\n * astronomical equinox, the day that a solar hour is 60 minutes) is 16.1&deg; below\r\n * {@link #GEOMETRIC_ZENITH geometric zenith}.\r\n *\r\n * @see #getAlosHashachar()\r\n * @see ComplexZmanimCalendar#getAlos16Point1Degrees()\r\n * @see ComplexZmanimCalendar#getTzais16Point1Degrees()\r\n * @see ComplexZmanimCalendar#getSofZmanShmaMGA16Point1Degrees()\r\n * @see ComplexZmanimCalendar#getSofZmanTfilaMGA16Point1Degrees()\r\n * @see ComplexZmanimCalendar#getMinchaGedola16Point1Degrees()\r\n * @see ComplexZmanimCalendar#getMinchaKetana16Point1Degrees()\r\n * @see ComplexZmanimCalendar#getPlagHamincha16Point1Degrees()\r\n * @see ComplexZmanimCalendar#getPlagAlos16Point1ToTzaisGeonim7Point083Degrees()\r\n * @see ComplexZmanimCalendar#getSofZmanShmaAlos16Point1ToSunset()\r\n */\n\nZmanimCalendar.ZENITH_16_POINT_1 = ZmanimCalendar.GEOMETRIC_ZENITH + 16.1;\n/**\r\n * The zenith of 8.5&deg; below geometric zenith (90&deg;). This calculation is used for calculating <em>alos</em>\r\n * (dawn) and <em>tzais</em> (nightfall) in some opinions. This calculation is based on the position of the sun 36\r\n * minutes after {@link #getSunset sunset} in Jerusalem on March 16, about 4 days before the equinox, the day that a\r\n * solar hour is 60 minutes, which is 8.5&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}. The <em><a href=\r\n * \"http://www.worldcat.org/oclc/29283612\">Ohr Meir</a></em> considers this the time that 3 small stars are visible,\r\n * which is later than the required 3 medium stars.\r\n *\r\n * @see #getTzais()\r\n * @see ComplexZmanimCalendar#getTzaisGeonim8Point5Degrees()\r\n */\n\nZmanimCalendar.ZENITH_8_POINT_5 = ZmanimCalendar.GEOMETRIC_ZENITH + 8.5;","map":{"version":3,"sources":["../../src/ZmanimCalendar.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { AstronomicalCalendar } from './AstronomicalCalendar';\r\nimport { JewishCalendar } from './hebrewcalendar/JewishCalendar';\r\nimport { NullPointerException } from './polyfills/errors';\r\n/**\r\n * The ZmanimCalendar is a specialized calendar that can calculate sunrise and sunset and Jewish <em>zmanim</em>\r\n * (religious times) for prayers and other Jewish religious duties. This class contains the main functionality of the\r\n * Zmanim library. For a much more extensive list of zmanim use the {@link ComplexZmanimCalendar} that extends this\r\n * class. See documentation for the {@link ComplexZmanimCalendar} and {@link AstronomicalCalendar} for simple examples\r\n * on using the API. According to Rabbi Dovid Yehudah Bursztyn in his <a href=\"http://www.worldcat.org/oclc/659793988\">\r\n * Zmanim Kehilchasam (second edition published in 2007)</a> chapter 2 (pages 186-187) no zmanim besides sunrise and\r\n * sunset should use elevation. However Rabbi Yechiel Avrahom Zilber in the <a href=\"http://hebrewbooks.org/51654\">\r\n * Birur Halacha Vol. 6</a> Ch. 58 Pages <a href=\"http://hebrewbooks.org/pdfpager.aspx?req=51654&amp;pgnum=42\">34</a>\r\n * and <a href=\"http://hebrewbooks.org/pdfpager.aspx?req=51654&amp;pgnum=50\">42</a> is of the opinion that elevation\r\n * should be accounted for in zmanim calculations. Related to this, Rabbi Yaakov Karp in <a href=\r\n * \"http://www.worldcat.org/oclc/919472094\">Shimush Zekeinim</a>, Ch. 1, page 17 states that obstructing horizons should\r\n * be factored into zmanim calculations. The setting defaults to false (elevation will not be used for zmanim calculations),\r\n * unless the setting is changed to true in {@link #setUseElevation(boolean)}. This will impact sunrise and sunset based\r\n * zmanim such as {@link #getSunrise()}, {@link #getSunset()}, {@link #getSofZmanShmaGRA()}, alos based zmanim such as\r\n * {@link #getSofZmanShmaMGA()} that are based on a fixed offset of sunrise or sunset and zmanim based on a percentage of\r\n * the day such as {@link ComplexZmanimCalendar#getSofZmanShmaMGA90MinutesZmanis()} that are based on sunrise and sunset.\r\n * It will not impact zmanim that are a degree based offset of sunrise and sunset, such as\r\n * {@link ComplexZmanimCalendar#getSofZmanShmaMGA16Point1Degrees()} or {@link ComplexZmanimCalendar#getSofZmanShmaBaalHatanya()}.\r\n *\r\n * <p><b>Note:</b> It is important to read the technical notes on top of the {@link AstronomicalCalculator} documentation\r\n * before using this code.\r\n * <p>I would like to thank Rabbi Yaakov Shakow, the author of Luach Ikvei Hayom who spent a considerable amount of time\r\n * reviewing, correcting and making suggestions on the documentation in this library.\r\n * <h2>Disclaimer:</h2> I did my best to get accurate results, but please double-check before relying on these zmanim for\r\n *\r\n * @author &copy; Eliyahu Hershfeld 2004 - 2019\r\n */\r\nexport class ZmanimCalendar extends AstronomicalCalendar {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * Is elevation factored in for some zmanim (see {@link #isUseElevation()} for additional information).\r\n         * @see #isUseElevation()\r\n         * @see #setUseElevation(boolean)\r\n         */\r\n        this.useElevation = false;\r\n        /**\r\n         * The default <em>Shabbos</em> candle lighting offset is 18 minutes. This can be changed via the\r\n         * {@link #setCandleLightingOffset(double)} and retrieved by the {@link #getCandleLightingOffset()}.\r\n         */\r\n        this.candleLightingOffset = 18;\r\n    }\r\n    /**\r\n     * Is elevation above sea level calculated for times besides sunrise and sunset. According to Rabbi Dovid Yehuda\r\n     * Bursztyn in his <a href=\"http://www.worldcat.org/oclc/659793988\">Zmanim Kehilchasam (second edition published\r\n     * in 2007)</a> chapter 2 (pages 186-187) no zmanim besides sunrise and sunset should use elevation. However Rabbi\r\n     * Yechiel Avrahom Zilber in the <a href=\"http://hebrewbooks.org/51654\">Birur Halacha Vol. 6</a> Ch. 58 Pages\r\n     * <a href=\"http://hebrewbooks.org/pdfpager.aspx?req=51654&amp;pgnum=42\">34</a> and <a href=\r\n     * \"http://hebrewbooks.org/pdfpager.aspx?req=51654&amp;pgnum=50\">42</a> is of the opinion that elevation should be\r\n     * accounted for in zmanim calculations. Related to this, Rabbi Yaakov Karp in <a href=\r\n     * \"http://www.worldcat.org/oclc/919472094\">Shimush Zekeinim</a>, Ch. 1, page 17 states that obstructing horizons\r\n     * should be factored into zmanim calculations.The setting defaults to false (elevation will not be used for zmanim\r\n     * calculations), unless the setting is changed to true in {@link #setUseElevation(boolean)}. This will impact sunrise\r\n     * and sunset based zmanim such as {@link #getSunrise()}, {@link #getSunset()}, {@link #getSofZmanShmaGRA()}, alos based\r\n     * zmanim such as {@link #getSofZmanShmaMGA()} that are based on a fixed offset of sunrise or sunset and zmanim based on\r\n     * a percentage of the day such as {@link ComplexZmanimCalendar#getSofZmanShmaMGA90MinutesZmanis()} that are based on\r\n     * sunrise and sunset. It will not impact zmanim that are a degree based offset of sunrise and sunset, such as\r\n     * {@link ComplexZmanimCalendar#getSofZmanShmaMGA16Point1Degrees()} or {@link ComplexZmanimCalendar#getSofZmanShmaBaalHatanya()}.\r\n     *\r\n     * @return if the use of elevation is active\r\n     *\r\n     * @see #setUseElevation(boolean)\r\n     */\r\n    isUseElevation() {\r\n        return this.useElevation;\r\n    }\r\n    /**\r\n     * Sets whether elevation above sea level is factored into <em>zmanim</em> calculations for times besides sunrise and sunset.\r\n     * See {@link #isUseElevation()} for more details.\r\n     * @see #isUseElevation()\r\n     *\r\n     * @param useElevation set to true to use elevation in zmanim calculations\r\n     */\r\n    setUseElevation(useElevation) {\r\n        this.useElevation = useElevation;\r\n    }\r\n    /**\r\n     * This method will return {@link #getSeaLevelSunrise() sea level sunrise} if {@link #isUseElevation()} is false\r\n     * (the default), or elevation adjusted {@link AstronomicalCalendar#getSunrise()} if it is true. This allows relevant zmanim\r\n     * in this and extending classes (such as the {@link ComplexZmanimCalendar}) to automatically adjust to the elevation setting.\r\n     *\r\n     * @return {@link #getSeaLevelSunrise()} if {@link #isUseElevation()} is false (the default), or elevation adjusted\r\n     *          {@link AstronomicalCalendar#getSunrise()} if it is true.\r\n     * @see net.sourceforge.zmanim.AstronomicalCalendar#getSunrise()\r\n     */\r\n    getElevationAdjustedSunrise() {\r\n        if (this.isUseElevation()) {\r\n            return super.getSunrise();\r\n        }\r\n        return this.getSeaLevelSunrise();\r\n    }\r\n    /**\r\n     * This method will return {@link #getSeaLevelSunrise() sea level sunrise} if {@link #isUseElevation()} is false\r\n     * (the default), or elevation adjusted {@link AstronomicalCalendar#getSunrise()} if it is true. This allows relevant zmanim\r\n     * in this and extending classes (such as the {@link ComplexZmanimCalendar}) to automatically adjust to the elevation setting.\r\n     *\r\n     * @return {@link #getSeaLevelSunset()} if {@link #isUseElevation()} is false (the default), or elevation adjusted\r\n     *          {@link AstronomicalCalendar#getSunset()} if it is true.\r\n     * @see net.sourceforge.zmanim.AstronomicalCalendar#getSunset()\r\n     */\r\n    getElevationAdjustedSunset() {\r\n        if (this.isUseElevation()) {\r\n            return super.getSunset();\r\n        }\r\n        return this.getSeaLevelSunset();\r\n    }\r\n    /**\r\n     * A method that returns <em>tzais</em> (nightfall) when the sun is {@link #ZENITH_8_POINT_5 8.5&deg;} below the\r\n     * {@link #GEOMETRIC_ZENITH geometric horizon} (90&deg;) after {@link #getSunset sunset}, a time that Rabbi Meir\r\n     * Posen in his the <em><a href=\"http://www.worldcat.org/oclc/29283612\">Ohr Meir</a></em> calculated that 3 small\r\n     * stars are visible, which is later than the required 3 medium stars. See the {@link #ZENITH_8_POINT_5} constant.\r\n     *\r\n     * @see #ZENITH_8_POINT_5\r\n     *\r\n     * @return The <code>Date</code> of nightfall. If the calculation can't be computed such as northern and southern\r\n     *         locations even south of the Arctic Circle and north of the Antarctic Circle where the sun may not reach\r\n     *         low enough below the horizon for this calculation, a null will be returned. See detailed explanation on\r\n     *         top of the {@link AstronomicalCalendar} documentation.\r\n     * @see #ZENITH_8_POINT_5\r\n     * ComplexZmanimCalendar#getTzaisGeonim8Point5Degrees() that returns an identical time to this generic <em>tzais</em>\r\n     */\r\n    getTzais() {\r\n        return this.getSunsetOffsetByDegrees(ZmanimCalendar.ZENITH_8_POINT_5);\r\n    }\r\n    /**\r\n     * Returns <em>alos</em> (dawn) based on the time when the sun is {@link #ZENITH_16_POINT_1 16.1&deg;} below the\r\n     * eastern {@link #GEOMETRIC_ZENITH geometric horizon} before {@link #getSunrise sunrise}. This is based on the\r\n     * calculation that the time between dawn and sunrise (and sunset to nightfall) is 72 minutes, the time that is\r\n     * takes to walk 4 <em>mil</em> at 18 minutes a mil (<em><a href=\"https://en.wikipedia.org/wiki/Maimonides\"\r\n     * >Rambam</a></em> and others). The sun's position at 72 minutes before {@link #getSunrise sunrise} in Jerusalem\r\n     * on the equinox (on March 16, about 4 days before the astronomical equinox, the day that a solar hour is 60\r\n     * minutes) is 16.1&deg; below. See the {@link #GEOMETRIC_ZENITH} constant.\r\n     *\r\n     * @see #ZENITH_16_POINT_1\r\n     * @see ComplexZmanimCalendar#getAlos16Point1Degrees()\r\n     *\r\n     * @return The <code>Date</code> of dawn. If the calculation can't be computed such as northern and southern\r\n     *         locations even south of the Arctic Circle and north of the Antarctic Circle where the sun may not reach\r\n     *         low enough below the horizon for this calculation, a null will be returned. See detailed explanation on\r\n     *         top of the {@link AstronomicalCalendar} documentation.\r\n     */\r\n    getAlosHashachar() {\r\n        return this.getSunriseOffsetByDegrees(ZmanimCalendar.ZENITH_16_POINT_1);\r\n    }\r\n    /**\r\n     * Method to return <em>alos</em> (dawn) calculated using 72 minutes before {@link #getSunrise() sunrise} or\r\n     * {@link #getSeaLevelSunrise() sea level sunrise} (depending on the {@link #isUseElevation()} setting). This time\r\n     * is based on the time to walk the distance of 4 <em>Mil</em> at 18 minutes a <em>Mil</em>. The 72 minute time (but\r\n     * not the concept of fixed minutes) is based on the opinion that the time of the <em>Neshef</em> (twilight between\r\n     * dawn and sunrise) does not vary by the time of year or location but depends on the time it takes to walk the\r\n     * distance of 4 <em>Mil</em>.\r\n     *\r\n     * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\r\n     *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\r\n     *         a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n     *         documentation.\r\n     */\r\n    getAlos72() {\r\n        return ZmanimCalendar.getTimeOffset(this.getElevationAdjustedSunrise(), -72 * ZmanimCalendar.MINUTE_MILLIS);\r\n    }\r\n    /**\r\n     * This method returns <em>chatzos</em> (midday) following most opinions that <em>chatzos</em> is the midpoint\r\n     * between {@link #getSeaLevelSunrise sea level sunrise} and {@link #getSeaLevelSunset sea level sunset}. A day\r\n     * starting at <em>alos</em> and ending at <em>tzais</em> using the same time or degree offset will also return\r\n     * the same time. The returned value is identical to {@link #getSunTransit()}. In reality due to lengthening or\r\n     * shortening of day, this is not necessarily the exact midpoint of the day, but it is very close.\r\n     *\r\n     * @see AstronomicalCalendar#getSunTransit()\r\n     * @return the <code>Date</code> of chatzos. If the calculation can't be computed such as in the Arctic Circle\r\n     *         where there is at least one day where the sun does not rise, and one where it does not set, a null will\r\n     *         be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n     */\r\n    getChatzos() {\r\n        return this.getSunTransit();\r\n    }\r\n    /**\r\n     * A generic method for calculating the latest <em>zman krias shema</em> (time to recite shema in the morning)\r\n     * that is 3 * <em>shaos zmaniyos</em> (temporal hours) after the start of the day, calculated using the start and\r\n     * end of the day passed to this method.\r\n     * The time from the start of day to the end of day are divided into 12 <em>shaos zmaniyos</em> (temporal hours),\r\n     * and the latest <em>zman krias shema</em> is calculated as 3 of those <em>shaos zmaniyos</em> after the beginning of\r\n     * the day. As an example, passing {@link #getSunrise() sunrise} and {@link #getSunset sunset} or {@link #getSeaLevelSunrise()\r\n       * sea level sunrise} and {@link #getSeaLevelSunset() sea level sunset} (depending on the {@link #isUseElevation()}\r\n     * elevation setting) to this method will return <em>sof zman krias shema</em> according to the opinion of the\r\n     * <em><a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a></em>.\r\n     *\r\n     * @param startOfDay\r\n     *            the start of day for calculating <em>zman krias shema</em>. This can be sunrise or any alos passed to\r\n     *            this method.\r\n     * @param endOfDay\r\n     *            the start of day for calculating <em>zman krias shema</em>. This can be sunset or any tzais passed to\r\n     *            this method.\r\n     * @return the <code>Date</code> of the latest <em>zman shema</em> based on the start and end of day times passed to this\r\n     *         method. If the calculation can't be computed such as in the Arctic Circle where there is at least one day\r\n     *         a year where the sun does not rise, and one where it does not set, a null will be returned. See detailed\r\n     *         explanation on top of the {@link AstronomicalCalendar} documentation.\r\n     */\r\n    getSofZmanShma(startOfDay, endOfDay) {\r\n        const shaahZmanis = this.getTemporalHour(startOfDay, endOfDay);\r\n        return ZmanimCalendar.getTimeOffset(startOfDay, shaahZmanis * 3);\r\n    }\r\n    /**\r\n     * This method returns the latest <em>zman krias shema</em> (time to recite shema in the morning) that is 3 *\r\n     * <em>{@link #getShaahZmanisGra() shaos zmaniyos}</em> (solar hours) after {@link #getSunrise() sunrise} or\r\n     * {@link #getSeaLevelSunrise() sea level sunrise} (depending on the {@link #isUseElevation()} setting), according\r\n     * to the <em><a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a></em>.\r\n     * The day is calculated from {@link #getSeaLevelSunrise() sea level sunrise} to {@link #getSeaLevelSunrise sea level\r\n       * sunset} or {@link #getSunrise() sunrise} to {@link #getSunset() sunset} (depending on the {@link #isUseElevation()}\r\n     * setting).\r\n     *\r\n     * @see #getSofZmanShma(Date, Date)\r\n     * @see #getShaahZmanisGra()\r\n     * @see #isUseElevation()\r\n     * @see ComplexZmanimCalendar#getSofZmanShmaBaalHatanya()\r\n     * @return the <code>Date</code> of the latest zman shema according to the GRA. If the calculation can't be computed\r\n     * such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n     * does not set, a null will be returned. See the detailed explanation on top of the {@link AstronomicalCalendar}\r\n     * documentation.\r\n     */\r\n    getSofZmanShmaGRA() {\r\n        return this.getSofZmanShma(this.getElevationAdjustedSunrise(), this.getElevationAdjustedSunset());\r\n    }\r\n    /**\r\n     * This method returns the latest <em>zman krias shema</em> (time to recite shema in the morning) that is 3 *\r\n     * <em>{@link #getShaahZmanisMGA() shaos zmaniyos}</em> (solar hours) after {@link #getAlos72()}, according to the\r\n     * <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em>. The day is calculated\r\n     * from 72 minutes before {@link #getSeaLevelSunrise() sea level sunrise} to 72 minutes after {@link\r\n      * #getSeaLevelSunrise sea level sunset} or from 72 minutes before {@link #getSunrise() sunrise} to {@link #getSunset()\r\n       * sunset} (depending on the {@link #isUseElevation()} setting).\r\n     *\r\n     * @return the <code>Date</code> of the latest <em>zman shema</em>. If the calculation can't be computed such as in\r\n     *         the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n     *         does not set, a null will be returned. See detailed explanation on top of the\r\n     *         {@link AstronomicalCalendar} documentation.\r\n     * @see #getSofZmanShma(Date, Date)\r\n     * @see ComplexZmanimCalendar#getShaahZmanis72Minutes()\r\n     * @see ComplexZmanimCalendar#getAlos72()\r\n     * @see ComplexZmanimCalendar#getSofZmanShmaMGA72Minutes()\r\n     */\r\n    getSofZmanShmaMGA() {\r\n        return this.getSofZmanShma(this.getAlos72(), this.getTzais72());\r\n    }\r\n    /**\r\n     * This method returns the <em>tzais</em> (nightfall) based on the opinion of the <em><a href=\r\n     * \"https://en.wikipedia.org/wiki/Maimonides\">Rambam</a></em> and <em>Rabbeinu Tam</em> that <em>tzais</em> is\r\n     * calculated as 72 minutes, the time it takes to walk 4 <em>Mil</em> at 18 minutes a <em>Mil</em>. Based on\r\n     * the on the {@link #isUseElevation()} setting) a 72 minute offset from either {@link #getSunset() sunset} or\r\n     * {@link #getSeaLevelSunset() sea level sunset} is used.\r\n     *\r\n     * @see ComplexZmanimCalendar#getTzais16Point1Degrees()\r\n     * @return the <code>Date</code> representing 72 minutes after sunset. If the calculation can't be\r\n     *         computed such as in the Arctic Circle where there is at least one day a year where the sun does not rise,\r\n     *         and one where it does not set, a null will be returned See detailed explanation on top of the\r\n     *         {@link AstronomicalCalendar} documentation.\r\n     */\r\n    getTzais72() {\r\n        return ZmanimCalendar.getTimeOffset(this.getElevationAdjustedSunset(), 72 * ZmanimCalendar.MINUTE_MILLIS);\r\n    }\r\n    /**\r\n     * A method to return candle lighting time, calculated as {@link #getCandleLightingOffset()} minutes before\r\n     * {@link #getSeaLevelSunset() sea level sunset}. This will return the time for any day of the week, since it can be\r\n     * used to calculate candle lighting time for <em>Yom Tov</em> (mid-week holidays) as well. Elevation adjustments\r\n     * are intentionally not performed by this method, but you can calculate it by passing the elevation adjusted sunset\r\n     * to {@link #getTimeOffset(Date, long)}.\r\n     *\r\n     * @return candle lighting time. If the calculation can't be computed such as in the Arctic Circle where there is at\r\n     *         least one day a year where the sun does not rise, and one where it does not set, a null will be returned.\r\n     *         See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n     *\r\n     * @see #getSeaLevelSunset()\r\n     * @see #getCandleLightingOffset()\r\n     * @see #setCandleLightingOffset(double)\r\n     */\r\n    getCandleLighting() {\r\n        return ZmanimCalendar.getTimeOffset(this.getSeaLevelSunset(), -this.getCandleLightingOffset() * ZmanimCalendar.MINUTE_MILLIS);\r\n    }\r\n    /**\r\n     * A generic method for calculating the latest <em>zman tfilah</em> (time to recite the morning prayers)\r\n     * that is 4 * <em>shaos zmaniyos</em> (temporal hours) after the start of the day, calculated using the start and\r\n     * end of the day passed to this method.\r\n     * The time from the start of day to the end of day are divided into 12 <em>shaos zmaniyos</em> (temporal hours),\r\n     * and <em>sof zman tfila</em> is calculated as 4 of those <em>shaos zmaniyos</em> after the beginning of the day.\r\n     * As an example, passing {@link #getSunrise() sunrise} and {@link #getSunset sunset} or {@link #getSeaLevelSunrise()\r\n       * sea level sunrise} and {@link #getSeaLevelSunset() sea level sunset} (depending on the {@link #isUseElevation()}\r\n     * elevation setting) to this method will return <em>zman tfilah</em> according to the opinion of the <em><a href=\r\n     * \"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a></em>.\r\n     *\r\n     * @param startOfDay\r\n     *            the start of day for calculating <em>zman tefila</em>. This can be sunrise or any alos passed to\r\n     *            this method.\r\n     * @param endOfDay\r\n     *            the start of day for calculating <em>zman tefila</em>. This can be sunset or any tzais passed to this\r\n     *            method.\r\n     * @return the <code>Date</code> of the latest <em>zman tefila</em> based on the start and end of day times passed\r\n     *         to this method. If the calculation can't be computed such as in the Arctic Circle where there is at least\r\n     *         one day a year where the sun does not rise, and one where it does not set, a null will be returned. See\r\n     *         detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n     */\r\n    getSofZmanTfila(startOfDay, endOfDay) {\r\n        const shaahZmanis = this.getTemporalHour(startOfDay, endOfDay);\r\n        return ZmanimCalendar.getTimeOffset(startOfDay, shaahZmanis * 4);\r\n    }\r\n    /**\r\n     * This method returns the latest <em>zman tfila</em> (time to recite shema in the morning) that is 4 *\r\n     * <em>{@link #getShaahZmanisGra() shaos zmaniyos}</em> (solar hours) after {@link #getSunrise() sunrise} or\r\n     * {@link #getSeaLevelSunrise() sea level sunrise} (depending on the {@link #isUseElevation()} setting), according\r\n     * to the <em><a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a></em>.\r\n     * The day is calculated from {@link #getSeaLevelSunrise() sea level sunrise} to {@link #getSeaLevelSunrise sea level\r\n       * sunset} or {@link #getSunrise() sunrise} to {@link #getSunset() sunset} (depending on the {@link #isUseElevation()}\r\n     * setting).\r\n     *\r\n     * @see #getSofZmanTfila(Date, Date)\r\n     * @see #getShaahZmanisGra()\r\n     * @see ComplexZmanimCalendar#getSofZmanTfilaBaalHatanya()\r\n     * @return the <code>Date</code> of the latest zman tfilah. If the calculation can't be computed such as in the\r\n     *         Arctic Circle where there is at least one day a year where the sun does not rise, and one where it does\r\n     *         not set, a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n     *         documentation.\r\n     */\r\n    getSofZmanTfilaGRA() {\r\n        return this.getSofZmanTfila(this.getElevationAdjustedSunrise(), this.getElevationAdjustedSunset());\r\n    }\r\n    /**\r\n     * This method returns the latest <em>zman tfila</em> (time to recite shema in the morning) that is 4 *\r\n     * <em>{@link #getShaahZmanisMGA() shaos zmaniyos}</em> (solar hours) after {@link #getAlos72()}, according to the\r\n     * <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em>. The day is calculated\r\n     * from 72 minutes before {@link #getSeaLevelSunrise() sea level sunrise} to 72 minutes after {@link\r\n      * #getSeaLevelSunrise sea level sunset} or from 72 minutes before {@link #getSunrise() sunrise} to {@link #getSunset()\r\n       * sunset} (depending on the {@link #isUseElevation()} setting).\r\n     *\r\n     * @return the <code>Date</code> of the latest zman tfila. If the calculation can't be computed such as in the\r\n     *         Arctic Circle where there is at least one day a year where the sun does not rise, and one where it does\r\n     *         not set), a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n     *         documentation.\r\n     * @see #getSofZmanTfila(Date, Date)\r\n     * @see #getShaahZmanisMGA()\r\n     * @see #getAlos72()\r\n     */\r\n    getSofZmanTfilaMGA() {\r\n        return this.getSofZmanTfila(this.getAlos72(), this.getTzais72());\r\n    }\r\n    /**\r\n     * A generic method for calculating the latest <em>mincha gedola</em> (the earliest time to recite the mincha  prayers)\r\n     * that is 6.5 * <em>shaos zmaniyos</em> (temporal hours) after the start of the day, calculated using the start and end\r\n     * of the day passed to this method.\r\n     * The time from the start of day to the end of day are divided into 12 <em>shaos zmaniyos</em> (temporal hours), and\r\n     * <em>mincha gedola</em> is calculated as 6.5 of those <em>shaos zmaniyos</em> after the beginning of the day. As an\r\n     * example, passing {@link #getSunrise() sunrise} and {@link #getSunset sunset} or {@link #getSeaLevelSunrise() sea level\r\n       * sunrise} and {@link #getSeaLevelSunset() sea level sunset} (depending on the {@link #isUseElevation()} elevation\r\n     * setting) to this method will return <em>mincha gedola</em> according to the opinion of the\r\n     * <em><a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a></em>.\r\n     *\r\n     * @param startOfDay\r\n     *            the start of day for calculating <em>Mincha gedola</em>. This can be sunrise or any alos passed to\r\n     *            this method.\r\n     * @param endOfDay\r\n     *            the start of day for calculating <em>Mincha gedola</em>. This can be sunrise or any alos passed to\r\n     *            this method.\r\n     * @return the <code>Date</code> of the time of <em>Mincha gedola</em> based on the start and end of day times\r\n     *         passed to this method. If the calculation can't be computed such as in the Arctic Circle where there is\r\n     *         at least one day a year where the sun does not rise, and one where it does not set, a null will be\r\n     *         returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n     */\r\n    getMinchaGedola(startOfDay = this.getElevationAdjustedSunrise(), endOfDay = this.getElevationAdjustedSunset()) {\r\n        const shaahZmanis = this.getTemporalHour(startOfDay, endOfDay);\r\n        return ZmanimCalendar.getTimeOffset(startOfDay, shaahZmanis * 6.5);\r\n    }\r\n    /**\r\n     * This method returns the latest <em>mincha gedola</em>,the earliest time one can pray <em>mincha</em> that is 6.5 *\r\n     * <em>{@link #getShaahZmanisGra() shaos zmaniyos}</em> (solar hours) after {@link #getSunrise() sunrise} or\r\n     * {@link #getSeaLevelSunrise() sea level sunrise} (depending on the {@link #isUseElevation()} setting), according\r\n     * to the <em><a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a></em>. <em>Mincha gedola</em> is the earliest\r\n     * time one can pray <em>mincha</em>. The Ramba\"m is of the opinion that it is better to delay <em>mincha</em> until\r\n     * <em>{@link #getMinchaKetana() mincha ketana}</em> while the <em>Ra\"sh, Tur, GRA</em> and others are of the\r\n     * opinion that <em>mincha</em> can be prayed <em>lechatchila</em> starting at <em>mincha gedola</em>.\r\n     * The day is calculated from {@link #getSeaLevelSunrise() sea level sunrise} to {@link #getSeaLevelSunrise sea level\r\n       * sunset} or {@link #getSunrise() sunrise} to {@link #getSunset() sunset} (depending on the {@link #isUseElevation()}\r\n     * setting).\r\n     *\r\n     * @see #getMinchaGedola(Date, Date)\r\n     * @see #getShaahZmanisGra()\r\n     * @see #getMinchaKetana()\r\n     * @see ComplexZmanimCalendar#getMinchaGedolaBaalHatanya()\r\n     * @return the <code>Date</code> of the time of mincha gedola. If the calculation can't be computed such as in the\r\n     *         Arctic Circle where there is at least one day a year where the sun does not rise, and one where it does\r\n     *         not set, a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n     *         documentation.\r\n     */\r\n    /*\r\n        public getMinchaGedola(): Date {\r\n            return this.getMinchaGedola(this.getSeaLevelSunrise(), this.getSeaLevelSunset());\r\n        }\r\n    */\r\n    /**\r\n     * A generic method for calculating <em>mincha ketana</em>, (the preferred time to recite the mincha prayers in\r\n     * the opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Maimonides\">Rambam</a></em> and others) that is\r\n     * 9.5 * <em>shaos zmaniyos</em> (temporal hours) after the start of the day, calculated using the start and end\r\n     * of the day passed to this method.\r\n     * The time from the start of day to the end of day are divided into 12 <em>shaos zmaniyos</em> (temporal hours), and\r\n     * <em>mincha ketana</em> is calculated as 9.5 of those <em>shaos zmaniyos</em> after the beginning of the day. As an\r\n     * example, passing {@link #getSunrise() sunrise} and {@link #getSunset sunset} or {@link #getSeaLevelSunrise() sea level\r\n       * sunrise} and {@link #getSeaLevelSunset() sea level sunset} (depending on the {@link #isUseElevation()} elevation\r\n     * setting) to this method will return <em>mincha ketana</em> according to the opinion of the\r\n     * <em><a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a></em>.\r\n     *\r\n     * @param startOfDay\r\n     *            the start of day for calculating <em>Mincha ketana</em>. This can be sunrise or any alos passed to\r\n     *            this method.\r\n     * @param endOfDay\r\n     *            the start of day for calculating <em>Mincha ketana</em>. This can be sunrise or any alos passed to\r\n     *            this method.\r\n     * @return the <code>Date</code> of the time of <em>Mincha ketana</em> based on the start and end of day times\r\n     *         passed to this method. If the calculation can't be computed such as in the Arctic Circle where there is\r\n     *         at least one day a year where the sun does not rise, and one where it does not set, a null will be\r\n     *         returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n     */\r\n    getMinchaKetana(startOfDay = this.getElevationAdjustedSunrise(), endOfDay = this.getElevationAdjustedSunset()) {\r\n        const shaahZmanis = this.getTemporalHour(startOfDay, endOfDay);\r\n        return ZmanimCalendar.getTimeOffset(startOfDay, shaahZmanis * 9.5);\r\n    }\r\n    /**\r\n     * This method returns <em>mincha ketana</em>,the preferred earliest time to pray <em>mincha</em> in the\r\n     * opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Maimonides\">Rambam</a></em> and others, that is 9.5\r\n     * * <em>{@link #getShaahZmanisGra() shaos zmaniyos}</em> (solar hours) after {@link #getSunrise() sunrise} or\r\n     * {@link #getSeaLevelSunrise() sea level sunrise} (depending on the {@link #isUseElevation()} setting), according\r\n     * to the <em><a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a></em>. For more information on this see the\r\n     * documentation on <em>{@link #getMinchaGedola() mincha gedola}</em>.\r\n     * The day is calculated from {@link #getSeaLevelSunrise() sea level sunrise} to {@link #getSeaLevelSunrise sea level\r\n     * sunset} or {@link #getSunrise() sunrise} to {@link #getSunset() sunset} (depending on the {@link #isUseElevation()}\r\n     * setting.\r\n     *\r\n     * @see #getMinchaKetana(Date, Date)\r\n     * @see #getShaahZmanisGra()\r\n     * @see #getMinchaGedola()\r\n     * @see ComplexZmanimCalendar#getMinchaKetanaBaalHatanya()\r\n     * @return the <code>Date</code> of the time of mincha ketana. If the calculation can't be computed such as in the\r\n     *         Arctic Circle where there is at least one day a year where the sun does not rise, and one where it does\r\n     *         not set, a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n     *         documentation.\r\n     */\r\n    /*\r\n        public getMinchaKetana(): Date {\r\n            return this.getMinchaKetana(this.getSeaLevelSunrise(), this.getSeaLevelSunset());\r\n        }\r\n    */\r\n    /**\r\n     * A generic method for calculating <em>plag hamincha</em> (the earliest time that Shabbos can be started) that is\r\n     * 10.75 hours after the start of the day, (or 1.25 hours before the end of the day) based on the start and end of\r\n     * the day passed to the method.\r\n     * The time from the start of day to the end of day are divided into 12 <em>shaos zmaniyos</em> (temporal hours), and\r\n     * <em>plag hamincha</em> is calculated as 10.75 of those <em>shaos zmaniyos</em> after the beginning of the day. As an\r\n     * example, passing {@link #getSunrise() sunrise} and {@link #getSunset sunset} or {@link #getSeaLevelSunrise() sea level\r\n       * sunrise} and {@link #getSeaLevelSunset() sea level sunset} (depending on the {@link #isUseElevation()} elevation\r\n     * setting) to this method will return <em>plag mincha</em> according to the opinion of the\r\n     * <em><a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a></em>.\r\n     *\r\n     * @param startOfDay\r\n     *            the start of day for calculating plag. This can be sunrise or any alos passed to this method.\r\n     * @param endOfDay\r\n     *            the start of day for calculating plag. This can be sunrise or any alos passed to this method.\r\n     * @return the <code>Date</code> of the time of <em>plag hamincha</em> based on the start and end of day times\r\n     *         passed to this method. If the calculation can't be computed such as in the Arctic Circle where there is\r\n     *         at least one day a year where the sun does not rise, and one where it does not set, a null will be\r\n     *         returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n     */\r\n    getPlagHamincha(startOfDay = this.getElevationAdjustedSunrise(), endOfDay = this.getElevationAdjustedSunset()) {\r\n        const shaahZmanis = this.getTemporalHour(startOfDay, endOfDay);\r\n        return ZmanimCalendar.getTimeOffset(startOfDay, shaahZmanis * 10.75);\r\n    }\r\n    /**\r\n     * This method returns <em>plag hamincha</em>, that is 10.75 * <em>{@link #getShaahZmanisGra() shaos zmaniyos}</em>\r\n     * (solar hours) after {@link #getSunrise() sunrise} or {@link #getSeaLevelSunrise() sea level sunrise} (depending on\r\n     * the {@link #isUseElevation()} setting), according to the <em><a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\"\r\n     * >GRA</a></em>. Plag hamincha is the earliest time that <em>Shabbos</em> can be started.\r\n     * The day is calculated from {@link #getSeaLevelSunrise() sea level sunrise} to {@link #getSeaLevelSunrise sea level\r\n       * sunset} or {@link #getSunrise() sunrise} to {@link #getSunset() sunset} (depending on the {@link #isUseElevation()}\r\n     *\r\n     * @see #getPlagHamincha(Date, Date)\r\n     * @see ComplexZmanimCalendar#getPlagHaminchaBaalHatanya()\r\n     * @return the <code>Date</code> of the time of <em>plag hamincha</em>. If the calculation can't be computed such as\r\n     *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n     *         does not set, a null will be returned. See detailed explanation on top of the\r\n     *         {@link AstronomicalCalendar} documentation.\r\n     */\r\n    /*\r\n        public getPlagHamincha(): Date {\r\n            return this.getPlagHamincha(this.getSeaLevelSunrise(), this.getSeaLevelSunset());\r\n        }\r\n    */\r\n    /**\r\n     * A method that returns a <em>shaah zmanis</em> ({@link #getTemporalHour(Date, Date) temporal hour}) according to\r\n     * the opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a></em>. This calculation divides\r\n     * the day based on the opinion of the <em>GRA</em> that the day runs from from {@link #getSeaLevelSunrise() sea\r\n       * level sunrise} to {@link #getSeaLevelSunrise sea level sunset} or {@link #getSunrise() sunrise} to\r\n     * {@link #getSunset() sunset} (depending on the {@link #isUseElevation()} setting). The day is split into 12 equal\r\n     * parts with each one being a <em>shaah zmanis</em>. This method is similar to {@link #getTemporalHour}, but can\r\n     * account for elevation.\r\n     *\r\n     * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em> calculated from sunrise to sunset.\r\n     *         If the calculation can't be computed such as in the Arctic Circle where there is at least one day a year\r\n     *         where the sun does not rise, and one where it does not set, {@link Long#MIN_VALUE} will be returned. See\r\n     *         detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n     * @see #getTemporalHour(Date, Date)\r\n     * @see #getSeaLevelSunrise()\r\n     * @see #getSeaLevelSunset()\r\n     * @see ComplexZmanimCalendar#getShaahZmanisBaalHatanya()\r\n     */\r\n    getShaahZmanisGra() {\r\n        return this.getTemporalHour(this.getElevationAdjustedSunrise(), this.getElevationAdjustedSunset());\r\n    }\r\n    /**\r\n     * A method that returns a <em>shaah zmanis</em> (temporal hour) according to the opinion of the <em><a href=\r\n     * \"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> based on a 72 minutes <em>alos</em>\r\n     * and <em>tzais</em>. This calculation divides the day that runs from dawn to dusk (for sof zman krias shema and tfila).\r\n     * Dawn for this calculation is 72 minutes before {@link #getSunrise() sunrise} or {@link #getSeaLevelSunrise() sea level\r\n       * sunrise} (depending on the {@link #isUseElevation()} elevation setting) and dusk is 72 minutes after {@link #getSunset\r\n       * sunset} or {@link #getSeaLevelSunset() sea level sunset} (depending on the {@link #isUseElevation()} elevation setting).\r\n     * This day is split into 12 equal parts with each part being a <em>shaah zmanis</em>. Alternate methods of calculating a\r\n     * <em>shaah zmanis</em> according to the Magen Avraham (MGA) are available in the subclass {@link ComplexZmanimCalendar}.\r\n     *\r\n     * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em>. If the calculation can't be computed\r\n     *         such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\r\n     *         where it does not set, {@link Long#MIN_VALUE} will be returned. See detailed explanation on top of the\r\n     *         {@link AstronomicalCalendar} documentation.\r\n     */\r\n    getShaahZmanisMGA() {\r\n        return this.getTemporalHour(this.getAlos72(), this.getTzais72());\r\n    }\r\n    /**\r\n     * Default constructor will set a default {@link GeoLocation#GeoLocation()}, a default\r\n     * {@link AstronomicalCalculator#getDefault() AstronomicalCalculator} and default the calendar to the current date.\r\n     *\r\n     * @see AstronomicalCalendar#AstronomicalCalendar()\r\n     */\r\n    /*\r\n        public ZmanimCalendar() {\r\n            super();\r\n        }\r\n    */\r\n    /**\r\n     * A constructor that takes a {@link GeoLocation} as a parameter.\r\n     *\r\n     * @param location\r\n     *            the location\r\n     */\r\n    /*\r\n    constructor(location?: GeoLocation) {\r\n      super(location);\r\n    }\r\n    */\r\n    /**\r\n     * A method to get the offset in minutes before {@link AstronomicalCalendar#getSeaLevelSunset() sea level sunset} which\r\n     * is used in calculating candle lighting time. The default time used is 18 minutes before sea level sunset. Some\r\n     * calendars use 15 minutes, while the custom in Jerusalem is to use a 40 minute offset. Please check the local custom\r\n     * for candle lighting time.\r\n     *\r\n     * @return Returns the currently set candle lighting offset in minutes.\r\n     * @see #getCandleLighting()\r\n     * @see #setCandleLightingOffset(double)\r\n     */\r\n    getCandleLightingOffset() {\r\n        return this.candleLightingOffset;\r\n    }\r\n    /**\r\n     * A method to set the offset in minutes before {@link AstronomicalCalendar#getSeaLevelSunset() sea level sunset} that is\r\n     * used in calculating candle lighting time. The default time used is 18 minutes before sunset. Some calendars use 15\r\n     * minutes, while the custom in Jerusalem is to use a 40 minute offset.\r\n     *\r\n     * @param candleLightingOffset\r\n     *            The candle lighting offset to set in minutes.\r\n     * @see #getCandleLighting()\r\n     * @see #getCandleLightingOffset()\r\n     */\r\n    setCandleLightingOffset(candleLightingOffset) {\r\n        this.candleLightingOffset = candleLightingOffset;\r\n    }\r\n    // eslint-disable-next-line class-methods-use-this\r\n    getClassName() {\r\n        return 'net.sourceforge.zmanim.ZmanimCalendar';\r\n    }\r\n    /**\r\n     * This is a utility method to determine if the current Date (date-time) passed in has a <em>melacha</em> (work) prohibition.\r\n     * Since there are many opinions on the time of <em>tzais</em>, the <em>tzais</em> for the current day has to be passed to this\r\n     * class. Sunset is the classes current day's {@link #getElevationAdjustedSunset() elevation adjusted sunset} that observes the\r\n     * {@link #isUseElevation()} settings. The {@link JewishCalendar#getInIsrael()} will be set by the inIsrael parameter.\r\n     *\r\n     * @param currentTime the current time\r\n     * @param tzais the time of tzais\r\n     * @param inIsrael whether to use Israel holiday scheme or not\r\n     *\r\n     * @return true if <em>melacha</em> is prohibited or false if it is not.\r\n     *\r\n     * @see JewishCalendar#isAssurBemelacha()\r\n     * @see JewishCalendar#hasCandleLighting()\r\n     * @see JewishCalendar#setInIsrael(boolean)\r\n     */\r\n    isAssurBemlacha(currentTime, tzais, inIsrael) {\r\n        const jewishCalendar = new JewishCalendar();\r\n        const date = this.getDate();\r\n        jewishCalendar.setGregorianDate(date.year, date.month, date.day);\r\n        jewishCalendar.setInIsrael(inIsrael);\r\n        // erev shabbos, YT or YT sheni and after shkiah\r\n        const sunset = this.getElevationAdjustedSunset();\r\n        if (!sunset)\r\n            throw new NullPointerException();\r\n        if (jewishCalendar.hasCandleLighting() && currentTime >= sunset) {\r\n            return true;\r\n        }\r\n        // is shabbos or YT and it is before tzais\r\n        return jewishCalendar.isAssurBemelacha() && currentTime >= tzais;\r\n    }\r\n}\r\n/**\r\n * The zenith of 16.1&deg; below geometric zenith (90&deg;). This calculation is used for determining <em>alos</em>\r\n * (dawn) and <em>tzais</em> (nightfall) in some opinions. It is based on the calculation that the time between dawn\r\n * and sunrise (and sunset to nightfall) is 72 minutes, the time that is takes to walk 4 <em>mil</em> at 18 minutes\r\n * a mil (<em><a href=\"https://en.wikipedia.org/wiki/Maimonides\">Rambam</a></em> and others). The sun's position at\r\n * 72 minutes before {@link #getSunrise sunrise} in Jerusalem on the equinox (on March 16, about 4 days before the\r\n * astronomical equinox, the day that a solar hour is 60 minutes) is 16.1&deg; below\r\n * {@link #GEOMETRIC_ZENITH geometric zenith}.\r\n *\r\n * @see #getAlosHashachar()\r\n * @see ComplexZmanimCalendar#getAlos16Point1Degrees()\r\n * @see ComplexZmanimCalendar#getTzais16Point1Degrees()\r\n * @see ComplexZmanimCalendar#getSofZmanShmaMGA16Point1Degrees()\r\n * @see ComplexZmanimCalendar#getSofZmanTfilaMGA16Point1Degrees()\r\n * @see ComplexZmanimCalendar#getMinchaGedola16Point1Degrees()\r\n * @see ComplexZmanimCalendar#getMinchaKetana16Point1Degrees()\r\n * @see ComplexZmanimCalendar#getPlagHamincha16Point1Degrees()\r\n * @see ComplexZmanimCalendar#getPlagAlos16Point1ToTzaisGeonim7Point083Degrees()\r\n * @see ComplexZmanimCalendar#getSofZmanShmaAlos16Point1ToSunset()\r\n */\r\nZmanimCalendar.ZENITH_16_POINT_1 = ZmanimCalendar.GEOMETRIC_ZENITH + 16.1;\r\n/**\r\n * The zenith of 8.5&deg; below geometric zenith (90&deg;). This calculation is used for calculating <em>alos</em>\r\n * (dawn) and <em>tzais</em> (nightfall) in some opinions. This calculation is based on the position of the sun 36\r\n * minutes after {@link #getSunset sunset} in Jerusalem on March 16, about 4 days before the equinox, the day that a\r\n * solar hour is 60 minutes, which is 8.5&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}. The <em><a href=\r\n * \"http://www.worldcat.org/oclc/29283612\">Ohr Meir</a></em> considers this the time that 3 small stars are visible,\r\n * which is later than the required 3 medium stars.\r\n *\r\n * @see #getTzais()\r\n * @see ComplexZmanimCalendar#getTzaisGeonim8Point5Degrees()\r\n */\r\nZmanimCalendar.ZENITH_8_POINT_5 = ZmanimCalendar.GEOMETRIC_ZENITH + 8.5;\r\n//# sourceMappingURL=ZmanimCalendar.js.map"]},"metadata":{},"sourceType":"module"}