{"ast":null,"code":"import _classCallCheck from \"C:\\\\react\\\\my-app\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\react\\\\my-app\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport { UnsupportedError } from '../polyfills/errors';\n/**\r\n * A class that represents a numeric time. Times that represent a time of day are stored as {@link java.util.Date}s in\r\n * this API. The time class is used to represent numeric time such as the time in hours, minutes, seconds and\r\n * milliseconds of a {@link net.sourceforge.zmanim.AstronomicalCalendar#getTemporalHour() temporal hour}.\r\n *\r\n * @author &copy; Eliyahu Hershfeld 2004 - 2011\r\n * @version 0.9.0\r\n */\n\nexport var Time = /*#__PURE__*/function () {\n  function Time(hoursOrMillis, minutes) {\n    var seconds = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var milliseconds = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n    _classCallCheck(this, Time);\n\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n    this.negative = false;\n\n    if (minutes) {\n      this.hours = hoursOrMillis;\n      this.minutes = minutes;\n      this.seconds = seconds;\n      this.milliseconds = milliseconds;\n    } else {\n      var adjustedMillis = hoursOrMillis;\n\n      if (adjustedMillis < 0) {\n        this.negative = true;\n        adjustedMillis = Math.abs(adjustedMillis);\n      }\n\n      this.hours = Math.trunc(adjustedMillis / Time.HOUR_MILLIS);\n      adjustedMillis = adjustedMillis - this.hours * Time.HOUR_MILLIS;\n      this.minutes = Math.trunc(adjustedMillis / Time.MINUTE_MILLIS);\n      adjustedMillis = adjustedMillis - this.minutes * Time.MINUTE_MILLIS;\n      this.seconds = Math.trunc(adjustedMillis / Time.SECOND_MILLIS);\n      adjustedMillis = adjustedMillis - this.seconds * Time.SECOND_MILLIS;\n      this.milliseconds = adjustedMillis;\n    }\n  }\n  /*\r\n      public Time(millis: number) {\r\n          this((int) millis);\r\n      }\r\n          public Time(millis: number) {\r\n          adjustedMillis: number = millis;\r\n          if (adjustedMillis < 0) {\r\n              this.isNegative = true;\r\n              adjustedMillis = Math.abs(adjustedMillis);\r\n          }\r\n          this.hours = adjustedMillis / HOUR_MILLIS;\r\n          adjustedMillis = adjustedMillis - this.hours * HOUR_MILLIS;\r\n              this.minutes = adjustedMillis / MINUTE_MILLIS;\r\n          adjustedMillis = adjustedMillis - this.minutes * MINUTE_MILLIS;\r\n              this.seconds = adjustedMillis / SECOND_MILLIS;\r\n          adjustedMillis = adjustedMillis - this.seconds * SECOND_MILLIS;\r\n              this.milliseconds = adjustedMillis;\r\n      }\r\n  */\n\n\n  _createClass(Time, [{\n    key: \"isNegative\",\n    value: function isNegative() {\n      return this.negative;\n    }\n  }, {\n    key: \"setIsNegative\",\n    value: function setIsNegative(isNegative) {\n      this.negative = isNegative;\n    }\n    /**\r\n     * @return Returns the hour.\r\n     */\n\n  }, {\n    key: \"getHours\",\n    value: function getHours() {\n      return this.hours;\n    }\n    /**\r\n     * @param hours\r\n     *            The hours to set.\r\n     */\n\n  }, {\n    key: \"setHours\",\n    value: function setHours(hours) {\n      this.hours = hours;\n    }\n    /**\r\n     * @return Returns the minutes.\r\n     */\n\n  }, {\n    key: \"getMinutes\",\n    value: function getMinutes() {\n      return this.minutes;\n    }\n    /**\r\n     * @param minutes\r\n     *            The minutes to set.\r\n     */\n\n  }, {\n    key: \"setMinutes\",\n    value: function setMinutes(minutes) {\n      this.minutes = minutes;\n    }\n    /**\r\n     * @return Returns the seconds.\r\n     */\n\n  }, {\n    key: \"getSeconds\",\n    value: function getSeconds() {\n      return this.seconds;\n    }\n    /**\r\n     * @param seconds\r\n     *            The seconds to set.\r\n     */\n\n  }, {\n    key: \"setSeconds\",\n    value: function setSeconds(seconds) {\n      this.seconds = seconds;\n    }\n    /**\r\n     * @return Returns the milliseconds.\r\n     */\n\n  }, {\n    key: \"getMilliseconds\",\n    value: function getMilliseconds() {\n      return this.milliseconds;\n    }\n    /**\r\n     * @param milliseconds\r\n     *            The milliseconds to set.\r\n     */\n\n  }, {\n    key: \"setMilliseconds\",\n    value: function setMilliseconds(milliseconds) {\n      this.milliseconds = milliseconds;\n    }\n  }, {\n    key: \"getTime\",\n    value: function getTime() {\n      return this.hours * Time.HOUR_MILLIS + this.minutes * Time.MINUTE_MILLIS + this.seconds * Time.SECOND_MILLIS + this.milliseconds;\n    }\n    /**\r\n     * @deprecated This depends on a circular dependency. Use <pre>new ZmanimFormatter(TimeZone.getTimeZone(\"UTC\")).format(time)</pre> instead.\r\n     */\n    // eslint-disable-next-line class-methods-use-this\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      throw new UnsupportedError('This method is deprecated, due to the fact that it depends on a circular dependency. ' + 'Use `new ZmanimFormatter(TimeZone.getTimeZone(\\'UTC\\')).format(time)` instead');\n    }\n  }]);\n\n  return Time;\n}();\nTime.SECOND_MILLIS = 1000;\nTime.MINUTE_MILLIS = Time.SECOND_MILLIS * 60;\nTime.HOUR_MILLIS = Time.MINUTE_MILLIS * 60;","map":{"version":3,"sources":["../../../src/util/Time.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { UnsupportedError } from '../polyfills/errors';\r\n/**\r\n * A class that represents a numeric time. Times that represent a time of day are stored as {@link java.util.Date}s in\r\n * this API. The time class is used to represent numeric time such as the time in hours, minutes, seconds and\r\n * milliseconds of a {@link net.sourceforge.zmanim.AstronomicalCalendar#getTemporalHour() temporal hour}.\r\n *\r\n * @author &copy; Eliyahu Hershfeld 2004 - 2011\r\n * @version 0.9.0\r\n */\r\nexport class Time {\r\n    constructor(hoursOrMillis, minutes, seconds = 0, milliseconds = 0) {\r\n        this.hours = 0;\r\n        this.minutes = 0;\r\n        this.seconds = 0;\r\n        this.milliseconds = 0;\r\n        this.negative = false;\r\n        if (minutes) {\r\n            this.hours = hoursOrMillis;\r\n            this.minutes = minutes;\r\n            this.seconds = seconds;\r\n            this.milliseconds = milliseconds;\r\n        }\r\n        else {\r\n            let adjustedMillis = hoursOrMillis;\r\n            if (adjustedMillis < 0) {\r\n                this.negative = true;\r\n                adjustedMillis = Math.abs(adjustedMillis);\r\n            }\r\n            this.hours = Math.trunc(adjustedMillis / Time.HOUR_MILLIS);\r\n            adjustedMillis = adjustedMillis - this.hours * Time.HOUR_MILLIS;\r\n            this.minutes = Math.trunc(adjustedMillis / Time.MINUTE_MILLIS);\r\n            adjustedMillis = adjustedMillis - this.minutes * Time.MINUTE_MILLIS;\r\n            this.seconds = Math.trunc(adjustedMillis / Time.SECOND_MILLIS);\r\n            adjustedMillis = adjustedMillis - this.seconds * Time.SECOND_MILLIS;\r\n            this.milliseconds = adjustedMillis;\r\n        }\r\n    }\r\n    /*\r\n        public Time(millis: number) {\r\n            this((int) millis);\r\n        }\r\n  \r\n        public Time(millis: number) {\r\n            adjustedMillis: number = millis;\r\n            if (adjustedMillis < 0) {\r\n                this.isNegative = true;\r\n                adjustedMillis = Math.abs(adjustedMillis);\r\n            }\r\n            this.hours = adjustedMillis / HOUR_MILLIS;\r\n            adjustedMillis = adjustedMillis - this.hours * HOUR_MILLIS;\r\n  \r\n            this.minutes = adjustedMillis / MINUTE_MILLIS;\r\n            adjustedMillis = adjustedMillis - this.minutes * MINUTE_MILLIS;\r\n  \r\n            this.seconds = adjustedMillis / SECOND_MILLIS;\r\n            adjustedMillis = adjustedMillis - this.seconds * SECOND_MILLIS;\r\n  \r\n            this.milliseconds = adjustedMillis;\r\n        }\r\n    */\r\n    isNegative() {\r\n        return this.negative;\r\n    }\r\n    setIsNegative(isNegative) {\r\n        this.negative = isNegative;\r\n    }\r\n    /**\r\n     * @return Returns the hour.\r\n     */\r\n    getHours() {\r\n        return this.hours;\r\n    }\r\n    /**\r\n     * @param hours\r\n     *            The hours to set.\r\n     */\r\n    setHours(hours) {\r\n        this.hours = hours;\r\n    }\r\n    /**\r\n     * @return Returns the minutes.\r\n     */\r\n    getMinutes() {\r\n        return this.minutes;\r\n    }\r\n    /**\r\n     * @param minutes\r\n     *            The minutes to set.\r\n     */\r\n    setMinutes(minutes) {\r\n        this.minutes = minutes;\r\n    }\r\n    /**\r\n     * @return Returns the seconds.\r\n     */\r\n    getSeconds() {\r\n        return this.seconds;\r\n    }\r\n    /**\r\n     * @param seconds\r\n     *            The seconds to set.\r\n     */\r\n    setSeconds(seconds) {\r\n        this.seconds = seconds;\r\n    }\r\n    /**\r\n     * @return Returns the milliseconds.\r\n     */\r\n    getMilliseconds() {\r\n        return this.milliseconds;\r\n    }\r\n    /**\r\n     * @param milliseconds\r\n     *            The milliseconds to set.\r\n     */\r\n    setMilliseconds(milliseconds) {\r\n        this.milliseconds = milliseconds;\r\n    }\r\n    getTime() {\r\n        return this.hours * Time.HOUR_MILLIS + this.minutes * Time.MINUTE_MILLIS + this.seconds * Time.SECOND_MILLIS\r\n            + this.milliseconds;\r\n    }\r\n    /**\r\n     * @deprecated This depends on a circular dependency. Use <pre>new ZmanimFormatter(TimeZone.getTimeZone(\"UTC\")).format(time)</pre> instead.\r\n     */\r\n    // eslint-disable-next-line class-methods-use-this\r\n    toString() {\r\n        throw new UnsupportedError('This method is deprecated, due to the fact that it depends on a circular dependency. '\r\n            + 'Use `new ZmanimFormatter(TimeZone.getTimeZone(\\'UTC\\')).format(time)` instead');\r\n    }\r\n}\r\nTime.SECOND_MILLIS = 1000;\r\nTime.MINUTE_MILLIS = Time.SECOND_MILLIS * 60;\r\nTime.HOUR_MILLIS = Time.MINUTE_MILLIS * 60;\r\n//# sourceMappingURL=Time.js.map"]},"metadata":{},"sourceType":"module"}