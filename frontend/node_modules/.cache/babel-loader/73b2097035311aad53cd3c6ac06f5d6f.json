{"ast":null,"code":"import _classCallCheck from \"C:\\\\react\\\\my-app\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\react\\\\my-app\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport { DateTime } from 'luxon';\nimport { IntegerUtils, StringUtils } from '../polyfills/Utils';\n/**\r\n * A wrapper class for a astronomical times / <em>zmanim</em> that is mostly intended to allow sorting collections of astronomical times.\r\n * It has fields for both date/time and duration based <em>zmanim</em>, name / labels as well as a longer description or explanation of a\r\n * <em>zman</em>.\r\n *\r\n * Here is an example of various ways of sorting <em>zmanim</em>.\r\n * <p>First create the Calendar for the location you would like to calculate:\r\n *\r\n * <pre style=\"background: #FEF0C9; display: inline-block;\">\r\n * String locationName = &quot;Lakewood, NJ&quot;;\r\n * double latitude = 40.0828; // Lakewood, NJ\r\n * double longitude = -74.2094; // Lakewood, NJ\r\n * double elevation = 20; // optional elevation correction in Meters\r\n * // the String parameter in getTimeZone() has to be a valid timezone listed in {@link java.util.TimeZone#getAvailableIDs()}\r\n * TimeZone timeZone = TimeZone.getTimeZone(&quot;America/New_York&quot;);\r\n * GeoLocation location = new GeoLocation(locationName, latitude, longitude, elevation, timeZone);\r\n * ComplexZmanimCalendar czc = new ComplexZmanimCalendar(location);\r\n * Zman sunset = new Zman(czc.getSunset(), \"Sunset\");\r\n * Zman shaah16 = new Zman(czc.getShaahZmanis16Point1Degrees(), \"Shaah zmanis 16.1\");\r\n * Zman sunrise = new Zman(czc.getSunrise(), \"Sunrise\");\r\n * Zman shaah = new Zman(czc.getShaahZmanisGra(), \"Shaah zmanis GRA\");\r\n * ArrayList&lt;Zman&gt; zl = new ArrayList&lt;Zman&gt;();\r\n * zl.add(sunset);\r\n * zl.add(shaah16);\r\n * zl.add(sunrise);\r\n * zl.add(shaah);\r\n * //will sort sunset, shaah 1.6, sunrise, shaah GRA\r\n * System.out.println(zl);\r\n * Collections.sort(zl, Zman.DATE_ORDER);\r\n * // will sort sunrise, sunset, shaah, shaah 1.6 (the last 2 are not in any specific order)\r\n * Collections.sort(zl, Zman.DURATION_ORDER);\r\n * // will sort sunrise, sunset (the first 2 are not in any specific order), shaah GRA, shaah 1.6\r\n * Collections.sort(zl, Zman.NAME_ORDER);\r\n * // will sort shaah 1.6, shaah GRA, sunrise, sunset\r\n * </pre>\r\n *\r\n * @author &copy; Eliyahu Hershfeld 2007-2020\r\n * @todo Add secondary sorting. As of now the {@code Comparator}s in this class do not sort by secondary order. This means that when sorting a\r\n * {@link java.util.Collection} of <em>zmanim</em> and using the {@link #DATE_ORDER} {@code Comparator} will have the duration based <em>zmanim</em>\r\n * at the end, but they will not be sorted by duration. This should be N/A for label based sorting.\r\n */\n\nexport var Zman = /*#__PURE__*/function () {\n  function Zman(dateOrDuration, label) {\n    _classCallCheck(this, Zman);\n\n    this.label = label;\n\n    if (DateTime.isDateTime(dateOrDuration)) {\n      this.zman = dateOrDuration;\n    } else if (typeof dateOrDuration === 'number') {\n      this.duration = dateOrDuration;\n    }\n  }\n  /**\r\n   * A {@link Comparator} that will compare and sort <em>zmanim</em> by date/time order. Compares its two arguments by the zman's date/time\r\n   * order. Returns a negative integer, zero, or a positive integer as the first argument is less than, equal to, or greater\r\n   * than the second.\r\n   * Please note that this class will handle cases where either the {@code Zman} is a null or {@link #getZman()} returns a null.\r\n   */\n\n\n  _createClass(Zman, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"\\nLabel:\\t\\t\\t\".concat(this.label).concat(\"\\nZman:\\t\\t\\t\".concat(this.zman)).concat(\"\\nDuration:\\t\\t\\t\".concat(this.duration)).concat(\"\\nDescription:\\t\\t\\t\".concat(this.description));\n    }\n  }], [{\n    key: \"compareDateOrder\",\n    value: function compareDateOrder(zman1, zman2) {\n      var _a, _b;\n\n      var firstMillis = ((_a = zman1.zman) === null || _a === void 0 ? void 0 : _a.valueOf()) || 0;\n      var secondMillis = ((_b = zman2.zman) === null || _b === void 0 ? void 0 : _b.valueOf()) || 0;\n      return IntegerUtils.compare(firstMillis, secondMillis);\n    }\n    /**\r\n     * A {@link Comparator} that will compare and sort zmanim by zmanim label order. Compares its two arguments by the zmanim label\r\n     * name order. Returns a negative integer, zero, or a positive integer as the first argument is less than, equal to, or greater\r\n     * than the second.\r\n     * Please note that this class will will sort cases where either the {@code Zman} is a null or {@link #label} returns a null\r\n     * as empty {@code String}s.\r\n     */\n\n  }, {\n    key: \"compareNameOrder\",\n    value: function compareNameOrder(zman1, zman2) {\n      return StringUtils.compareTo(zman1.label || '', zman2.label || '');\n    }\n    /**\r\n     * A {@link Comparator} that will compare and sort duration based <em>zmanim</em>  such as\r\n     * {@link net.sourceforge.zmanim.AstronomicalCalendar#getTemporalHour() temporal hour} (or the various <em>shaah zmanis</em> times\r\n     * such as <em>{@link net.sourceforge.zmanim.ZmanimCalendar#getShaahZmanisGra() shaah zmanis GRA}</em> or\r\n     * {@link net.sourceforge.zmanim.ComplexZmanimCalendar#getShaahZmanis16Point1Degrees() <em>shaah zmanis 16.1&deg;</em>}). Returns a negative\r\n     * integer, zero, or a positive integer as the first argument is less than, equal to, or greater than the second.\r\n     * Please note that this class will will sort cases where {@code Zman} is a null.\r\n     */\n\n  }, {\n    key: \"compareDurationOrder\",\n    value: function compareDurationOrder(zman1, zman2) {\n      return IntegerUtils.compare(zman1.duration || 0, zman2.duration || 0);\n    }\n  }]);\n\n  return Zman;\n}();","map":{"version":3,"sources":["../../../src/util/Zman.ts"],"names":[],"mappings":";;AAAA,SAAS,QAAT,QAAyB,OAAzB;AAEA,SAAS,YAAT,EAAuB,WAAvB,QAA0C,oBAA1C;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCG;;AACH,WAAa,IAAb;AAqCE,gBAAY,cAAZ,EAA+C,KAA/C,EAAmE;AAAA;;AACjE,SAAK,KAAL,GAAa,KAAb;;AACA,QAAI,QAAQ,CAAC,UAAT,CAAoB,cAApB,CAAJ,EAAyC;AACvC,WAAK,IAAL,GAAY,cAAZ;AACD,KAFD,MAEO,IAAI,OAAO,cAAP,KAA0B,QAA9B,EAAwC;AAC7C,WAAK,QAAL,GAAgB,cAAhB;AACD;AACF;AAED;;;;;AAKG;;;AAnDL;AAAA;AAAA,+BAkFU;AACN,aAAO,wBAAkB,KAAK,KAAvB,EACJ,MADI,wBACmB,KAAK,IADxB,GAEJ,MAFI,4BAEuB,KAAK,QAF5B,GAGJ,MAHI,+BAG0B,KAAK,WAH/B,EAAP;AAID;AAvFH;AAAA;AAAA,qCAoD0B,KApD1B,EAoDuC,KApDvC,EAoDkD;;;AAC9C,UAAM,WAAW,GAAG,CAAA,CAAA,EAAA,GAAA,KAAK,CAAC,IAAN,MAAU,IAAV,IAAU,EAAA,KAAA,KAAA,CAAV,GAAU,KAAA,CAAV,GAAU,EAAA,CAAE,OAAF,EAAV,KAAyB,CAA7C;AACA,UAAM,YAAY,GAAG,CAAA,CAAA,EAAA,GAAA,KAAK,CAAC,IAAN,MAAU,IAAV,IAAU,EAAA,KAAA,KAAA,CAAV,GAAU,KAAA,CAAV,GAAU,EAAA,CAAE,OAAF,EAAV,KAAyB,CAA9C;AAEA,aAAO,YAAY,CAAC,OAAb,CAAqB,WAArB,EAAkC,YAAlC,CAAP;AACD;AAED;;;;;;AAMG;;AAjEL;AAAA;AAAA,qCAkE0B,KAlE1B,EAkEuC,KAlEvC,EAkEkD;AAC9C,aAAO,WAAW,CAAC,SAAZ,CAAsB,KAAK,CAAC,KAAN,IAAe,EAArC,EAAyC,KAAK,CAAC,KAAN,IAAe,EAAxD,CAAP;AACD;AAED;;;;;;;AAOG;;AA7EL;AAAA;AAAA,yCA8E8B,KA9E9B,EA8E2C,KA9E3C,EA8EsD;AAClD,aAAO,YAAY,CAAC,OAAb,CAAqB,KAAK,CAAC,QAAN,IAAkB,CAAvC,EAA0C,KAAK,CAAC,QAAN,IAAkB,CAA5D,CAAP;AACD;AAhFH;;AAAA;AAAA","sourceRoot":"","sourcesContent":["import { DateTime } from 'luxon';\r\nimport { IntegerUtils, StringUtils } from '../polyfills/Utils';\r\n/**\r\n * A wrapper class for a astronomical times / <em>zmanim</em> that is mostly intended to allow sorting collections of astronomical times.\r\n * It has fields for both date/time and duration based <em>zmanim</em>, name / labels as well as a longer description or explanation of a\r\n * <em>zman</em>.\r\n *\r\n * Here is an example of various ways of sorting <em>zmanim</em>.\r\n * <p>First create the Calendar for the location you would like to calculate:\r\n *\r\n * <pre style=\"background: #FEF0C9; display: inline-block;\">\r\n * String locationName = &quot;Lakewood, NJ&quot;;\r\n * double latitude = 40.0828; // Lakewood, NJ\r\n * double longitude = -74.2094; // Lakewood, NJ\r\n * double elevation = 20; // optional elevation correction in Meters\r\n * // the String parameter in getTimeZone() has to be a valid timezone listed in {@link java.util.TimeZone#getAvailableIDs()}\r\n * TimeZone timeZone = TimeZone.getTimeZone(&quot;America/New_York&quot;);\r\n * GeoLocation location = new GeoLocation(locationName, latitude, longitude, elevation, timeZone);\r\n * ComplexZmanimCalendar czc = new ComplexZmanimCalendar(location);\r\n * Zman sunset = new Zman(czc.getSunset(), \"Sunset\");\r\n * Zman shaah16 = new Zman(czc.getShaahZmanis16Point1Degrees(), \"Shaah zmanis 16.1\");\r\n * Zman sunrise = new Zman(czc.getSunrise(), \"Sunrise\");\r\n * Zman shaah = new Zman(czc.getShaahZmanisGra(), \"Shaah zmanis GRA\");\r\n * ArrayList&lt;Zman&gt; zl = new ArrayList&lt;Zman&gt;();\r\n * zl.add(sunset);\r\n * zl.add(shaah16);\r\n * zl.add(sunrise);\r\n * zl.add(shaah);\r\n * //will sort sunset, shaah 1.6, sunrise, shaah GRA\r\n * System.out.println(zl);\r\n * Collections.sort(zl, Zman.DATE_ORDER);\r\n * // will sort sunrise, sunset, shaah, shaah 1.6 (the last 2 are not in any specific order)\r\n * Collections.sort(zl, Zman.DURATION_ORDER);\r\n * // will sort sunrise, sunset (the first 2 are not in any specific order), shaah GRA, shaah 1.6\r\n * Collections.sort(zl, Zman.NAME_ORDER);\r\n * // will sort shaah 1.6, shaah GRA, sunrise, sunset\r\n * </pre>\r\n *\r\n * @author &copy; Eliyahu Hershfeld 2007-2020\r\n * @todo Add secondary sorting. As of now the {@code Comparator}s in this class do not sort by secondary order. This means that when sorting a\r\n * {@link java.util.Collection} of <em>zmanim</em> and using the {@link #DATE_ORDER} {@code Comparator} will have the duration based <em>zmanim</em>\r\n * at the end, but they will not be sorted by duration. This should be N/A for label based sorting.\r\n */\r\nexport class Zman {\r\n    constructor(dateOrDuration, label) {\r\n        this.label = label;\r\n        if (DateTime.isDateTime(dateOrDuration)) {\r\n            this.zman = dateOrDuration;\r\n        }\r\n        else if (typeof dateOrDuration === 'number') {\r\n            this.duration = dateOrDuration;\r\n        }\r\n    }\r\n    /**\r\n     * A {@link Comparator} that will compare and sort <em>zmanim</em> by date/time order. Compares its two arguments by the zman's date/time\r\n     * order. Returns a negative integer, zero, or a positive integer as the first argument is less than, equal to, or greater\r\n     * than the second.\r\n     * Please note that this class will handle cases where either the {@code Zman} is a null or {@link #getZman()} returns a null.\r\n     */\r\n    static compareDateOrder(zman1, zman2) {\r\n        var _a, _b;\r\n        const firstMillis = ((_a = zman1.zman) === null || _a === void 0 ? void 0 : _a.valueOf()) || 0;\r\n        const secondMillis = ((_b = zman2.zman) === null || _b === void 0 ? void 0 : _b.valueOf()) || 0;\r\n        return IntegerUtils.compare(firstMillis, secondMillis);\r\n    }\r\n    /**\r\n     * A {@link Comparator} that will compare and sort zmanim by zmanim label order. Compares its two arguments by the zmanim label\r\n     * name order. Returns a negative integer, zero, or a positive integer as the first argument is less than, equal to, or greater\r\n     * than the second.\r\n     * Please note that this class will will sort cases where either the {@code Zman} is a null or {@link #label} returns a null\r\n     * as empty {@code String}s.\r\n     */\r\n    static compareNameOrder(zman1, zman2) {\r\n        return StringUtils.compareTo(zman1.label || '', zman2.label || '');\r\n    }\r\n    /**\r\n     * A {@link Comparator} that will compare and sort duration based <em>zmanim</em>  such as\r\n     * {@link net.sourceforge.zmanim.AstronomicalCalendar#getTemporalHour() temporal hour} (or the various <em>shaah zmanis</em> times\r\n     * such as <em>{@link net.sourceforge.zmanim.ZmanimCalendar#getShaahZmanisGra() shaah zmanis GRA}</em> or\r\n     * {@link net.sourceforge.zmanim.ComplexZmanimCalendar#getShaahZmanis16Point1Degrees() <em>shaah zmanis 16.1&deg;</em>}). Returns a negative\r\n     * integer, zero, or a positive integer as the first argument is less than, equal to, or greater than the second.\r\n     * Please note that this class will will sort cases where {@code Zman} is a null.\r\n     */\r\n    static compareDurationOrder(zman1, zman2) {\r\n        return IntegerUtils.compare(zman1.duration || 0, zman2.duration || 0);\r\n    }\r\n    toString() {\r\n        return (`\\nLabel:\\t\\t\\t${this.label}`)\r\n            .concat(`\\nZman:\\t\\t\\t${this.zman}`)\r\n            .concat(`\\nDuration:\\t\\t\\t${this.duration}`)\r\n            .concat(`\\nDescription:\\t\\t\\t${this.description}`);\r\n    }\r\n}\r\n//# sourceMappingURL=Zman.js.map"]},"metadata":{},"sourceType":"module"}