{"ast":null,"code":"import { DateTime } from 'luxon';\nimport { Calendar, Long_MIN_VALUE, TimeZone } from './polyfills/Utils';\nimport { ZmanimCalendar } from './ZmanimCalendar';\nimport { JewishCalendar } from './hebrewcalendar/JewishCalendar';\n/**\r\n * <p>This class extends ZmanimCalendar and provides many more zmanim than available in the ZmanimCalendar. The basis for\r\n * most zmanim in this class are from the <em>sefer</em> <b><a href=\"http://hebrewbooks.org/9765\">Yisroel Vehazmanim</a></b>\r\n * by <b><a href=\"https://en.wikipedia.org/wiki/Yisroel_Dovid_Harfenes\">Rabbi Yisrael Dovid Harfenes</a></b>.\r\n * As an example of the number of different <em>zmanim</em> made available by this class, there are methods to return 14\r\n * different calculations for <em>alos</em> (dawn) and 25 for <em>tzais</em> available in this API. The real power of this\r\n * API is the ease in calculating <em>zmanim</em> that are not part of the library. The methods for <em>zmanim</em>\r\n * calculations not present in this class or it's superclass  {@link ZmanimCalendar} are contained in the\r\n * {@link AstronomicalCalendar}, the base class of the calendars in our API since they are generic methods for calculating\r\n * time based on degrees or time before or after {@link #getSunrise sunrise} and {@link #getSunset sunset} and are of interest\r\n * for calculation beyond <em>zmanim</em> calculations. Here are some examples.\r\n * <p>First create the Calendar for the location you would like to calculate:\r\n *\r\n * <pre style=\"background: #FEF0C9; display: inline-block;\">\r\n * String locationName = &quot;Lakewood, NJ&quot;;\r\n * double latitude = 40.0828; // Lakewood, NJ\r\n * double longitude = -74.2094; // Lakewood, NJ\r\n * double elevation = 20; // optional elevation correction in Meters\r\n * // the String parameter in getTimeZone() has to be a valid timezone listed in\r\n * // {@link java.util.TimeZone#getAvailableIDs()}\r\n * TimeZone timeZone = TimeZone.getTimeZone(&quot;America/New_York&quot;);\r\n * GeoLocation location = new GeoLocation(locationName, latitude, longitude, elevation, timeZone);\r\n * ComplexZmanimCalendar czc = new ComplexZmanimCalendar(location);\r\n * // Optionally set the date or it will default to today's date\r\n * czc.getCalendar().set(Calendar.MONTH, Calendar.FEBRUARY);\r\n * czc.getCalendar().set(Calendar.DAY_OF_MONTH, 8);</pre>\r\n *\r\n * <b>Note:</b> For locations such as Israel where the beginning and end of daylight savings time can fluctuate from\r\n * year to year, if your version of Java does not have an <a href=\r\n * \"http://www.oracle.com/technetwork/java/javase/tzdata-versions-138805.html\">up to date timezone database</a>, create a\r\n * {@link java.util.SimpleTimeZone} with the known start and end of DST.\r\n * To get <em>alos</em> calculated as 14&deg; below the horizon (as calculated in the calendars published in Montreal),\r\n * add {@link AstronomicalCalendar#GEOMETRIC_ZENITH} (90) to the 14&deg; offset to get the desired time:\r\n *\r\n * <pre style=\"background: #FEF0C9; display: inline-block;\">\r\n *  Date alos14 = czc.getSunriseOffsetByDegrees({@link AstronomicalCalendar#GEOMETRIC_ZENITH} + 14);</pre>\r\n *\r\n * To get <em>mincha gedola</em> calculated based on the <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\"\r\n * >Magen Avraham (MGA)</a></em> using a <em>shaah zmanis</em> based on the day starting\r\n * 16.1&deg; below the horizon (and ending 16.1&deg; after sunset) the following calculation can be used:\r\n\r\n *\r\n * <pre style=\"background: #FEF0C9; display: inline-block;\">\r\n * Date minchaGedola = czc.getTimeOffset(czc.getAlos16point1Degrees(), czc.getShaahZmanis16Point1Degrees() * 6.5);</pre>\r\n * <p>\r\n * or even simpler using the included convenience methods\r\n * <pre style=\"background: #FEF0C9; display: inline-block;\">\r\n * Date minchaGedola = czc.getMinchaGedola(czc.getAlos16point1Degrees(), czc.getShaahZmanis16Point1Degrees());</pre>\r\n *\r\n * A little more complex example would be calculating zmanim that rely on a <em>shaah zmanis</em> that is\r\n * not present in this library. While a drop more complex, it is still rather easy. An example would be to calculate\r\n * the <em><a href=\"https://en.wikipedia.org/wiki/Israel_Isserlein\">Trumas Hadeshen</a>'s</em> <em>alos</em> to\r\n * <em>tzais</em> based <em>plag hamincha</em> as calculated in the Machzikei Hadass calendar in Manchester, England.\r\n * A number of this calendar's zmanim are calculated based on a day starting at <em>alos</em> of 12&deg; before sunrise\r\n * and ending at <em>tzais</em> of 7.083&deg; after sunset. Be aware that since the <em>alos</em> and <em>tzais</em>\r\n * do not use identical degree based offsets, this leads to <em>chatzos</em> being at a time other than the\r\n * {@link #getSunTransit() solar transit} (solar midday). To calculate this zman, use the following steps. Note that\r\n * <em>plag hamincha</em> is 10.75 hours after the start of the day, and the following steps are all that it takes.\r\n *\r\n * <pre style=\"background: #FEF0C9; display: inline-block;\">\r\n * Date plag = czc.getPlagHamincha(czc.getSunriseOffsetByDegrees({@link AstronomicalCalendar#GEOMETRIC_ZENITH} + 12),\r\n *        czc.getSunsetOffsetByDegrees({@link AstronomicalCalendar#GEOMETRIC_ZENITH} + ZENITH_7_POINT_083));</pre>\r\n *\r\n * Something a drop more challenging, but still simple, would be calculating a zman using the same \"complex\" offset day\r\n * used in the above mentioned Manchester calendar, but for a <em>shaos zmaniyos</em> based <em>zman</em> not not\r\n * supported by this library, such as calculating the point that one should be <em>makpid</em>\r\n * not to eat on <em>erev Shabbos</em> or <em>erev Yom Tov</em>. This is 9 <em>shaos zmaniyos</em> into the day.\r\n * <ol>\r\n *  <li>Calculate the <em>shaah zmanis</em> in milliseconds for this day</li>\r\n *  <li>Add 9 of these <em>shaos zmaniyos</em> to alos starting at 12&deg;</li>\r\n * </ol>\r\n *\r\n * <pre style=\"background: #FEF0C9; display: inline-block;\">\r\n * long shaahZmanis = czc.getTemporalHour(czc.getSunriseOffsetByDegrees({@link AstronomicalCalendar#GEOMETRIC_ZENITH} + 12),\r\n *            czc.getSunsetOffsetByDegrees({@link AstronomicalCalendar#GEOMETRIC_ZENITH} + ZENITH_7_POINT_083));\r\n * Date sofZmanAchila = getTimeOffset(czc.getSunriseOffsetByDegrees({@link AstronomicalCalendar#GEOMETRIC_ZENITH} + 12),\r\n *          shaahZmanis * 9);</pre>\r\n *\r\n * Calculating this <em>sof zman achila</em> according to the <em><a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a></em>\r\n * is simplicity itself.\r\n * <pre style=\"background: #FEF0C9; display: inline-block;\">\r\n * Date sofZmanAchila = czc.getTimeOffset(czc.getSunrise(), czc.getShaahZmanisGra() * 9);</pre>\r\n *\r\n * <h2>Documentation from the {@link ZmanimCalendar} parent class</h2>\r\n * {@inheritDoc}\r\n *\r\n * @author &copy; Eliyahu Hershfeld 2004 - 2016\r\n */\n\nexport class ComplexZmanimCalendar extends ZmanimCalendar {\n  constructor() {\n    super(...arguments);\n    /**\r\n     * The offset in minutes (defaults to 40) after sunset used for <em>tzeit</em> for Ateret Torah calculations.\r\n     * @see #getTzaisAteretTorah()\r\n     * @see #getAteretTorahSunsetOffset()\r\n     * @see #setAteretTorahSunsetOffset(double)\r\n     */\n\n    this.ateretTorahSunsetOffset = 40;\n  }\n  /*\r\n  constructor(location?: GeoLocation) {\r\n    super(location);\r\n  }\r\n  */\n\n  /**\r\n   * Default constructor will set a default {@link GeoLocation#GeoLocation()}, a default\r\n   * {@link AstronomicalCalculator#getDefault() AstronomicalCalculator} and default the calendar to the current date.\r\n   *\r\n   * @see AstronomicalCalendar#AstronomicalCalendar()\r\n   */\n\n  /*\r\n    public ComplexZmanimCalendar() {\r\n        super();\r\n    }\r\n  */\n\n  /**\r\n   * Method to return a <em>shaah zmanis</em> (temporal hour) calculated using a 19.8&deg; dip. This calculation\r\n   * divides the day based on the opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> that the day runs from dawn to dusk. Dawn for this calculation is\r\n   * when the sun is 19.8&deg; below the eastern geometric horizon before sunrise. Dusk for this is when the sun is\r\n   * 19.8&deg; below the western geometric horizon after sunset. This day is split into 12 equal parts with each part\r\n   * being a <em>shaah zmanis</em>.\r\n   *\r\n   * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em>. If the calculation can't be computed\r\n   *         such as northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle\r\n   *         where the sun may not reach low enough below the horizon for this calculation, a {@link Long#MIN_VALUE}\r\n   *         will be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   */\n\n\n  getShaahZmanis19Point8Degrees() {\n    return this.getTemporalHour(this.getAlos19Point8Degrees(), this.getTzais19Point8Degrees());\n  }\n  /**\r\n   * Method to return a <em>shaah zmanis</em> (temporal hour) calculated using a 18&deg; dip. This calculation divides\r\n   * the day based on the opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> that the day runs from dawn to dusk. Dawn for this calculation is when\r\n   * the sun is 18&deg; below the eastern geometric horizon before sunrise. Dusk for this is when the sun is 18&deg;\r\n   * below the western geometric horizon after sunset. This day is split into 12 equal parts with each part being a\r\n   * <em>shaah zmanis</em>.\r\n   *\r\n   * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em>. If the calculation can't be computed\r\n   *         such as northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle\r\n   *         where the sun may not reach low enough below the horizon for this calculation, a {@link Long#MIN_VALUE}\r\n   *         will be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   */\n\n\n  getShaahZmanis18Degrees() {\n    return this.getTemporalHour(this.getAlos18Degrees(), this.getTzais18Degrees());\n  }\n  /**\r\n   * Method to return a <em>shaah zmanis</em> (temporal hour) calculated using a dip of 26&deg;. This calculation\r\n   * divides the day based on the opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> that the day runs from dawn to dusk. Dawn for this calculation is\r\n   * when the sun is {@link #getAlos26Degrees() 26&deg;} below the eastern geometric horizon before sunrise. Dusk for\r\n   * this is when the sun is {@link #getTzais26Degrees() 26&deg;} below the western geometric horizon after sunset.\r\n   * This day is split into 12 equal parts with each part being a <em>shaah zmanis</em>.\r\n   *\r\n   * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em>. If the calculation can't be computed\r\n   *         such as northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle\r\n   *         where the sun may not reach low enough below the horizon for this calculation, a {@link Long#MIN_VALUE}\r\n   *         will be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   */\n\n\n  getShaahZmanis26Degrees() {\n    return this.getTemporalHour(this.getAlos26Degrees(), this.getTzais26Degrees());\n  }\n  /**\r\n   * Method to return a <em>shaah zmanis</em> (temporal hour) calculated using a dip of 16.1&deg;. This calculation\r\n   * divides the day based on the opinion that the day runs from dawn to dusk. Dawn for this calculation is when the\r\n   * sun is 16.1&deg; below the eastern geometric horizon before sunrise and dusk is when the sun is 16.1&deg; below\r\n   * the western geometric horizon after sunset. This day is split into 12 equal parts with each part being a\r\n   * <em>shaah zmanis</em>.\r\n   *\r\n   * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em>. If the calculation can't be computed\r\n   *         such as northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle\r\n   *         where the sun may not reach low enough below the horizon for this calculation, a {@link Long#MIN_VALUE}\r\n   *         will be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   *\r\n   * @see #getAlos16Point1Degrees()\r\n   * @see #getTzais16Point1Degrees()\r\n   * @see #getSofZmanShmaMGA16Point1Degrees()\r\n   * @see #getSofZmanTfilaMGA16Point1Degrees()\r\n   * @see #getMinchaGedola16Point1Degrees()\r\n   * @see #getMinchaKetana16Point1Degrees()\r\n   * @see #getPlagHamincha16Point1Degrees()\r\n   */\n\n\n  getShaahZmanis16Point1Degrees() {\n    return this.getTemporalHour(this.getAlos16Point1Degrees(), this.getTzais16Point1Degrees());\n  }\n  /**\r\n   * Method to return a <em>shaah zmanis</em> (solar hour) according to the opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em>. This calculation\r\n   * divides the day based on the opinion of the <em>MGA</em> that the day runs from dawn to dusk. Dawn for this\r\n   * calculation is 60 minutes before sunrise and dusk is 60 minutes after sunset. This day is split into 12 equal\r\n   * parts with each part being a <em>shaah zmanis</em>. Alternate methods of calculating a <em>shaah zmanis</em> are\r\n   * available in the subclass {@link ComplexZmanimCalendar}\r\n   *\r\n   * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em>. If the calculation can't be computed\r\n   *         such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\r\n   *         where it does not set, a {@link Long#MIN_VALUE} will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   */\n\n\n  getShaahZmanis60Minutes() {\n    return this.getTemporalHour(this.getAlos60(), this.getTzais60());\n  }\n  /**\r\n   * Method to return a <em>shaah zmanis</em> (solar hour) according to the opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em>. This calculation\r\n   * divides the day based on the opinion of the <em>MGA</em> that the day runs from dawn to dusk. Dawn for this\r\n   * calculation is 72 minutes before sunrise and dusk is 72 minutes after sunset. This day is split into 12 equal\r\n   * parts with each part being a <em>shaah zmanis</em>. Alternate methods of calculating a <em>shaah zmanis</em> are\r\n   * available in the subclass {@link ComplexZmanimCalendar}\r\n   *\r\n   * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em>. If the calculation can't be computed\r\n   *         such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\r\n   *         where it does not set, a {@link Long#MIN_VALUE} will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   */\n\n\n  getShaahZmanis72Minutes() {\n    return this.getShaahZmanisMGA();\n  }\n  /**\r\n   * Method to return a <em>shaah zmanis</em> (temporal hour) according to the opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> based on\r\n   * <em>alos</em> being {@link #getAlos72Zmanis() 72} minutes <em>zmaniyos</em> before {@link #getSunrise() sunrise}.\r\n   * This calculation divides the day based on the opinion of the <em>MGA</em> that the day runs from dawn to dusk.\r\n   * Dawn for this calculation is 72 minutes <em>zmaniyos</em> before sunrise and dusk is 72 minutes <em>zmaniyos</em>\r\n   * after sunset. This day is split into 12 equal parts with each part being a <em>shaah zmanis</em>. This is\r\n   * identical to 1/10th of the day from {@link #getSunrise() sunrise} to {@link #getSunset() sunset}.\r\n   *\r\n   * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em>. If the calculation can't be computed\r\n   *         such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\r\n   *         where it does not set, a {@link Long#MIN_VALUE} will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * @see #getAlos72Zmanis()\r\n   * @see #getTzais72Zmanis()\r\n   */\n\n\n  getShaahZmanis72MinutesZmanis() {\n    return this.getTemporalHour(this.getAlos72Zmanis(), this.getTzais72Zmanis());\n  }\n  /**\r\n   * Method to return a <em>shaah zmanis</em> (temporal hour) calculated using a dip of 90 minutes. This calculation\r\n   * divides the day based on the opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> that the day runs from dawn to dusk. Dawn for this calculation is\r\n   * 90 minutes before sunrise and dusk is 90 minutes after sunset. This day is split into 12 equal parts with each\r\n   * part being a <em>shaah zmanis</em>.\r\n   *\r\n   * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em>. If the calculation can't be computed\r\n   *         such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\r\n   *         where it does not set, a {@link Long#MIN_VALUE} will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   */\n\n\n  getShaahZmanis90Minutes() {\n    return this.getTemporalHour(this.getAlos90(), this.getTzais90());\n  }\n  /**\r\n   * Method to return a <em>shaah zmanis</em> (temporal hour) according to the opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> based on\r\n   * <em>alos</em> being {@link #getAlos90Zmanis() 90} minutes <em>zmaniyos</em> before {@link #getSunrise() sunrise}.\r\n   * This calculation divides the day based on the opinion of the <em>MGA</em> that the day runs from dawn to dusk.\r\n   * Dawn for this calculation is 90 minutes <em>zmaniyos</em> before sunrise and dusk is 90 minutes <em>zmaniyos</em>\r\n   * after sunset. This day is split into 12 equal parts with each part being a <em>shaah zmanis</em>. This is\r\n   * identical to 1/8th of the day from {@link #getSunrise() sunrise} to {@link #getSunset() sunset}.\r\n   *\r\n   * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em>. If the calculation can't be computed\r\n   *         such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\r\n   *         where it does not set, a {@link Long#MIN_VALUE} will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * @see #getAlos90Zmanis()\r\n   * @see #getTzais90Zmanis()\r\n   */\n\n\n  getShaahZmanis90MinutesZmanis() {\n    return this.getTemporalHour(this.getAlos90Zmanis(), this.getTzais90Zmanis());\n  }\n  /**\r\n   * Method to return a <em>shaah zmanis</em> (temporal hour) according to the opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> based on\r\n   * <em>alos</em> being {@link #getAlos96Zmanis() 96} minutes <em>zmaniyos</em> before {@link #getSunrise() sunrise}.\r\n   * This calculation divides the day based on the opinion of the <em>MGA</em> that the day runs from dawn to dusk.\r\n   * Dawn for this calculation is 96 minutes <em>zmaniyos</em> before sunrise and dusk is 96 minutes <em>zmaniyos</em>\r\n   * after sunset. This day is split into 12 equal parts with each part being a <em>shaah zmanis</em>. This is\r\n   * identical to 1/7.5th of the day from {@link #getSunrise() sunrise} to {@link #getSunset() sunset}.\r\n   *\r\n   * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em>. If the calculation can't be computed\r\n   *         such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\r\n   *         where it does not set, a {@link Long#MIN_VALUE} will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * @see #getAlos96Zmanis()\r\n   * @see #getTzais96Zmanis()\r\n   */\n\n\n  getShaahZmanis96MinutesZmanis() {\n    return this.getTemporalHour(this.getAlos96Zmanis(), this.getTzais96Zmanis());\n  }\n  /**\r\n   * Method to return a <em>shaah zmanis</em> (temporal hour) according to the opinion of the\r\n   * <em>Chacham Yosef Harari-Raful</em> of <em>Yeshivat Ateret Torah</em> calculated with <em>alos</em> being 1/10th\r\n   * of sunrise to sunset day, or {@link #getAlos72Zmanis() 72} minutes <em>zmaniyos</em> of such a day before\r\n   * {@link #getSunrise() sunrise}, and <em>tzais</em> is usually calculated as {@link #getTzaisAteretTorah() 40\r\n     * minutes} (configurable to any offset via {@link #setAteretTorahSunsetOffset(double)}) after {@link #getSunset()\r\n     * sunset}. This day is split into 12 equal parts with each part being a <em>shaah zmanis</em>. Note that with this\r\n   * system, <em>chatzos</em> (mid-day) will not be the point that the sun is {@link #getSunTransit() halfway across\r\n     * the sky}.\r\n   *\r\n   * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em>. If the calculation can't be computed\r\n   *         such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\r\n   *         where it does not set, a {@link Long#MIN_VALUE} will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * @see #getAlos72Zmanis()\r\n   * @see #getTzaisAteretTorah()\r\n   * @see #getAteretTorahSunsetOffset()\r\n   * @see #setAteretTorahSunsetOffset(double)\r\n   */\n\n\n  getShaahZmanisAteretTorah() {\n    return this.getTemporalHour(this.getAlos72Zmanis(), this.getTzaisAteretTorah());\n  }\n  /**\r\n   * Method to return a <em>shaah zmanis</em> (temporal hour) calculated using a dip of 96 minutes. This calculation\r\n   * divides the day based on the opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> that the day runs from dawn to dusk. Dawn for this calculation is\r\n   * 96 minutes before sunrise and dusk is 96 minutes after sunset. This day is split into 12 equal parts with each\r\n   * part being a <em>shaah zmanis</em>.\r\n   *\r\n   * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em>. If the calculation can't be computed\r\n   *         such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\r\n   *         where it does not set, a {@link Long#MIN_VALUE} will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   */\n\n\n  getShaahZmanis96Minutes() {\n    return this.getTemporalHour(this.getAlos96(), this.getTzais96());\n  }\n  /**\r\n   * Method to return a <em>shaah zmanis</em> (temporal hour) calculated using a dip of 120 minutes. This calculation\r\n   * divides the day based on the opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> that the day runs from dawn to dusk. Dawn for this calculation is\r\n   * 120 minutes before sunrise and dusk is 120 minutes after sunset. This day is split into 12 equal parts with each\r\n   * part being a <em>shaah zmanis</em>.\r\n   *\r\n   * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em>. If the calculation can't be computed\r\n   *         such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\r\n   *         where it does not set, a {@link Long#MIN_VALUE} will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   */\n\n\n  getShaahZmanis120Minutes() {\n    return this.getTemporalHour(this.getAlos120(), this.getTzais120());\n  }\n  /**\r\n   * Method to return a <em>shaah zmanis</em> (temporal hour) according to the opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> based on\r\n   * <em>alos</em> being {@link #getAlos120Zmanis() 120} minutes <em>zmaniyos</em> before {@link #getSunrise()\r\n     * sunrise}. This calculation divides the day based on the opinion of the <em>MGA</em> that the day runs from dawn\r\n   * to dusk. Dawn for this calculation is 120 minutes <em>zmaniyos</em> before sunrise and dusk is 120 minutes\r\n   * <em>zmaniyos</em> after sunset. This day is split into 12 equal parts with each part being a\r\n   * <em>shaah zmanis</em>. This is identical to 1/6th of the day from {@link #getSunrise() sunrise} to\r\n   * {@link #getSunset() sunset}.\r\n   *\r\n   * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em>. If the calculation can't be computed\r\n   *         such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\r\n   *         where it does not set, a {@link Long#MIN_VALUE} will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * @see #getAlos120Zmanis()\r\n   * @see #getTzais120Zmanis()\r\n   */\n\n\n  getShaahZmanis120MinutesZmanis() {\n    return this.getTemporalHour(this.getAlos120Zmanis(), this.getTzais120Zmanis());\n  }\n  /**\r\n   * This method returns the time of <em>plag hamincha</em> based on sunrise being 120 minutes <em>zmaniyos</em>\r\n   * or 1/6th of the day before sunrise. This is calculated as 10.75 hours after {@link #getAlos120Zmanis() dawn}.\r\n   * The formula used is 10.75 * {@link #getShaahZmanis120MinutesZmanis()} after {@link #getAlos120Zmanis() dawn}.\r\n   *\r\n   * @return the <code>Date</code> of the time of <em>plag hamincha</em>. If the calculation can't be computed such as\r\n   *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n   *         does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   *\r\n   * @see #getShaahZmanis120MinutesZmanis()\r\n   */\n\n\n  getPlagHamincha120MinutesZmanis() {\n    return this.getPlagHamincha(this.getAlos120Zmanis(), this.getTzais120Zmanis());\n  }\n  /**\r\n   * This method returns the time of <em>plag hamincha</em> according to the <em>Magen Avraham</em> with the day\r\n   * starting 120 minutes before sunrise and ending 120 minutes after sunset. This is calculated as 10.75 hours after\r\n   * {@link #getAlos120() dawn 120 minutes}. The formula used is\r\n   * 10.75 {@link #getShaahZmanis120Minutes()} after {@link #getAlos120()}.\r\n   *\r\n   * @return the <code>Date</code> of the time of <em>plag hamincha</em>. If the calculation can't be computed such as\r\n   *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n   *         does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   *\r\n   * @see #getShaahZmanis120Minutes()\r\n   */\n\n\n  getPlagHamincha120Minutes() {\n    return this.getPlagHamincha(this.getAlos120(), this.getTzais120());\n  }\n  /**\r\n   * Method to return <em>alos</em> (dawn) calculated as 60 minutes before sunrise. This is the time to walk the\r\n   * distance of 4 <em>Mil</em> at 15 minutes a <em>Mil</em>. This seems to be the opinion of the <em><a href=\r\n   * \"https://en.wikipedia.org/wiki/Yair_Bacharach\">Chavas Yair</a></em> in the <em>Mekor Chaim, Orach Chaim Ch.\r\n   * 90</em>, though  the Mekor chaim in Ch. 58 and in the <em><a href=\r\n   * \"http://www.hebrewbooks.org/pdfpager.aspx?req=45193&amp;pgnum=214\">Chut Hashani Cha 97</a></em> states that\r\n   * a a person walks 3 and a 1/3 <em>mil</em> in an hour, or an 18 minute <em>mil</em>. Also see the <a href=\r\n   * \"https://he.wikipedia.org/wiki/%D7%9E%D7%9C%D7%9B%D7%99%D7%90%D7%9C_%D7%A6%D7%91%D7%99_%D7%98%D7%A0%D7%A0%D7%91%D7%95%D7%99%D7%9D\"\r\n   * >Divrei Malkiel</a> <a href=\"http://www.hebrewbooks.org/pdfpager.aspx?req=803&amp;pgnum=33\">Vol. 4, Ch. 20, page 34</a>) who\r\n   * mentions the 15 minute <em>mil</em> lechumra by baking matzos. Also see the <a href=\r\n   * \"https://en.wikipedia.org/wiki/Joseph_Colon_Trabotto\">Maharik</a> <a href=\r\n   * \"http://www.hebrewbooks.org/pdfpager.aspx?req=1142&amp;pgnum=216\">Ch. 173</a> where the questioner quoting the\r\n   * <a href=\"https://en.wikipedia.org/wiki/Eliezer_ben_Nathan\">Ra'avan</a> is of the opinion that the time to walk a\r\n   * <em>mil</em> is 15 minutes (5 <em>mil</em> in a little over an hour). There are many who believe that there is a\r\n   * <em>ta'us sofer</em> (scribe's error) in the Ra'avan, and it should 4 <em>mil</em> in a little over an hour, or an\r\n   * 18 minute <em>mil</em>. Time based offset calculations are based on the opinion of the\r\n   * <em><a href=\"https://en.wikipedia.org/wiki/Rishonim\">Rishonim</a></em> who stated that the time of the <em>neshef</em>\r\n   * (time between dawn and sunrise) does not vary by the time of year or location but purely depends on the time it takes to\r\n   * walk the distance of 4* <em>mil</em>. {@link #getTzaisGeonim9Point75Degrees()} is a related <em>zman</em> that is a\r\n   * degree based calculation based on 60 minutes.\r\n   *\r\n   * TODO: apply documentation to Tzais once reviewed.\r\n   *\r\n   * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\r\n   *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\r\n   *         a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   *\r\n   * @see #getTzaisGeonim9Point75Degrees()\r\n   */\n\n\n  getAlos60() {\n    return ComplexZmanimCalendar.getTimeOffset(this.getSunrise(), -60 * ComplexZmanimCalendar.MINUTE_MILLIS);\n  }\n  /**\r\n   * Method to return <em>alos</em> (dawn) calculated using 72 minutes <em>zmaniyos</em> or 1/10th of the day before\r\n   * sunrise. This is based on an 18 minute <em>Mil</em> so the time for 4 <em>Mil</em> is 72 minutes which is 1/10th\r\n   * of a day (12 * 60 = 720) based on the a day being from {@link #getSeaLevelSunrise() sea level sunrise} to\r\n   * {@link #getSeaLevelSunrise sea level sunset} or {@link #getSunrise() sunrise} to {@link #getSunset() sunset}\r\n   * (depending on the {@link #isUseElevation()} setting).\r\n   * The actual calculation is {@link #getSeaLevelSunrise()}- ( {@link #getShaahZmanisGra()} * 1.2). This calculation\r\n   * is used in the calendars published by <em><a href=\r\n   * \"https://en.wikipedia.org/wiki/Central_Rabbinical_Congress\">Hisachdus Harabanim D'Artzos Habris Ve'Canada</a></em>\r\n   *\r\n   * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\r\n   *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\r\n   *         a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   * @see #getShaahZmanisGra()\r\n   */\n\n\n  getAlos72Zmanis() {\n    const shaahZmanis = this.getShaahZmanisGra();\n\n    if (shaahZmanis === Long_MIN_VALUE) {\n      return null;\n    }\n\n    return ComplexZmanimCalendar.getTimeOffset(this.getElevationAdjustedSunrise(), shaahZmanis * -1.2);\n  }\n  /**\r\n   * Method to return <em>alos</em> (dawn) calculated using 96 minutes before before {@link #getSunrise() sunrise} or\r\n   * {@link #getSeaLevelSunrise() sea level sunrise} (depending on the {@link #isUseElevation()} setting) that is based\r\n   * on the time to walk the distance of 4 <em>Mil</em> at 24 minutes a <em>Mil</em>. Time based offset\r\n   * calculations for <em>alos</em> are based on the opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Rishonim\"\r\n   * >Rishonim</a></em> who stated that the time of the <em>Neshef</em> (time between dawn and sunrise) does not vary\r\n   * by the time of year or location but purely depends on the time it takes to walk the distance of 4 <em>Mil</em>.\r\n   *\r\n   * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\r\n   *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\r\n   *         a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   */\n\n\n  getAlos96() {\n    return ComplexZmanimCalendar.getTimeOffset(this.getElevationAdjustedSunrise(), -96 * ComplexZmanimCalendar.MINUTE_MILLIS);\n  }\n  /**\r\n   * Method to return <em>alos</em> (dawn) calculated using 90 minutes <em>zmaniyos</em> or 1/8th of the day before\r\n   * {@link #getSunrise() sunrise} or {@link #getSeaLevelSunrise() sea level sunrise} (depending on the {@link\r\n    * #isUseElevation()} setting). This is based on a 22.5 minute <em>Mil</em> so the time for 4 <em>Mil</em> is 90\r\n   * minutes which is 1/8th of a day (12 * 60) / 8 = 90\r\n   * The day is calculated from {@link #getSeaLevelSunrise() sea level sunrise} to {@link #getSeaLevelSunrise sea level\r\n     * sunset} or {@link #getSunrise() sunrise} to {@link #getSunset() sunset} (depending on the {@link #isUseElevation()}.\r\n   * The actual calculation used is {@link #getSunrise()} - ( {@link #getShaahZmanisGra()} * 1.5).\r\n   *\r\n   * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\r\n   *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\r\n   *         a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   * @see #getShaahZmanisGra()\r\n   */\n\n\n  getAlos90Zmanis() {\n    const shaahZmanis = this.getShaahZmanisGra();\n\n    if (shaahZmanis === Long_MIN_VALUE) {\n      return null;\n    }\n\n    return ComplexZmanimCalendar.getTimeOffset(this.getElevationAdjustedSunrise(), shaahZmanis * -1.5);\n  }\n  /**\r\n   * This method returns <em>alos</em> (dawn) calculated using 96 minutes <em>zmaniyos</em> or 1/7.5th of the day before\r\n   * {@link #getSunrise() sunrise} or {@link #getSeaLevelSunrise() sea level sunrise} (depending on the {@link\r\n    * #isUseElevation()} setting). This is based on a 24 minute <em>Mil</em> so the time for 4 <em>Mil</em> is 96\r\n   * minutes which is 1/7.5th of a day (12 * 60 / 7.5 = 96).\r\n   * The day is calculated from {@link #getSeaLevelSunrise() sea level sunrise} to {@link #getSeaLevelSunrise sea level\r\n     * sunset} or {@link #getSunrise() sunrise} to {@link #getSunset() sunset} (depending on the {@link #isUseElevation()}.\r\n   * The actual calculation used is {@link #getSunrise()} - ( {@link #getShaahZmanisGra()} * 1.6).\r\n   *\r\n   * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\r\n   *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\r\n   *         a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   * @see #getShaahZmanisGra()\r\n   */\n\n\n  getAlos96Zmanis() {\n    const shaahZmanis = this.getShaahZmanisGra();\n\n    if (shaahZmanis === Long_MIN_VALUE) {\n      return null;\n    }\n\n    return ComplexZmanimCalendar.getTimeOffset(this.getElevationAdjustedSunrise(), shaahZmanis * -1.6);\n  }\n  /**\r\n   * offset calculations for <em>alos</em> are based on the opinion of the <em><a href=\r\n   * \"https://en.wikipedia.org/wiki/Rishonim\">Rishonim</a></em> who stated that the time of the <em>Neshef</em>\r\n   * (time between dawn and sunrise) does not vary by the time of year or location but purely depends on the time it\r\n   * takes to walk the distance of 4 <em>Mil</em>.\r\n   *\r\n   * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\r\n   *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\r\n   *         a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   */\n\n\n  getAlos90() {\n    return ComplexZmanimCalendar.getTimeOffset(this.getElevationAdjustedSunrise(), -90 * ComplexZmanimCalendar.MINUTE_MILLIS);\n  }\n  /**\r\n   * opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Rishonim\">Rishonim</a></em> who stated that the time\r\n   * of the <em>Neshef</em> (time between dawn and sunrise) does not vary by the time of year or location but purely\r\n   * depends on the time it takes to walk the distance of 5\r\n   * <em>Mil</em>(<em>Ula</em>).\r\n   *\r\n   * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\r\n   *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\r\n   *         a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   */\n\n\n  getAlos120() {\n    return ComplexZmanimCalendar.getTimeOffset(this.getElevationAdjustedSunrise(), -120 * ComplexZmanimCalendar.MINUTE_MILLIS);\n  }\n  /**\r\n   * This method returns <em>alos</em> (dawn) calculated using 120 minutes <em>zmaniyos</em> or 1/6th of the day before\r\n   * {@link #getSunrise() sunrise} or {@link #getSeaLevelSunrise() sea level sunrise} (depending on the {@link\r\n    * #isUseElevation()} setting). This is based on a 24 minute <em>Mil</em> so the time for 5 <em>Mil</em> is 120\r\n   * minutes which is 1/6th of a day (12 * 60 / 6 = 120).\r\n   * The day is calculated from {@link #getSeaLevelSunrise() sea level sunrise} to {@link #getSeaLevelSunrise sea level\r\n   * sunset} or {@link #getSunrise() sunrise} to {@link #getSunset() sunset} (depending on the {@link #isUseElevation()}.\r\n   * The actual calculation used is {@link #getSunrise()} - ( {@link #getShaahZmanisGra()} * 2).\r\n   *\r\n   * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\r\n   *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\r\n   *         a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   * @see #getShaahZmanisGra()\r\n   */\n\n\n  getAlos120Zmanis() {\n    const shaahZmanis = this.getShaahZmanisGra();\n\n    if (shaahZmanis === Long_MIN_VALUE) {\n      return null;\n    }\n\n    return ComplexZmanimCalendar.getTimeOffset(this.getElevationAdjustedSunrise(), shaahZmanis * -2);\n  }\n  /**\r\n   * A method to return <em>alos</em> (dawn) calculated when the sun is {@link #ZENITH_26_DEGREES 26&deg;} below the\r\n   * eastern geometric horizon before sunrise. This calculation is based on the same calculation of\r\n   * {@link #getAlos120() 120 minutes} but uses a degree based calculation instead of 120 exact minutes. This\r\n   * calculation is based on the position of the sun 120 minutes before sunrise in Jerusalem during the equinox (on March\r\n   * 16, about 4 days before the astronomical equinox, the day that a solar hour is 60 minutes) which calculates to 26&deg;\r\n   * below {@link #GEOMETRIC_ZENITH geometric zenith}.\r\n   *\r\n   * @return the <code>Date</code> representing <em>alos</em>. If the calculation can't be computed such as northern\r\n   *         and southern locations even south of the Arctic Circle and north of the Antarctic Circle where the sun\r\n   *         may not reach low enough below the horizon for this calculation, a null will be returned. See detailed\r\n   *         explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * @see #ZENITH_26_DEGREES\r\n   * @see #getAlos120()\r\n   * @see #getTzais120()\r\n   */\n\n\n  getAlos26Degrees() {\n    return this.getSunriseOffsetByDegrees(ComplexZmanimCalendar.ZENITH_26_DEGREES);\n  }\n  /**\r\n   * A method to return <em>alos</em> (dawn) calculated when the sun is {@link #ASTRONOMICAL_ZENITH 18&deg;} below the\r\n   * eastern geometric horizon before sunrise.\r\n   *\r\n   * @return the <code>Date</code> representing <em>alos</em>. If the calculation can't be computed such as northern\r\n   *         and southern locations even south of the Arctic Circle and north of the Antarctic Circle where the sun\r\n   *         may not reach low enough below the horizon for this calculation, a null will be returned. See detailed\r\n   *         explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * @see #ASTRONOMICAL_ZENITH\r\n   */\n\n\n  getAlos18Degrees() {\n    return this.getSunriseOffsetByDegrees(ComplexZmanimCalendar.ASTRONOMICAL_ZENITH);\n  }\n  /**\r\n   * A method to return <em>alos</em> (dawn) calculated when the sun is {@link #ZENITH_19_DEGREES 19&deg;} below the\r\n   * eastern geometric horizon before sunrise. This is the <em><a href=\"https://en.wikipedia.org/wiki/Maimonides\"\r\n   * >Rambam</a></em>'s alos according to Rabbi Moshe Kosower's <a href=\r\n   * \"http://www.worldcat.org/oclc/145454098\">Maaglei Tzedek</a>, page 88, <a href=\r\n   * \"http://www.hebrewbooks.org/pdfpager.aspx?req=33464&amp;pgnum=13\">Ayeles Hashachar Vol. I, page 12</a>, <a href=\r\n   * \"http://www.hebrewbooks.org/pdfpager.aspx?req=55960&amp;pgnum=258\">Yom Valayla Shel Torah, Ch. 34, p. 222</a> and\r\n   * Rabbi Yaakov Shakow's <a href=\"http://www.worldcat.org/oclc/1043573513\">Luach Ikvei Hayom</a>.\r\n   *\r\n   * @return the <code>Date</code> representing <em>alos</em>. If the calculation can't be computed such as northern\r\n   *         and southern locations even south of the Arctic Circle and north of the Antarctic Circle where the sun\r\n   *         may not reach low enough below the horizon for this calculation, a null will be returned. See detailed\r\n   *         explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * @see #ASTRONOMICAL_ZENITH\r\n   */\n\n\n  getAlos19Degrees() {\n    return this.getSunriseOffsetByDegrees(ComplexZmanimCalendar.ZENITH_19_DEGREES);\n  }\n  /**\r\n   * Method to return <em>alos</em> (dawn) calculated when the sun is {@link #ZENITH_19_POINT_8 19.8&deg;} below the\r\n   * eastern geometric horizon before sunrise. This calculation is based on the same calculation of\r\n   * {@link #getAlos90() 90 minutes} but uses a degree based calculation instead of 90 exact minutes. This calculation\r\n   * is based on the position of the sun 90 minutes before sunrise in Jerusalem during the equinox (on March 16,\r\n   * about 4 days before the astronomical equinox, the day that a solar hour is 60 minutes) which calculates to\r\n   * 19.8&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}\r\n   *\r\n   * @return the <code>Date</code> representing <em>alos</em>. If the calculation can't be computed such as northern\r\n   *         and southern locations even south of the Arctic Circle and north of the Antarctic Circle where the sun\r\n   *         may not reach low enough below the horizon for this calculation, a null will be returned. See detailed\r\n   *         explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * @see #ZENITH_19_POINT_8\r\n   * @see #getAlos90()\r\n   */\n\n\n  getAlos19Point8Degrees() {\n    return this.getSunriseOffsetByDegrees(ComplexZmanimCalendar.ZENITH_19_POINT_8);\n  }\n  /**\r\n   * Method to return <em>alos</em> (dawn) calculated when the sun is {@link #ZENITH_16_POINT_1 16.1&deg;} below the\r\n   * eastern geometric horizon before sunrise. This calculation is based on the same calculation of\r\n   * {@link #getAlos72() 72 minutes} but uses a degree based calculation instead of 72 exact minutes. This calculation\r\n   * is based on the position of the sun 72 minutes before sunrise in Jerusalem during the equinox (on March 16,\r\n   * about 4 days before the astronomical equinox, the day that a solar hour is 60 minutes) which calculates to\r\n   * 16.1&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}.\r\n   *\r\n   * @return the <code>Date</code> representing <em>alos</em>. If the calculation can't be computed such as northern\r\n   *         and southern locations even south of the Arctic Circle and north of the Antarctic Circle where the sun\r\n   *         may not reach low enough below the horizon for this calculation, a null will be returned. See detailed\r\n   *         explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * @see #ZENITH_16_POINT_1\r\n   * @see #getAlos72()\r\n   */\n\n\n  getAlos16Point1Degrees() {\n    return this.getSunriseOffsetByDegrees(ComplexZmanimCalendar.ZENITH_16_POINT_1);\n  }\n  /**\r\n   * This method returns <em>misheyakir</em> based on the position of the sun when it is {@link #ZENITH_11_DEGREES\r\n   * 11.5&deg;} below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for calculating\r\n   * <em>misheyakir</em> according to some opinions. This calculation is based on the position of the sun 52 minutes\r\n   * before {@link #getSunrise sunrise} in Jerusalem during the equinox (on March 16, about 4 days before the\r\n   * astronomical equinox, the day that a solar hour is 60 minutes) which calculates to 11.5&deg; below\r\n   * {@link #GEOMETRIC_ZENITH geometric zenith}\r\n   *\r\n   * @return the <code>Date</code> of <em>misheyakir</em>. If the calculation can't be computed such as northern and\r\n   *         southern locations even south of the Arctic Circle and north of the Antarctic Circle where the sun may\r\n   *         not reach low enough below the horizon for this calculation, a null will be returned. See detailed\r\n   *         explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * @see #ZENITH_11_POINT_5\r\n   */\n\n\n  getMisheyakir11Point5Degrees() {\n    return this.getSunriseOffsetByDegrees(ComplexZmanimCalendar.ZENITH_11_POINT_5);\n  }\n  /**\r\n   * This method returns <em>misheyakir</em> based on the position of the sun when it is {@link #ZENITH_11_DEGREES\r\n   * 11&deg;} below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for calculating\r\n   * <em>misheyakir</em> according to some opinions. This calculation is based on the position of the sun 48 minutes\r\n   * before {@link #getSunrise sunrise} in Jerusalem during the equinox (on March 16, about 4 days before the\r\n   * astronomical equinox, the day that a solar hour is 60 minutes) which calculates to 11&deg; below\r\n   * {@link #GEOMETRIC_ZENITH geometric zenith}\r\n   *\r\n   * @return If the calculation can't be computed such as northern and southern locations even south of the Arctic\r\n   *         Circle and north of the Antarctic Circle where the sun may not reach low enough below the horizon for\r\n   *         this calculation, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * @see #ZENITH_11_DEGREES\r\n   */\n\n\n  getMisheyakir11Degrees() {\n    return this.getSunriseOffsetByDegrees(ComplexZmanimCalendar.ZENITH_11_DEGREES);\n  }\n  /**\r\n   * This method returns <em>misheyakir</em> based on the position of the sun when it is {@link #ZENITH_10_POINT_2\r\n   * 10.2&deg;} below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for calculating\r\n   * <em>misheyakir</em> according to some opinions. This calculation is based on the position of the sun 45 minutes\r\n   * before {@link #getSunrise sunrise} in Jerusalem during the equinox (on March 16, about 4 days before the\r\n   * astronomical equinox, the day that a solar hour is 60 minutes) which calculates to 10.2&deg; below\r\n   * {@link #GEOMETRIC_ZENITH geometric zenith}\r\n   *\r\n   * @return the <code>Date</code> of <em>misheyakir</em>. If the calculation can't be computed such as\r\n   *         northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle where\r\n   *         the sun may not reach low enough below the horizon for this calculation, a null will be returned. See\r\n   *         detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * @see #ZENITH_10_POINT_2\r\n   */\n\n\n  getMisheyakir10Point2Degrees() {\n    return this.getSunriseOffsetByDegrees(ComplexZmanimCalendar.ZENITH_10_POINT_2);\n  }\n  /**\r\n   * This method returns <em>misheyakir</em> based on the position of the sun when it is {@link #ZENITH_7_POINT_65\r\n   * 7.65&deg;} below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). The degrees are based on a 35/36 minute zman\r\n   * during the equinox (on March 16, about 4 days before the astronomical equinox, the day that a solar hour is 60\r\n   * minutes) when the <em>neshef</em> (twilight) is the shortest. This time is based on <a href=\r\n   * \"https://en.wikipedia.org/wiki/Moshe_Feinstein\">Rabbi Moshe Feinstein</a> who writes in <a href=\r\n   * \"http://www.hebrewbooks.org/pdfpager.aspx?req=14677&amp;pgnum=7\">Ohr Hachaim Vol. 4, Ch. 6</a>)\r\n   * that misheyakir in New York is 35-40 minutes before sunset, something that is a drop less than 8&deg;.\r\n   * <a href=\"https://en.wikipedia.org/wiki/Yisroel_Taplin\">Rabbi Yisroel Taplin</a> in <a href=\r\n   * \"http://www.worldcat.org/oclc/889556744\">Zmanei Yisrael</a> (page 117) notes that <a href=\r\n   * \"https://en.wikipedia.org/wiki/Yaakov_Kamenetsky\">Rabbi Yaakov Kamenetsky</a> stated that it is not less than 36\r\n   * minutes before sunrise (maybe it is 40 minutes). Sefer Yisrael Vehazmanim (p. 7) quotes the Tamar Yifrach\r\n   * in the name of the <a href=\"https://en.wikipedia.org/wiki/Joel_Teitelbaum\">Satmar Rov</a> that one should be stringent\r\n   * not consider misheyakir before 36 minutes. This is also the accepted <a href=\"https://en.wikipedia.org/wiki/Minhag\">minhag</a>\r\n   * in <a href=\"https://en.wikipedia.org/wiki/Lakewood_Township,_New_Jersey\">Lakewood</a> that is used in the <a href=\r\n   * \"https://en.wikipedia.org/wiki/Beth_Medrash_Govoha\">Yeshiva</a>. This follows the opinion of <a href=\r\n   * \"https://en.wikipedia.org/wiki/Shmuel_Kamenetsky\">Rabbi Shmuel Kamenetsky</a> who provided the time of 35/36 minutes,\r\n   * but did not provide a degree based time. Since this zman depends on the level of light, Rabbi Yaakov Shakow presented\r\n   * this degree based calculations to Rabbi Kamenetsky who agreed to them.\r\n   *\r\n   * @return the <code>Date</code> of <em>misheyakir</em>. If the calculation can't be computed such as\r\n   *         northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle where\r\n   *         the sun may not reach low enough below the horizon for this calculation, a null will be returned. See\r\n   *         detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   *\r\n   * @see #ZENITH_7_POINT_65\r\n   * @see #getMisheyakir9Point5Degrees()\r\n   */\n\n\n  getMisheyakir7Point65Degrees() {\n    return this.getSunriseOffsetByDegrees(ComplexZmanimCalendar.ZENITH_7_POINT_65);\n  }\n  /**\r\n   * This method returns <em>misheyakir</em> based on the position of the sun when it is {@link #ZENITH_9_POINT_5\r\n     * 9.5&deg;} below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is based on Rabbi Dovid Kronglass's\r\n   * Calculation of 45 minutes in Baltimore as mentioned in <a href=\r\n   * \"http://www.hebrewbooks.org/pdfpager.aspx?req=20287&amp;pgnum=29\">Divrei Chachamim No. 24</a> brought down by the <a href=\r\n   * \"http://www.hebrewbooks.org/pdfpager.aspx?req=50535&amp;pgnum=87\">Birur Halacha, Tinyana, Ch. 18</a>. This calculates to\r\n   * 9.5&deg;. Also see <a href=\"https://en.wikipedia.org/wiki/Jacob_Isaac_Neiman\">Rabbi Yaakov Yitzchok Neiman</a> in Kovetz\r\n   * Eitz Chaim Vol. 9, p. 202 that the Vyaan Yosef did not want to rely on times earlier than 45 minutes in New York. This\r\n   * <em>zman</em> is also used in the calendars published by Rabbi Hershel Edelstein. As mentioned in the <em>Yisroel\r\n   * Vehazmanim</em>,  Rabbi Edelstein who was given the 45 minute zman by Rabbi Bick. The calendars published by the\r\n   * <em><a href=\"https://en.wikipedia.org/wiki/Mizrahi_Jews\">Edot Hamizrach</a></em> communities also use this zman. This also\r\n   * follows the opinion of <a href=\"https://en.wikipedia.org/wiki/Shmuel_Kamenetsky\">Rabbi Shmuel Kamenetsky</a> who provided\r\n   * the time of 36 and 45 minutes, but did not provide a degree based time. Since this zman depends on the level of light,\r\n   * Rabbi Yaakov Shakow presented these degree based times to Rabbi Shmuel Kamenetsky who agreed to them.\r\n   *\r\n   * @return the <code>Date</code> of <em>misheyakir</em>. If the calculation can't be computed such as\r\n   *         northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle where\r\n   *         the sun may not reach low enough below the horizon for this calculation, a null will be returned. See\r\n   *         detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   *\r\n   * @see #ZENITH_9_POINT_5\r\n   * @see #getMisheyakir7Point65Degrees()\r\n   */\n\n\n  getMisheyakir9Point5Degrees() {\n    return this.getSunriseOffsetByDegrees(ComplexZmanimCalendar.ZENITH_9_POINT_5);\n  }\n  /**\r\n   * opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> based\r\n   * on <em>alos</em> being {@link #getAlos19Point8Degrees() 19.8&deg;} before {@link #getSunrise() sunrise}. This\r\n   * time is 3 <em>{@link #getShaahZmanis19Point8Degrees() shaos zmaniyos}</em> (solar hours) after {@link\r\n    * #getAlos19Point8Degrees() dawn} based on the opinion of the <em>MGA</em> that the day is calculated from dawn to\r\n   * nightfall with both being 19.8&deg; below sunrise or sunset. This returns the time of 3 *\r\n   * {@link #getShaahZmanis19Point8Degrees()} after {@link #getAlos19Point8Degrees() dawn}.\r\n   *\r\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\r\n   *         as northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle\r\n   *         where the sun may not reach low enough below the horizon for this calculation, a null will be returned.\r\n   *         See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * @see #getShaahZmanis19Point8Degrees()\r\n   * @see #getAlos19Point8Degrees()\r\n   */\n\n\n  getSofZmanShmaMGA19Point8Degrees() {\n    return this.getSofZmanShma(this.getAlos19Point8Degrees(), this.getTzais19Point8Degrees());\n  }\n  /**\r\n   * opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> based\r\n   * on <em>alos</em> being {@link #getAlos16Point1Degrees() 16.1&deg;} before {@link #getSunrise() sunrise}. This time\r\n   * is 3 <em>{@link #getShaahZmanis16Point1Degrees() shaos zmaniyos}</em> (solar hours) after\r\n   * {@link #getAlos16Point1Degrees() dawn} based on the opinion of the <em>MGA</em> that the day is calculated from\r\n   * dawn to nightfall with both being 16.1&deg; below sunrise or sunset. This returns the time of\r\n   *\r\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\r\n   *         as northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle\r\n   *         where the sun may not reach low enough below the horizon for this calculation, a null will be returned.\r\n   *         See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * @see #getShaahZmanis16Point1Degrees()\r\n   * @see #getAlos16Point1Degrees()\r\n   */\n\n\n  getSofZmanShmaMGA16Point1Degrees() {\n    return this.getSofZmanShma(this.getAlos16Point1Degrees(), this.getTzais16Point1Degrees());\n  }\n  /**\r\n   * opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> based\r\n   * on <em>alos</em> being {@link #getAlos18Degrees() 18&deg;} before {@link #getSunrise() sunrise}. This time is 3\r\n   * <em>{@link #getShaahZmanis18Degrees() shaos zmaniyos}</em> (solar hours) after {@link #getAlos18Degrees() dawn}\r\n   * based on the opinion of the <em>MGA</em> that the day is calculated from dawn to nightfall with both being 18&deg;\r\n   * below sunrise or sunset. This returns the time of 3 * {@link #getShaahZmanis18Degrees()} after\r\n   * {@link #getAlos18Degrees() dawn}.\r\n   *\r\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\r\n   *         as northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle\r\n   *         where the sun may not reach low enough below the horizon for this calculation, a null will be returned.\r\n   *         See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * @see #getShaahZmanis18Degrees()\r\n   * @see #getAlos18Degrees()\r\n   */\n\n\n  getSofZmanShmaMGA18Degrees() {\n    return this.getSofZmanShma(this.getAlos18Degrees(), this.getTzais18Degrees());\n  }\n  /**\r\n   * This method returns the latest <em>zman krias shema</em> (time to recite Shema in the morning) according to the\r\n   * opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> based on <em>alos</em> being {@link #getAlos72() 72} minutes before\r\n   * {@link #getSunrise() sunrise}. This time is 3 <em>{@link #getShaahZmanis72Minutes() shaos zmaniyos}</em> (solar\r\n   * hours) after {@link #getAlos72() dawn} based on the opinion of the <em>MGA</em> that the day is calculated from a\r\n   * {@link #getAlos72() dawn} of 72 minutes before sunrise to {@link #getTzais72() nightfall} of 72 minutes after\r\n   * sunset. This returns the time of 3 * {@link #getShaahZmanis72Minutes()} after {@link #getAlos72() dawn}. This\r\n   * class returns an identical time to {@link #getSofZmanShmaMGA()} and is repeated here for clarity.\r\n   *\r\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\r\n   *         as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where\r\n   *         it does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * @see #getShaahZmanis72Minutes()\r\n   * @see #getAlos72()\r\n   * @see #getSofZmanShmaMGA()\r\n   */\n\n\n  getSofZmanShmaMGA72Minutes() {\n    return this.getSofZmanShmaMGA();\n  }\n  /**\r\n   * opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> based\r\n   * on <em>alos</em> being {@link #getAlos72Zmanis() 72} minutes <em>zmaniyos</em>, or 1/10th of the day before\r\n   * {@link #getSunrise() sunrise}. This time is 3 <em>{@link #getShaahZmanis90MinutesZmanis() shaos zmaniyos}</em>\r\n   * (solar hours) after {@link #getAlos72Zmanis() dawn} based on the opinion of the <em>MGA</em> that the day is\r\n   * calculated from a {@link #getAlos72Zmanis() dawn} of 72 minutes <em>zmaniyos</em>, or 1/10th of the day before\r\n   * {@link #getSeaLevelSunrise() sea level sunrise} to {@link #getTzais72Zmanis() nightfall} of 72 minutes\r\n   * <em>zmaniyos</em> after {@link #getSeaLevelSunset() sea level sunset}. This returns the time of 3 *\r\n   * {@link #getShaahZmanis72MinutesZmanis()} after {@link #getAlos72Zmanis() dawn}.\r\n   *\r\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\r\n   *         as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where\r\n   *         it does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * @see #getShaahZmanis72MinutesZmanis()\r\n   * @see #getAlos72Zmanis()\r\n   */\n\n\n  getSofZmanShmaMGA72MinutesZmanis() {\n    return this.getSofZmanShma(this.getAlos72Zmanis(), this.getTzais72Zmanis());\n  }\n  /**\r\n   * opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> based on\r\n   * <em>alos</em> being {@link #getAlos90() 90} minutes before {@link #getSunrise() sunrise}. This time is 3\r\n   * <em>{@link #getShaahZmanis90Minutes() shaos zmaniyos}</em> (solar hours) after {@link #getAlos90() dawn} based on\r\n   * the opinion of the <em>MGA</em> that the day is calculated from a {@link #getAlos90() dawn} of 90 minutes before\r\n   * sunrise to {@link #getTzais90() nightfall} of 90 minutes after sunset. This returns the time of 3 *\r\n   * {@link #getShaahZmanis90Minutes()} after {@link #getAlos90() dawn}.\r\n   *\r\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\r\n   *         as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where\r\n   *         it does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * @see #getShaahZmanis90Minutes()\r\n   * @see #getAlos90()\r\n   */\n\n\n  getSofZmanShmaMGA90Minutes() {\n    return this.getSofZmanShma(this.getAlos90(), this.getTzais90());\n  }\n  /**\r\n   * This method returns the latest <em>zman krias shema</em> (time to recite Shema in the morning) according to the\r\n   * opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> based on <em>alos</em> being {@link #getAlos90Zmanis() 90} minutes <em>zmaniyos</em>\r\n   * before {@link #getSunrise() sunrise}. This time is 3\r\n   * <em>{@link #getShaahZmanis90MinutesZmanis() shaos zmaniyos}</em> (solar hours) after {@link #getAlos90Zmanis()\r\n     * dawn} based on the opinion of the <em>MGA</em> that the day is calculated from a {@link #getAlos90Zmanis() dawn}\r\n   * of 90 minutes <em>zmaniyos</em> before sunrise to {@link #getTzais90Zmanis() nightfall} of 90 minutes\r\n   * <em>zmaniyos</em> after sunset. This returns the time of 3 * {@link #getShaahZmanis90MinutesZmanis()} after\r\n   * {@link #getAlos90Zmanis() dawn}.\r\n   *\r\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\r\n   *         as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where\r\n   *         it does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * @see #getShaahZmanis90MinutesZmanis()\r\n   * @see #getAlos90Zmanis()\r\n   */\n\n\n  getSofZmanShmaMGA90MinutesZmanis() {\n    return this.getSofZmanShma(this.getAlos90Zmanis(), this.getTzais90Zmanis());\n  }\n  /**\r\n   * This method returns the latest <em>zman krias shema</em> (time to recite Shema in the morning) according to the\r\n   * opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> based on <em>alos</em> being {@link #getAlos96() 96} minutes before\r\n   * {@link #getSunrise() sunrise}. This time is 3 <em>{@link #getShaahZmanis96Minutes() shaos zmaniyos}</em> (solar\r\n   * hours) after {@link #getAlos96() dawn} based on the opinion of the <em>MGA</em> that the day is calculated from a\r\n   * {@link #getAlos96() dawn} of 96 minutes before sunrise to {@link #getTzais96() nightfall} of 96 minutes after\r\n   * sunset. This returns the time of 3 * {@link #getShaahZmanis96Minutes()} after {@link #getAlos96() dawn}.\r\n   *\r\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\r\n   *         as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where\r\n   *         it does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * @see #getShaahZmanis96Minutes()\r\n   * @see #getAlos96()\r\n   */\n\n\n  getSofZmanShmaMGA96Minutes() {\n    return this.getSofZmanShma(this.getAlos96(), this.getTzais96());\n  }\n  /**\r\n   * This method returns the latest <em>zman krias shema</em> (time to recite Shema in the morning) according to the\r\n   * opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> based on <em>alos</em> being {@link #getAlos90Zmanis() 96} minutes <em>zmaniyos</em>\r\n   * before {@link #getSunrise() sunrise}. This time is 3\r\n   * <em>{@link #getShaahZmanis96MinutesZmanis() shaos zmaniyos}</em> (solar hours) after {@link #getAlos96Zmanis()\r\n     * dawn} based on the opinion of the <em>MGA</em> that the day is calculated from a {@link #getAlos96Zmanis() dawn}\r\n   * of 96 minutes <em>zmaniyos</em> before sunrise to {@link #getTzais90Zmanis() nightfall} of 96 minutes\r\n   * <em>zmaniyos</em> after sunset. This returns the time of 3 * {@link #getShaahZmanis96MinutesZmanis()} after\r\n   * {@link #getAlos96Zmanis() dawn}.\r\n   *\r\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\r\n   *         as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where\r\n   *         it does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * @see #getShaahZmanis96MinutesZmanis()\r\n   * @see #getAlos96Zmanis()\r\n   */\n\n\n  getSofZmanShmaMGA96MinutesZmanis() {\n    return this.getSofZmanShma(this.getAlos96Zmanis(), this.getTzais96Zmanis());\n  }\n  /**\r\n   * This method returns the latest <em>zman krias shema</em> (time to recite Shema in the morning) calculated as 3\r\n   * hours (regular and not zmaniyos) before {@link ZmanimCalendar#getChatzos()}. This is the opinion of the\r\n   * <em>Shach</em> in the <em>Nekudas Hakesef (Yora Deah 184), Shevus Yaakov, Chasan Sofer</em> and others. This\r\n   * returns the time of 3 hours before {@link ZmanimCalendar#getChatzos()}. TODO: hyperlinks\r\n   *\r\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\r\n   *         as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where\r\n   *         it does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * @see ZmanimCalendar#getChatzos()\r\n   * @see #getSofZmanTfila2HoursBeforeChatzos()\r\n   */\n\n\n  getSofZmanShma3HoursBeforeChatzos() {\n    return ComplexZmanimCalendar.getTimeOffset(this.getChatzos(), -180 * ComplexZmanimCalendar.MINUTE_MILLIS);\n  }\n  /**\r\n   * This method returns the latest <em>zman krias shema</em> (time to recite Shema in the morning) according to the\r\n   * opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> based on <em>alos</em> being {@link #getAlos120() 120} minutes or 1/6th of the day\r\n   * before {@link #getSunrise() sunrise}. This time is 3 <em>{@link #getShaahZmanis120Minutes() shaos zmaniyos}</em>\r\n   * (solar hours) after {@link #getAlos120() dawn} based on the opinion of the <em>MGA</em> that the day is\r\n   * calculated from a {@link #getAlos120() dawn} of 120 minutes before sunrise to {@link #getTzais120() nightfall} of\r\n   * 120 minutes after sunset. This returns the time of 3 * {@link #getShaahZmanis120Minutes()} after\r\n   * {@link #getAlos120() dawn}.\r\n   *\r\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\r\n   *         as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where\r\n   *         it does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * @see #getShaahZmanis120Minutes()\r\n   * @see #getAlos120()\r\n   */\n\n\n  getSofZmanShmaMGA120Minutes() {\n    return this.getSofZmanShma(this.getAlos120(), this.getTzais120());\n  }\n  /**\r\n   * This method returns the latest <em>zman krias shema</em> (time to recite Shema in the morning) based on the\r\n   * opinion that the day starts at <em>{@link #getAlos16Point1Degrees() alos 16.1&deg;}</em> and ends at\r\n   * {@link #getSeaLevelSunset() sea level sunset}. 3 shaos zmaniyos are calculated based on this day and added to\r\n   * {@link #getAlos16Point1Degrees() alos}to reach this time. This time is 3 <em>shaos zmaniyos</em> (solar hours)\r\n   * after {@link #getAlos16Point1Degrees() dawn} based on the opinion that the day is calculated from a\r\n   * <em>{@link #getAlos16Point1Degrees() alos 16.1&deg;}</em> to {@link #getSeaLevelSunset() sea level sunset}.\r\n   * <b>Note: </b> Based on this calculation <em>chatzos</em> will not be at midday.\r\n   *\r\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em> based on this day. If the calculation can't\r\n   *         be computed such as northern and southern locations even south of the Arctic Circle and north of the\r\n   *         Antarctic Circle where the sun may not reach low enough below the horizon for this calculation, a null\r\n   *         will be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * @see #getAlos16Point1Degrees()\r\n   * @see #getSeaLevelSunset()\r\n   */\n\n\n  getSofZmanShmaAlos16Point1ToSunset() {\n    return this.getSofZmanShma(this.getAlos16Point1Degrees(), this.getElevationAdjustedSunset());\n  }\n  /**\r\n   * This method returns the latest <em>zman krias shema</em> (time to recite Shema in the morning) based on the\r\n   * opinion that the day starts at <em>{@link #getAlos16Point1Degrees() alos 16.1&deg;}</em> and ends at\r\n   * <em> {@link #getTzaisGeonim7Point083Degrees() tzais 7.083&deg;}</em>. 3 <em>shaos zmaniyos</em> are calculated\r\n   * based on this day and added to <em>{@link #getAlos16Point1Degrees() alos}</em> to reach this time. This time is 3\r\n   * <em>shaos zmaniyos</em> (temporal hours) after <em>{@link #getAlos16Point1Degrees() alos 16.1&deg;}</em> based on\r\n   * the opinion that the day is calculated from a <em>{@link #getAlos16Point1Degrees() alos 16.1&deg;}</em> to\r\n   * <em>{@link #getTzaisGeonim7Point083Degrees() tzais 7.083&deg;}</em>.\r\n   * <b>Note: </b> Based on this calculation <em>chatzos</em> will not be at midday.\r\n   *\r\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em> based on this calculation. If the\r\n   *         calculation can't be computed such as northern and southern locations even south of the Arctic Circle and\r\n   *         north of the Antarctic Circle where the sun may not reach low enough below the horizon for this\r\n   *         calculation, a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   * @see #getAlos16Point1Degrees()\r\n   * @see #getTzaisGeonim7Point083Degrees()\r\n   */\n\n\n  getSofZmanShmaAlos16Point1ToTzaisGeonim7Point083Degrees() {\n    return this.getSofZmanShma(this.getAlos16Point1Degrees(), this.getTzaisGeonim7Point083Degrees());\n  }\n  /**\r\n   * From the GRA in Kol Eliyahu on Berachos #173 that states that <em>zman krias shema</em> is calculated as half the\r\n   * time from {@link #getSeaLevelSunrise() sea level sunrise} to {@link #getFixedLocalChatzos() fixed local chatzos}.\r\n   * The GRA himself seems to contradict this when he stated that <em>zman krias shema</em> is 1/4 of the day from\r\n   * sunrise to sunset. See <em>Sarah Lamoed</em> #25 in Yisroel Vehazmanim Vol. III page 1016.\r\n   *\r\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em> based on this calculation. If the\r\n   *         calculation can't be computed such as in the Arctic Circle where there is at least one day a year where\r\n   *         the sun does not rise, and one where it does not set, a null will be returned. See detailed explanation\r\n   *         on top of the {@link AstronomicalCalendar} documentation.\r\n   * @see #getFixedLocalChatzos()\r\n   * @deprecated As per a conversation Rabbi Yisroel Twerski had with Rabbi Harfenes, this zman published in the Yisrael\r\n   *         Vehazmanim was based on a misunderstanding and should not be used. This deprecated will be removed pending\r\n   *         confirmation from Rabbi Harfenes.\r\n   */\n\n\n  getSofZmanShmaKolEliyahu() {\n    const chatzos = this.getFixedLocalChatzos();\n\n    if (chatzos === null || this.getSunrise() === null) {\n      return null;\n    }\n\n    const diff = (chatzos.valueOf() - this.getElevationAdjustedSunrise().valueOf()) / 2;\n    return ComplexZmanimCalendar.getTimeOffset(chatzos, -diff);\n  }\n  /**\r\n   * This method returns the latest <em>zman tfila</em> (time to recite the morning prayers) according to the opinion\r\n   * of the <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> based on <em>alos</em> being {@link #getAlos19Point8Degrees() 19.8&deg;} before\r\n   * {@link #getSunrise() sunrise}. This time is 4 <em>{@link #getShaahZmanis19Point8Degrees() shaos zmaniyos}</em>\r\n   * (solar hours) after {@link #getAlos19Point8Degrees() dawn} based on the opinion of the <em>MGA</em> that the day\r\n   * is calculated from dawn to nightfall with both being 19.8&deg; below sunrise or sunset. This returns the time of\r\n   * 4 * {@link #getShaahZmanis19Point8Degrees()} after {@link #getAlos19Point8Degrees() dawn}.\r\n   *\r\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\r\n   *         as northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle\r\n   *         where the sun may not reach low enough below the horizon for this calculation, a null will be returned.\r\n   *         See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   *\r\n   * @see #getShaahZmanis19Point8Degrees()\r\n   * @see #getAlos19Point8Degrees()\r\n   */\n\n\n  getSofZmanTfilaMGA19Point8Degrees() {\n    return this.getSofZmanTfila(this.getAlos19Point8Degrees(), this.getTzais19Point8Degrees());\n  }\n  /**\r\n   * This method returns the latest <em>zman tfila</em> (time to recite the morning prayers) according to the opinion\r\n   * of the <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> based on <em>alos</em> being {@link #getAlos16Point1Degrees() 16.1&deg;} before\r\n   * {@link #getSunrise() sunrise}. This time is 4 <em>{@link #getShaahZmanis16Point1Degrees() shaos zmaniyos}</em>\r\n   * (solar hours) after {@link #getAlos16Point1Degrees() dawn} based on the opinion of the <em>MGA</em> that the day\r\n   * is calculated from dawn to nightfall with both being 16.1&deg; below sunrise or sunset. This returns the time of\r\n   * 4 * {@link #getShaahZmanis16Point1Degrees()} after {@link #getAlos16Point1Degrees() dawn}.\r\n   *\r\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\r\n   *         as northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle\r\n   *         where the sun may not reach low enough below the horizon for this calculation, a null will be returned.\r\n   *         See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   *\r\n   * @see #getShaahZmanis16Point1Degrees()\r\n   * @see #getAlos16Point1Degrees()\r\n   */\n\n\n  getSofZmanTfilaMGA16Point1Degrees() {\n    return this.getSofZmanTfila(this.getAlos16Point1Degrees(), this.getTzais16Point1Degrees());\n  }\n  /**\r\n   * This method returns the latest <em>zman tfila</em> (time to recite the morning prayers) according to the opinion\r\n   * of the <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> based on <em>alos</em> being {@link #getAlos18Degrees() 18&deg;} before {@link #getSunrise()\r\n     * sunrise}. This time is 4 <em>{@link #getShaahZmanis18Degrees() shaos zmaniyos}</em> (solar hours) after\r\n   * {@link #getAlos18Degrees() dawn} based on the opinion of the <em>MGA</em> that the day is calculated from dawn to\r\n   * nightfall with both being 18&deg; below sunrise or sunset. This returns the time of 4 *\r\n   * {@link #getShaahZmanis18Degrees()} after {@link #getAlos18Degrees() dawn}.\r\n   *\r\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\r\n   *         as northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle\r\n   *         where the sun may not reach low enough below the horizon for this calculation, a null will be returned.\r\n   *         See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   *\r\n   * @see #getShaahZmanis18Degrees()\r\n   * @see #getAlos18Degrees()\r\n   */\n\n\n  getSofZmanTfilaMGA18Degrees() {\n    return this.getSofZmanTfila(this.getAlos18Degrees(), this.getTzais18Degrees());\n  }\n  /**\r\n   * This method returns the latest <em>zman tfila</em> (time to recite the morning prayers) according to the opinion\r\n   * of the <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> based on <em>alos</em> being {@link #getAlos72() 72} minutes before {@link #getSunrise()\r\n     * sunrise}. This time is 4 <em>{@link #getShaahZmanis72Minutes() shaos zmaniyos}</em> (solar hours) after\r\n   * {@link #getAlos72() dawn} based on the opinion of the <em>MGA</em> that the day is calculated from a\r\n   * {@link #getAlos72() dawn} of 72 minutes before sunrise to {@link #getTzais72() nightfall} of 72 minutes after\r\n   * sunset. This returns the time of 4 * {@link #getShaahZmanis72Minutes()} after {@link #getAlos72() dawn}. This\r\n   * class returns an identical time to {@link #getSofZmanTfilaMGA()} and is repeated here for clarity.\r\n   *\r\n   * @return the <code>Date</code> of the latest <em>zman tfila</em>. If the calculation can't be computed such as in\r\n   *         the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n   *         does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * @see #getShaahZmanis72Minutes()\r\n   * @see #getAlos72()\r\n   * @see #getSofZmanShmaMGA()\r\n   */\n\n\n  getSofZmanTfilaMGA72Minutes() {\n    return this.getSofZmanTfilaMGA();\n  }\n  /**\r\n   * This method returns the latest <em>zman tfila</em> (time to the morning prayers) according to the opinion of the\r\n   *  <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> based on <em>alos</em> being {@link #getAlos72Zmanis() 72} minutes <em>zmaniyos</em> before\r\n   * {@link #getSunrise() sunrise}. This time is 4 <em>{@link #getShaahZmanis72MinutesZmanis() shaos zmaniyos}</em>\r\n   * (solar hours) after {@link #getAlos72Zmanis() dawn} based on the opinion of the <em>MGA</em> that the day is\r\n   * calculated from a {@link #getAlos72Zmanis() dawn} of 72 minutes <em>zmaniyos</em> before sunrise to\r\n   * {@link #getTzais72Zmanis() nightfall} of 72 minutes <em>zmaniyos</em> after sunset. This returns the time of 4 *\r\n   * {@link #getShaahZmanis72MinutesZmanis()} after {@link #getAlos72Zmanis() dawn}.\r\n   *\r\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\r\n   *         as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where\r\n   *         it does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * @see #getShaahZmanis72MinutesZmanis()\r\n   * @see #getAlos72Zmanis()\r\n   */\n\n\n  getSofZmanTfilaMGA72MinutesZmanis() {\n    return this.getSofZmanTfila(this.getAlos72Zmanis(), this.getTzais72Zmanis());\n  }\n  /**\r\n   * This method returns the latest <em>zman tfila</em> (time to recite the morning prayers) according to the opinion\r\n   * of the  <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> based on <em>alos</em> being {@link #getAlos90() 90} minutes before {@link #getSunrise()\r\n     * sunrise}. This time is 4 <em>{@link #getShaahZmanis90Minutes() shaos zmaniyos}</em> (solar hours) after\r\n   * {@link #getAlos90() dawn} based on the opinion of the <em>MGA</em> that the day is calculated from a\r\n   * {@link #getAlos90() dawn} of 90 minutes before sunrise to {@link #getTzais90() nightfall} of 90 minutes after\r\n   * sunset. This returns the time of 4 * {@link #getShaahZmanis90Minutes()} after {@link #getAlos90() dawn}.\r\n   *\r\n   * @return the <code>Date</code> of the latest <em>zman tfila</em>. If the calculation can't be computed such as in\r\n   *         the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n   *         does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * @see #getShaahZmanis90Minutes()\r\n   * @see #getAlos90()\r\n   */\n\n\n  getSofZmanTfilaMGA90Minutes() {\n    return this.getSofZmanTfila(this.getAlos90(), this.getTzais90());\n  }\n  /**\r\n   * This method returns the latest <em>zman tfila</em> (time to the morning prayers) according to the opinion of the\r\n   *  <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> based on <em>alos</em> being {@link #getAlos90Zmanis() 90} minutes <em>zmaniyos</em> before\r\n   * {@link #getSunrise() sunrise}. This time is 4 <em>{@link #getShaahZmanis90MinutesZmanis() shaos zmaniyos}</em>\r\n   * (solar hours) after {@link #getAlos90Zmanis() dawn} based on the opinion of the <em>MGA</em> that the day is\r\n   * calculated from a {@link #getAlos90Zmanis() dawn} of 90 minutes <em>zmaniyos</em> before sunrise to\r\n   * {@link #getTzais90Zmanis() nightfall} of 90 minutes <em>zmaniyos</em> after sunset. This returns the time of 4 *\r\n   * {@link #getShaahZmanis90MinutesZmanis()} after {@link #getAlos90Zmanis() dawn}.\r\n   *\r\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\r\n   *         as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where\r\n   *         it does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * @see #getShaahZmanis90MinutesZmanis()\r\n   * @see #getAlos90Zmanis()\r\n   */\n\n\n  getSofZmanTfilaMGA90MinutesZmanis() {\n    return this.getSofZmanTfila(this.getAlos90Zmanis(), this.getTzais90Zmanis());\n  }\n  /**\r\n   * This method returns the latest <em>zman tfila</em> (time to recite the morning prayers) according to the opinion\r\n   * of the  <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> based on <em>alos</em> being {@link #getAlos96() 96} minutes before {@link #getSunrise()\r\n     * sunrise}. This time is 4 <em>{@link #getShaahZmanis96Minutes() shaos zmaniyos}</em> (solar hours) after\r\n   * {@link #getAlos96() dawn} based on the opinion of the <em>MGA</em> that the day is calculated from a\r\n   * {@link #getAlos96() dawn} of 96 minutes before sunrise to {@link #getTzais96() nightfall} of 96 minutes after\r\n   * sunset. This returns the time of 4 * {@link #getShaahZmanis96Minutes()} after {@link #getAlos96() dawn}.\r\n   *\r\n   * @return the <code>Date</code> of the latest <em>zman tfila</em>. If the calculation can't be computed such as in\r\n   *         the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n   *         does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * @see #getShaahZmanis96Minutes()\r\n   * @see #getAlos96()\r\n   */\n\n\n  getSofZmanTfilaMGA96Minutes() {\n    return this.getSofZmanTfila(this.getAlos96(), this.getTzais96());\n  }\n  /**\r\n   * This method returns the latest <em>zman tfila</em> (time to the morning prayers) according to the opinion of the\r\n   *  <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> based on <em>alos</em> being {@link #getAlos96Zmanis() 96} minutes <em>zmaniyos</em> before\r\n   * {@link #getSunrise() sunrise}. This time is 4 <em>{@link #getShaahZmanis96MinutesZmanis() shaos zmaniyos}</em>\r\n   * (solar hours) after {@link #getAlos96Zmanis() dawn} based on the opinion of the <em>MGA</em> that the day is\r\n   * calculated from a {@link #getAlos96Zmanis() dawn} of 96 minutes <em>zmaniyos</em> before sunrise to\r\n   * {@link #getTzais96Zmanis() nightfall} of 96 minutes <em>zmaniyos</em> after sunset. This returns the time of 4 *\r\n   * {@link #getShaahZmanis96MinutesZmanis()} after {@link #getAlos96Zmanis() dawn}.\r\n   *\r\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\r\n   *         as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where\r\n   *         it does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * @see #getShaahZmanis90MinutesZmanis()\r\n   * @see #getAlos90Zmanis()\r\n   */\n\n\n  getSofZmanTfilaMGA96MinutesZmanis() {\n    return this.getSofZmanTfila(this.getAlos96Zmanis(), this.getTzais96Zmanis());\n  }\n  /**\r\n   * This method returns the latest <em>zman tfila</em> (time to recite the morning prayers) according to the opinion\r\n   * of the  <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> based on <em>alos</em> being {@link #getAlos120() 120} minutes before {@link #getSunrise()\r\n     * sunrise} . This time is 4 <em>{@link #getShaahZmanis120Minutes() shaos zmaniyos}</em> (solar hours) after\r\n   * {@link #getAlos120() dawn} based on the opinion of the <em>MGA</em> that the day is calculated from a\r\n   * {@link #getAlos120() dawn} of 120 minutes before sunrise to {@link #getTzais120() nightfall} of 120 minutes after\r\n   * sunset. This returns the time of 4 * {@link #getShaahZmanis120Minutes()} after {@link #getAlos120() dawn}.\r\n   *\r\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\r\n   *         as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where\r\n   *         it does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * @see #getShaahZmanis120Minutes()\r\n   * @see #getAlos120()\r\n   */\n\n\n  getSofZmanTfilaMGA120Minutes() {\n    return this.getSofZmanTfila(this.getAlos120(), this.getTzais120());\n  }\n  /**\r\n   * This method returns the latest <em>zman tfila</em> (time to recite the morning prayers) calculated as 2 hours\r\n   * before {@link ZmanimCalendar#getChatzos()}. This is based on the opinions that calculate\r\n   * <em>sof zman krias shema</em> as {@link #getSofZmanShma3HoursBeforeChatzos()}. This returns the time of 2 hours\r\n   * before {@link ZmanimCalendar#getChatzos()}.\r\n   * TODO: Add hyperlinks to documentation\r\n   *\r\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\r\n   *         as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where\r\n   *         it does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * @see ZmanimCalendar#getChatzos()\r\n   * @see #getSofZmanShma3HoursBeforeChatzos()\r\n   */\n\n\n  getSofZmanTfila2HoursBeforeChatzos() {\n    return ComplexZmanimCalendar.getTimeOffset(this.getChatzos(), -120 * ComplexZmanimCalendar.MINUTE_MILLIS);\n  }\n  /**\r\n   * This method returns mincha gedola calculated as 30 minutes after <em>{@link #getChatzos() chatzos}</em> and not\r\n   * 1/2 of a <em>{@link #getShaahZmanisGra() shaah zmanis}</em> after <em>{@link #getChatzos() chatzos}</em> as\r\n   * calculated by {@link #getMinchaGedola}. Some use this time to delay the start of mincha in the winter when 1/2 of\r\n   * a <em>{@link #getShaahZmanisGra() shaah zmanis}</em> is less than 30 minutes. See\r\n   * {@link #getMinchaGedolaGreaterThan30()}for a convenience method that returns the later of the 2 calculations. One\r\n   * should not use this time to start <em>mincha</em> before the standard\r\n   * <em>{@link #getMinchaGedola() mincha gedola}</em>. See <em>Shulchan Aruch\r\n   * Orach Chayim Siman Raish Lamed Gimel seif alef</em> and the <em>Shaar Hatziyon seif katan ches</em>.\r\n   * TODO: Add hyperlinks to documentation.\r\n   *\r\n   * @return the <code>Date</code> of 30 minutes after <em>chatzos</em>. If the calculation can't be computed such as\r\n   *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n   *         does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * @see #getMinchaGedola()\r\n   * @see #getMinchaGedolaGreaterThan30()\r\n   */\n\n\n  getMinchaGedola30Minutes() {\n    return ComplexZmanimCalendar.getTimeOffset(this.getChatzos(), ComplexZmanimCalendar.MINUTE_MILLIS * 30);\n  }\n  /**\r\n   * This method returns the time of <em>mincha gedola</em> according to the Magen Avraham with the day starting 72\r\n   * minutes before sunrise and ending 72 minutes after sunset. This is the earliest time to pray <em>mincha</em>. For\r\n   * more information on this see the documentation on <em>{@link #getMinchaGedola() mincha gedola}</em>. This is\r\n   * calculated as 6.5 {@link #getTemporalHour() solar hours} after alos. The calculation used is 6.5 *\r\n   * {@link #getShaahZmanis72Minutes()} after {@link #getAlos72() alos}.\r\n   *\r\n   * @see #getAlos72()\r\n   * @see #getMinchaGedola()\r\n   * @see #getMinchaKetana()\r\n   * @see ZmanimCalendar#getMinchaGedola()\r\n   * @return the <code>Date</code> of the time of mincha gedola. If the calculation can't be computed such as in the\r\n   *         Arctic Circle where there is at least one day a year where the sun does not rise, and one where it does\r\n   *         not set, a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   */\n\n\n  getMinchaGedola72Minutes() {\n    return this.getMinchaGedola(this.getAlos72(), this.getTzais72());\n  }\n  /**\r\n   * This method returns the time of <em>mincha gedola</em> according to the Magen Avraham with the day starting and\r\n   * ending 16.1&deg; below the horizon. This is the earliest time to pray <em>mincha</em>. For more information on\r\n   * this see the documentation on <em>{@link #getMinchaGedola() mincha gedola}</em>. This is calculated as 6.5\r\n   * {@link #getTemporalHour() solar hours} after alos. The calculation used is 6.5 *\r\n   * {@link #getShaahZmanis16Point1Degrees()} after {@link #getAlos16Point1Degrees() alos}.\r\n   *\r\n   * @see #getShaahZmanis16Point1Degrees()\r\n   * @see #getMinchaGedola()\r\n   * @see #getMinchaKetana()\r\n   * @return the <code>Date</code> of the time of mincha gedola. If the calculation can't be computed such as northern\r\n   *         and southern locations even south of the Arctic Circle and north of the Antarctic Circle where the sun\r\n   *         may not reach low enough below the horizon for this calculation, a null will be returned. See detailed\r\n   *         explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   */\n\n\n  getMinchaGedola16Point1Degrees() {\n    return this.getMinchaGedola(this.getAlos16Point1Degrees(), this.getTzais16Point1Degrees());\n  }\n  /**\r\n   * This is a conveniance method that returns the later of {@link #getMinchaGedola()} and\r\n   * {@link #getMinchaGedola30Minutes()}. In the winter when 1/2 of a <em>{@link #getShaahZmanisGra() shaah zmanis}</em> is\r\n   * less than 30 minutes {@link #getMinchaGedola30Minutes()} will be returned, otherwise {@link #getMinchaGedola()}\r\n   * will be returned.\r\n   *\r\n   * @return the <code>Date</code> of the later of {@link #getMinchaGedola()} and {@link #getMinchaGedola30Minutes()}.\r\n   *         If the calculation can't be computed such as in the Arctic Circle where there is at least one day a year\r\n   *         where the sun does not rise, and one where it does not set, a null will be returned. See detailed\r\n   *         explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   */\n\n\n  getMinchaGedolaGreaterThan30() {\n    if (this.getMinchaGedola30Minutes() === null || this.getMinchaGedola() === null) {\n      return null;\n    }\n\n    return DateTime.max(this.getMinchaGedola30Minutes(), this.getMinchaGedola());\n  }\n  /**\r\n   * starting and ending 16.1&deg; below the horizon. This is the preferred earliest time to pray <em>mincha</em>\r\n   * according to the opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Maimonides\">Rambam</a></em> and others.\r\n   * For more information on this see the documentation on <em>{@link #getMinchaGedola() mincha gedola}</em>. This is\r\n   * calculated as 9.5 {@link #getTemporalHour() solar hours} after alos. The calculation used is 9.5 *\r\n   * {@link #getShaahZmanis16Point1Degrees()} after {@link #getAlos16Point1Degrees() alos}.\r\n   *\r\n   * @see #getShaahZmanis16Point1Degrees()\r\n   * @see #getMinchaGedola()\r\n   * @see #getMinchaKetana()\r\n   * @return the <code>Date</code> of the time of mincha ketana. If the calculation can't be computed such as northern\r\n   *         and southern locations even south of the Arctic Circle and north of the Antarctic Circle where the sun\r\n   *         may not reach low enough below the horizon for this calculation, a null will be returned. See detailed\r\n   *         explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   */\n\n\n  getMinchaKetana16Point1Degrees() {\n    return this.getMinchaKetana(this.getAlos16Point1Degrees(), this.getTzais16Point1Degrees());\n  }\n  /**\r\n   * starting 72 minutes before sunrise and ending 72 minutes after sunset. This is the preferred earliest time to pray\r\n   * <em>mincha</em> according to the opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Maimonides\">Rambam</a></em>\r\n   * and others. For more information on this see the documentation on <em>{@link #getMinchaGedola() mincha gedola}</em>.\r\n   * This is calculated as 9.5 {@link #getShaahZmanis72Minutes()} after <em>alos</em>. The calculation used is 9.5 *\r\n   * {@link #getShaahZmanis72Minutes()} after <em>{@link #getAlos72() alos}</em>.\r\n   *\r\n   * @see #getShaahZmanis16Point1Degrees()\r\n   * @see #getMinchaGedola()\r\n   * @see #getMinchaKetana()\r\n   * @return the <code>Date</code> of the time of mincha ketana. If the calculation can't be computed such as in the\r\n   *         Arctic Circle where there is at least one day a year where the sun does not rise, and one where it does\r\n   *         not set, a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   */\n\n\n  getMinchaKetana72Minutes() {\n    return this.getMinchaKetana(this.getAlos72(), this.getTzais72());\n  }\n  /**\r\n   * This method returns the time of <em>plag hamincha</em> according to the <em>Magen Avraham</em> with the day\r\n   * starting 60 minutes before sunrise and ending 60 minutes after sunset. This is calculated as 10.75 hours after\r\n   * {@link #getAlos60() dawn}. The formula used is\r\n   * 10.75 {@link #getShaahZmanis60Minutes()} after {@link #getAlos60()}.\r\n   *\r\n   * @return the <code>Date</code> of the time of <em>plag hamincha</em>. If the calculation can't be computed such as\r\n   *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n   *         does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   *\r\n   * @see #getShaahZmanis60Minutes()\r\n   */\n\n\n  getPlagHamincha60Minutes() {\n    return this.getPlagHamincha(this.getAlos60(), this.getTzais60());\n  }\n  /**\r\n   * This method returns the time of <em>plag hamincha</em> according to the <em>Magen Avraham</em> with the day\r\n   * starting 72 minutes before sunrise and ending 72 minutes after sunset. This is calculated as 10.75 hours after\r\n   * {@link #getAlos72() dawn}. The formula used is\r\n   * 10.75 {@link #getShaahZmanis72Minutes()} after {@link #getAlos72()}.\r\n   *\r\n   * @return the <code>Date</code> of the time of <em>plag hamincha</em>. If the calculation can't be computed such as\r\n   *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n   *         does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   *\r\n   * @see #getShaahZmanis72Minutes()\r\n   */\n\n\n  getPlagHamincha72Minutes() {\n    return this.getPlagHamincha(this.getAlos72(), this.getTzais72());\n  }\n  /**\r\n   * This method returns the time of <em>plag hamincha</em> according to the <em>Magen Avraham</em> with the day\r\n   * starting 90 minutes before sunrise and ending 90 minutes after sunset. This is calculated as 10.75 hours after\r\n   * {@link #getAlos90() dawn}. The formula used is\r\n   * 10.75 {@link #getShaahZmanis90Minutes()} after {@link #getAlos90()}.\r\n   *\r\n   * @return the <code>Date</code> of the time of <em>plag hamincha</em>. If the calculation can't be computed such as\r\n   *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n   *         does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   *\r\n   * @see #getShaahZmanis90Minutes()\r\n   */\n\n\n  getPlagHamincha90Minutes() {\n    return this.getPlagHamincha(this.getAlos90(), this.getTzais90());\n  }\n  /**\r\n   * This method returns the time of <em>plag hamincha</em> according to the <em>Magen Avraham</em> with the day\r\n   * starting 96 minutes before sunrise and ending 96 minutes after sunset. This is calculated as 10.75 hours after\r\n   * {@link #getAlos96() dawn}. The formula used is\r\n   * 10.75 {@link #getShaahZmanis96Minutes()} after {@link #getAlos96()}.\r\n   *\r\n   * @return the <code>Date</code> of the time of <em>plag hamincha</em>. If the calculation can't be computed such as\r\n   *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n   *         does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * @see #getShaahZmanis96Minutes()\r\n   */\n\n\n  getPlagHamincha96Minutes() {\n    return this.getPlagHamincha(this.getAlos96(), this.getTzais96());\n  }\n  /**\r\n   * This method returns the time of <em>plag hamincha</em>. This is calculated as 10.75 hours after\r\n   * {@link #getAlos96Zmanis() dawn}. The formula used is\r\n   * 10.75 * {@link #getShaahZmanis96MinutesZmanis()} after {@link #getAlos96Zmanis() dawn}.\r\n   *\r\n   * @return the <code>Date</code> of the time of <em>plag hamincha</em>. If the calculation can't be computed such as\r\n   *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n   *         does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   */\n\n\n  getPlagHamincha96MinutesZmanis() {\n    return this.getPlagHamincha(this.getAlos96Zmanis(), this.getTzais96Zmanis());\n  }\n  /**\r\n   * This method returns the time of <em>plag hamincha</em>. This is calculated as 10.75 hours after\r\n   * {@link #getAlos90Zmanis() dawn}. The formula used is\r\n   * 10.75 * {@link #getShaahZmanis90MinutesZmanis()} after {@link #getAlos90Zmanis() dawn}.\r\n   *\r\n   * @return the <code>Date</code> of the time of <em>plag hamincha</em>. If the calculation can't be computed such as\r\n   *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n   *         does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   */\n\n\n  getPlagHamincha90MinutesZmanis() {\n    return this.getPlagHamincha(this.getAlos90Zmanis(), this.getTzais90Zmanis());\n  }\n  /**\r\n   * This method returns the time of <em>plag hamincha</em>. This is calculated as 10.75 hours after\r\n   * {@link #getAlos72Zmanis() dawn}. The formula used is\r\n   * 10.75 * {@link #getShaahZmanis72MinutesZmanis()} after {@link #getAlos72Zmanis() dawn}.\r\n   *\r\n   * @return the <code>Date</code> of the time of <em>plag hamincha</em>. If the calculation can't be computed such as\r\n   *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n   *         does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   */\n\n\n  getPlagHamincha72MinutesZmanis() {\n    return this.getPlagHamincha(this.getAlos72Zmanis(), this.getTzais72Zmanis());\n  }\n  /**\r\n   * This method returns the time of <em>plag hamincha</em> based on the opinion that the day starts at\r\n   * <em>{@link #getAlos16Point1Degrees() alos 16.1&deg;}</em> and ends at\r\n   * <em>{@link #getTzais16Point1Degrees() tzais 16.1&deg;}</em>. This is calculated as 10.75 hours <em>zmaniyos</em>\r\n   * after {@link #getAlos16Point1Degrees() dawn}. The formula used is\r\n   * 10.75 * {@link #getShaahZmanis16Point1Degrees()} after {@link #getAlos16Point1Degrees()}.\r\n   *\r\n   * @return the <code>Date</code> of the time of <em>plag hamincha</em>. If the calculation can't be computed such as\r\n   *         northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle where\r\n   *         the sun may not reach low enough below the horizon for this calculation, a null will be returned. See\r\n   *         detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   *\r\n   * @see #getShaahZmanis16Point1Degrees()\r\n   */\n\n\n  getPlagHamincha16Point1Degrees() {\n    return this.getPlagHamincha(this.getAlos16Point1Degrees(), this.getTzais16Point1Degrees());\n  }\n  /**\r\n   * This method returns the time of <em>plag hamincha</em> based on the opinion that the day starts at\r\n   * <em>{@link #getAlos19Point8Degrees() alos 19.8&deg;}</em> and ends at\r\n   * <em>{@link #getTzais19Point8Degrees() tzais 19.8&deg;}</em>. This is calculated as 10.75 hours <em>zmaniyos</em>\r\n   * after {@link #getAlos19Point8Degrees() dawn}. The formula used is\r\n   * 10.75 * {@link #getShaahZmanis19Point8Degrees()} after {@link #getAlos19Point8Degrees()}.\r\n   *\r\n   * @return the <code>Date</code> of the time of <em>plag hamincha</em>. If the calculation can't be computed such as\r\n   *         northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle where\r\n   *         the sun may not reach low enough below the horizon for this calculation, a null will be returned. See\r\n   *         detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   *\r\n   * @see #getShaahZmanis19Point8Degrees()\r\n   */\n\n\n  getPlagHamincha19Point8Degrees() {\n    return this.getPlagHamincha(this.getAlos19Point8Degrees(), this.getTzais19Point8Degrees());\n  }\n  /**\r\n   * This method returns the time of <em>plag hamincha</em> based on the opinion that the day starts at\r\n   * <em>{@link #getAlos26Degrees() alos 26&deg;}</em> and ends at <em>{@link #getTzais26Degrees() tzais 26&deg;}</em>\r\n   * . This is calculated as 10.75 hours <em>zmaniyos</em> after {@link #getAlos26Degrees() dawn}. The formula used is\r\n   * 10.75 * {@link #getShaahZmanis26Degrees()} after {@link #getAlos26Degrees()}.\r\n   *\r\n   * @return the <code>Date</code> of the time of <em>plag hamincha</em>. If the calculation can't be computed such as\r\n   *         northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle where\r\n   *         the sun may not reach low enough below the horizon for this calculation, a null will be returned. See\r\n   *         detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   *\r\n   * @see #getShaahZmanis26Degrees()\r\n   */\n\n\n  getPlagHamincha26Degrees() {\n    return this.getPlagHamincha(this.getAlos26Degrees(), this.getTzais26Degrees());\n  }\n  /**\r\n   * This method returns the time of <em>plag hamincha</em> based on the opinion that the day starts at\r\n   * <em>{@link #getAlos18Degrees() alos 18&deg;}</em> and ends at <em>{@link #getTzais18Degrees() tzais 18&deg;}</em>\r\n   * . This is calculated as 10.75 hours <em>zmaniyos</em> after {@link #getAlos18Degrees() dawn}. The formula used is\r\n   * 10.75 * {@link #getShaahZmanis18Degrees()} after {@link #getAlos18Degrees()}.\r\n   *\r\n   * @return the <code>Date</code> of the time of <em>plag hamincha</em>. If the calculation can't be computed such as\r\n   *         northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle where\r\n   *         the sun may not reach low enough below the horizon for this calculation, a null will be returned. See\r\n   *         detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   *\r\n   * @see #getShaahZmanis18Degrees()\r\n   */\n\n\n  getPlagHamincha18Degrees() {\n    return this.getPlagHamincha(this.getAlos18Degrees(), this.getTzais18Degrees());\n  }\n  /**\r\n   * This method returns the time of <em>plag hamincha</em> based on the opinion that the day starts at\r\n   * <em>{@link #getAlos16Point1Degrees() alos 16.1&deg;}</em> and ends at {@link #getSunset() sunset}. 10.75 shaos\r\n   * zmaniyos are calculated based on this day and added to {@link #getAlos16Point1Degrees() alos} to reach this time.\r\n   * This time is 10.75 <em>shaos zmaniyos</em> (temporal hours) after {@link #getAlos16Point1Degrees() dawn} based on\r\n   * the opinion that the day is calculated from a {@link #getAlos16Point1Degrees() dawn} of 16.1 degrees before\r\n   * sunrise to {@link #getSeaLevelSunset() sea level sunset}. This returns the time of 10.75 * the calculated\r\n   * <em>shaah zmanis</em> after {@link #getAlos16Point1Degrees() dawn}.\r\n   *\r\n   * @return the <code>Date</code> of the plag. If the calculation can't be computed such as northern and southern\r\n   *         locations even south of the Arctic Circle and north of the Antarctic Circle where the sun may not reach\r\n   *         low enough below the horizon for this calculation, a null will be returned. See detailed explanation on\r\n   *         top of the {@link AstronomicalCalendar} documentation.\r\n   *\r\n   * @see #getAlos16Point1Degrees()\r\n   * @see #getSeaLevelSunset()\r\n   */\n\n\n  getPlagAlosToSunset() {\n    return this.getPlagHamincha(this.getAlos16Point1Degrees(), this.getElevationAdjustedSunset());\n  }\n  /**\r\n   * This method returns the time of <em>plag hamincha</em> based on the opinion that the day starts at\r\n   * <em>{@link #getAlos16Point1Degrees() alos 16.1&deg;}</em> and ends at {@link #getTzaisGeonim7Point083Degrees()\r\n     * tzais}. 10.75 shaos zmaniyos are calculated based on this day and added to {@link #getAlos16Point1Degrees() alos}\r\n   * to reach this time. This time is 10.75 <em>shaos zmaniyos</em> (temporal hours) after\r\n   * {@link #getAlos16Point1Degrees() dawn} based on the opinion that the day is calculated from a\r\n   * {@link #getAlos16Point1Degrees() dawn} of 16.1 degrees before sunrise to\r\n   * {@link #getTzaisGeonim7Point083Degrees() tzais} . This returns the time of 10.75 * the calculated\r\n   * <em>shaah zmanis</em> after {@link #getAlos16Point1Degrees() dawn}.\r\n   *\r\n   * @return the <code>Date</code> of the plag. If the calculation can't be computed such as northern and southern\r\n   *         locations even south of the Arctic Circle and north of the Antarctic Circle where the sun may not reach\r\n   *         low enough below the horizon for this calculation, a null will be returned. See detailed explanation on\r\n   *         top of the {@link AstronomicalCalendar} documentation.\r\n   *\r\n   * @see #getAlos16Point1Degrees()\r\n   * @see #getTzaisGeonim7Point083Degrees()\r\n   */\n\n\n  getPlagAlos16Point1ToTzaisGeonim7Point083Degrees() {\n    return this.getPlagHamincha(this.getAlos16Point1Degrees(), this.getTzaisGeonim7Point083Degrees());\n  }\n  /**\r\n   * Method to return <em>Bain Hashmashos</em> of <em>Rabbeinu Tam</em> calculated when the sun is\r\n   * {@link #ZENITH_13_POINT_24 13.24&deg;} below the western {@link #GEOMETRIC_ZENITH geometric horizon} (90&deg;)\r\n   * after sunset. This calculation is based on the same calculation of {@link #getBainHasmashosRT58Point5Minutes()\r\n   * Bain Hashmashos Rabbeinu Tam 58.5 minutes} but uses a degree based calculation instead of 58.5 exact minutes. This\r\n   * calculation is based on the position of the sun 58.5 minutes after sunset in Jerusalem during the equinox (on\r\n   * March 16, about 4 days before the astronomical equinox, the day that a solar hour is 60 minutes) which calculates\r\n   * to 13.24&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}.\r\n   * NOTE: As per Yisrael Vehazmanim Vol. III page 1028 No 50, a dip of slightly less than 13&deg; should be used.\r\n   * Calculations show that the proper dip to be 13.2456&deg; (truncated to 13.24 that provides about 1.5 second\r\n   * earlier (<em>lechumra</em>) time) below the horizon at that time. This makes a difference of 1 minute and 10\r\n   * seconds in Jerusalem during the Equinox, and 1 minute 29 seconds during the solstice as compared to the proper\r\n   * 13.24&deg; versus 13&deg;. For NY during the solstice, the difference is 1 minute 56 seconds.\r\n   *\r\n   * @return the <code>Date</code> of the sun being 13.24&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}\r\n   *         (90&deg;). If the calculation can't be computed such as northern and southern locations even south of the\r\n   *         Arctic Circle and north of the Antarctic Circle where the sun may not reach low enough below the horizon\r\n   *         for this calculation, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   *\r\n   * @see #ZENITH_13_POINT_24\r\n   * @see #getBainHasmashosRT58Point5Minutes()\r\n   */\n\n\n  getBainHasmashosRT13Point24Degrees() {\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_13_POINT_24);\n  }\n  /**\r\n   * This method returns <em>Bain Hashmashos</em> of <em>Rabbeinu Tam</em> calculated as a 58.5 minute offset after\r\n   * sunset. <em>Bain hashmashos</em> is 3/4 of a <em>Mil</em> before <em>tzais</em> or 3 1/4 <em>Mil</em> after\r\n   * sunset. With a <em>Mil</em> calculated as 18 minutes, 3.25 * 18 = 58.5 minutes.\r\n   *\r\n   * @return the <code>Date</code> of 58.5 minutes after sunset. If the calculation can't be computed such as in the\r\n   *         Arctic Circle where there is at least one day a year where the sun does not rise, and one where it does\r\n   *         not set, a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   *\r\n   */\n\n\n  getBainHasmashosRT58Point5Minutes() {\n    return ComplexZmanimCalendar.getTimeOffset(this.getElevationAdjustedSunset(), 58.5 * ComplexZmanimCalendar.MINUTE_MILLIS);\n  }\n  /**\r\n   * This method returns the time of <em>bain hashmashos</em> based on the calculation of 13.5 minutes (3/4 of an 18\r\n   * minute <em>Mil</em> before shkiah calculated as {@link #getTzaisGeonim7Point083Degrees() 7.083&deg;}.\r\n   *\r\n   * @return the <code>Date</code> of the <em>bain hashmashos</em> of <em>Rabbeinu Tam</em> in this calculation. If the\r\n   *         calculation can't be computed such as northern and southern locations even south of the Arctic Circle and\r\n   *         north of the Antarctic Circle where the sun may not reach low enough below the horizon for this\r\n   *         calculation, a null will be returnegetBainHasmashosRT2Starsd. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   * @see #getTzaisGeonim7Point083Degrees()\r\n   */\n\n\n  getBainHasmashosRT13Point5MinutesBefore7Point083Degrees() {\n    return ComplexZmanimCalendar.getTimeOffset(this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_7_POINT_083), -13.5 * ComplexZmanimCalendar.MINUTE_MILLIS);\n  }\n  /**\r\n   * This method returns <em>bain hashmashos</em> of <em>Rabbeinu Tam</em> calculated according to the opinion of the\r\n   * <em>Divrei Yosef</em> (see Yisrael Vehazmanim) calculated 5/18th (27.77%) of the time between <em>alos</em>\r\n   * (calculated as 19.8&deg; before sunrise) and sunrise. This is added to sunset to arrive at the time for\r\n   * <em>bain hashmashos</em> of <em>Rabbeinu Tam</em>).\r\n   *\r\n   * @return the <code>Date</code> of <em>bain hashmashos</em> of <em>Rabbeinu Tam</em> for this calculation. If the\r\n   *         calculation can't be computed such as northern and southern locations even south of the Arctic Circle and\r\n   *         north of the Antarctic Circle where the sun may not reach low enough below the horizon for this\r\n   *         calculation, a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   */\n\n\n  getBainHasmashosRT2Stars() {\n    const alos19Point8 = this.getAlos19Point8Degrees();\n    const sunrise = this.getElevationAdjustedSunrise();\n\n    if (alos19Point8 === null || sunrise === null) {\n      return null;\n    }\n\n    return ComplexZmanimCalendar.getTimeOffset(this.getElevationAdjustedSunset(), (sunrise.valueOf() - alos19Point8.valueOf()) * (5 / 18));\n  }\n  /**\r\n   * This method returns the <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> calculated at the\r\n   * sun's position at {@link #ZENITH_3_POINT_7 3.7&deg;} below the western horizon.\r\n   *\r\n   * @return the <code>Date</code> representing the time when the sun is 3.7&deg; below sea level.\r\n   * @see #ZENITH_3_POINT_7\r\n   */\n\n\n  getTzaisGeonim3Point7Degrees() {\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_3_POINT_7);\n  }\n  /**\r\n   * This method returns the <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> calculated at the\r\n   * sun's position at {@link #ZENITH_3_POINT_8 3.8&deg;} below the western horizon.\r\n   *\r\n   * @return the <code>Date</code> representing the time when the sun is 3.8&deg; below sea level.\r\n   * @see #ZENITH_3_POINT_8\r\n   */\n\n\n  getTzaisGeonim3Point8Degrees() {\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_3_POINT_8);\n  }\n  /**\r\n   * This method returns the <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> calculated at the\r\n   * sun's position at {@link #ZENITH_5_POINT_95 5.95&deg;} below the western horizon.\r\n   *\r\n   * @return the <code>Date</code> representing the time when the sun is 5.95&deg; below sea level. If the calculation\r\n   *         can't be computed such as northern and southern locations even south of the Arctic Circle and north of\r\n   *         the Antarctic Circle where the sun may not reach low enough below the horizon for this calculation, a\r\n   *         null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * @see #ZENITH_5_POINT_95\r\n   */\n\n\n  getTzaisGeonim5Point95Degrees() {\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_5_POINT_95);\n  }\n  /**\r\n   * This method returns the <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> calculated as 3/4\r\n   * of a <a href= \"http://en.wikipedia.org/wiki/Biblical_and_Talmudic_units_of_measurement\" >Mil</a> based on an 18\r\n   * minute Mil, or 13.5 minutes. It is the sun's position at {@link #ZENITH_3_POINT_65 3.65&deg;} below the western\r\n   * horizon. This is a very early <em>zman</em> and should not be relied on without Rabbinical guidance.\r\n   *\r\n   * @return the <code>Date</code> representing the time when the sun is 3.65&deg; below sea level. If the calculation\r\n   *         can't be computed such as northern and southern locations even south of the Arctic Circle and north of\r\n   *         the Antarctic Circle where the sun may not reach low enough below the horizon for this calculation, a\r\n   *         null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * @see #ZENITH_3_POINT_65\r\n   */\n\n\n  getTzaisGeonim3Point65Degrees() {\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_3_POINT_65);\n  }\n  /**\r\n   * This method returns the <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> calculated as 3/4\r\n   * of a <a href= \"http://en.wikipedia.org/wiki/Biblical_and_Talmudic_units_of_measurement\" >Mil</a> based on an 18\r\n   * minute Mil, or 13.5 minutes. It is the sun's position at {@link #ZENITH_3_POINT_676 3.676&deg;} below the western\r\n   * horizon based on the calculations of Stanley Fishkind. This is a very early <em>zman</em> and should not be\r\n   * relied on without Rabbinical guidance.\r\n   *\r\n   * @return the <code>Date</code> representing the time when the sun is 3.676&deg; below sea level. If the\r\n   *         calculation can't be computed such as northern and southern locations even south of the Arctic Circle and\r\n   *         north of the Antarctic Circle where the sun may not reach low enough below the horizon for this\r\n   *         calculation, a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   * @see #ZENITH_3_POINT_676\r\n   */\n\n\n  getTzaisGeonim3Point676Degrees() {\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_3_POINT_676);\n  }\n  /**\r\n   * This method returns the <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> calculated as 3/4\r\n   * of a <a href= \"http://en.wikipedia.org/wiki/Biblical_and_Talmudic_units_of_measurement\" >Mil</a> based on a 24\r\n   * minute Mil, or 18 minutes. It is the sun's position at {@link #ZENITH_4_POINT_61 4.61&deg;} below the western\r\n   * horizon. This is a very early <em>zman</em> and should not be relied on without Rabbinical guidance.\r\n   *\r\n   * @return the <code>Date</code> representing the time when the sun is 4.61&deg; below sea level. If the calculation\r\n   *         can't be computed such as northern and southern locations even south of the Arctic Circle and north of\r\n   *         the Antarctic Circle where the sun may not reach low enough below the horizon for this calculation, a\r\n   *         null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * @see #ZENITH_4_POINT_61\r\n   */\n\n\n  getTzaisGeonim4Point61Degrees() {\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_4_POINT_61);\n  }\n  /**\r\n   * This method returns the <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> calculated as 3/4\r\n   * of a <a href= \"http://en.wikipedia.org/wiki/Biblical_and_Talmudic_units_of_measurement\" >Mil</a>, based on a 22.5\r\n   * minute Mil, or 16 7/8 minutes. It is the sun's position at {@link #ZENITH_4_POINT_37 4.37&deg;} below the western\r\n   * horizon. This is a very early <em>zman</em> and should not be relied on without Rabbinical guidance.\r\n   *\r\n   * @return the <code>Date</code> representing the time when the sun is 4.37&deg; below sea level. If the calculation\r\n   *         can't be computed such as northern and southern locations even south of the Arctic Circle and north of\r\n   *         the Antarctic Circle where the sun may not reach low enough below the horizon for this calculation, a\r\n   *         null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * @see #ZENITH_4_POINT_37\r\n   */\n\n\n  getTzaisGeonim4Point37Degrees() {\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_4_POINT_37);\n  }\n  /**\r\n   * This method returns the <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> calculated as 3/4\r\n   * of a 24 minute <em><a href= \"http://en.wikipedia.org/wiki/Biblical_and_Talmudic_units_of_measurement\" >Mil</a></em>,\r\n   * based on a <em>Mil</em> being 24 minutes, and is calculated as 18 + 2 + 4 for a total of 24 minutes. It is the\r\n   * sun's position at {@link #ZENITH_5_POINT_88 5.88&deg;} below the western horizon. This is a very early\r\n   * <em>zman</em> and should not be relied on without Rabbinical guidance.\r\n   *\r\n   * @todo Additional detailed documentation needed.\r\n   *\r\n   * @return the <code>Date</code> representing the time when the sun is 5.88&deg; below sea level. If the calculation\r\n   *         can't be computed such as northern and southern locations even south of the Arctic Circle and north of\r\n   *         the Antarctic Circle where the sun may not reach low enough below the horizon for this calculation, a\r\n   *         null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * @see #ZENITH_5_POINT_88\r\n   */\n\n\n  getTzaisGeonim5Point88Degrees() {\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_5_POINT_88);\n  }\n  /**\r\n   * This method returns the <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> calculated as 3/4\r\n   * of a <a href= \"http://en.wikipedia.org/wiki/Biblical_and_Talmudic_units_of_measurement\" >Mil</a> based on the\r\n   * sun's position at {@link #ZENITH_4_POINT_8 4.8&deg;} below the western horizon. This is based on Rabbi Leo Levi's\r\n   * calculations. This is the This is a very early <em>zman</em> and should not be relied on without Rabbinical guidance.\r\n   * @todo Additional documentation needed.\r\n   *\r\n   * @return the <code>Date</code> representing the time when the sun is 4.8&deg; below sea level. If the calculation\r\n   *         can't be computed such as northern and southern locations even south of the Arctic Circle and north of\r\n   *         the Antarctic Circle where the sun may not reach low enough below the horizon for this calculation, a\r\n   *         null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * @see #ZENITH_4_POINT_8\r\n   */\n\n\n  getTzaisGeonim4Point8Degrees() {\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_4_POINT_8);\n  }\n  /**\r\n   * This method returns the <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> as calculated by\r\n   * <a href=\"https://en.wikipedia.org/wiki/Yechiel_Michel_Tucazinsky\">Rabbi Yechiel Michel Tucazinsky</a>. It is\r\n   * based on of the position of the sun no later than {@link #getTzaisGeonim6Point45Degrees() 31 minutes} after sunset\r\n   * in Jerusalem, and at the height of the summer solstice, this zman is 28 minutes after <em>shkiah</em>. This\r\n   * computes to 6.45&deg; below the western horizon.\r\n   * @todo Additional documentation details needed.\r\n   *\r\n   * @return the <code>Date</code> representing the time when the sun is 6.45&deg; below sea level. If the\r\n   *         calculation can't be computed such as northern and southern locations even south of the Arctic Circle and\r\n   *         north of the Antarctic Circle where the sun may not reach low enough below the horizon for this\r\n   *         calculation, a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   * @see #ZENITH_6_POINT_45\r\n   */\n\n\n  getTzaisGeonim6Point45Degrees() {\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_6_POINT_45);\n  }\n  /**\r\n   * This method returns the <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> calculated as 30\r\n   * minutes after sunset during the equinox (on March 16, about 4 days before the astronomical equinox, the day that\r\n   * a solar hour is 60 minutes) in Yerushalayim. The sun's position at this time computes to\r\n   * {@link #ZENITH_7_POINT_083 7.083&deg; (or 7&deg; 5\\u2032} below the western horizon. Note that this is a common\r\n   * and rounded number. Computation shows the accurate number is 7.2&deg;\r\n   *\r\n   * @return the <code>Date</code> representing the time when the sun is 7.083&deg; below sea level. If the\r\n   *         calculation can't be computed such as northern and southern locations even south of the Arctic Circle and\r\n   *         north of the Antarctic Circle where the sun may not reach low enough below the horizon for this\r\n   *         calculation, a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   * @see #ZENITH_7_POINT_083\r\n   */\n\n\n  getTzaisGeonim7Point083Degrees() {\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_7_POINT_083);\n  }\n  /**\r\n   * This method returns <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> calculated as 45 minutes\r\n   * after sunset during the summer solstice in New York, when the <em>neshef</em> (twilight) is the longest. The sun's\r\n   * position at this time computes to {@link #ZENITH_7_POINT_67 7.75&deg;} below the western horizon. See <a href=\r\n   * \"http://www.hebrewbooks.org/pdfpager.aspx?req=921&amp;pgnum=149\">Igros Moshe Even Haezer 4, Ch. 4</a> (regarding\r\n   * tzais for <em>krias Shema</em>). It is also mentioned in Rabbi Heber's <a href=\r\n   * \"http://www.hebrewbooks.org/53000\">Shaarei Zmanim</a> on in\r\n   * <a href=\"http://www.hebrewbooks.org/pdfpager.aspx?req=53055&amp;pgnum=101\">chapter 10 (page 87)</a> and\r\n   * <a href=\"http://www.hebrewbooks.org/pdfpager.aspx?req=53055&amp;pgnum=122\">chapter 12 (page 108)</a>. Also see the\r\n   * time of 45 minutes in <a href=\"https://en.wikipedia.org/wiki/Simcha_Bunim_Cohen\">Rabbi Simcha Bunim Cohen's</a> <a\r\n   * href=\"https://www.worldcat.org/oclc/179728985\">The radiance of Shabbos</a> as the earliest zman for New York. This\r\n   * zman is also listed in the <a href=\"http://www.hebrewbooks.org/pdfpager.aspx?req=1927&amp;pgnum=90\">Divrei Shalom\r\n   * Vol. III, chapter 75</a>, and <a href=\"http://www.hebrewbooks.org/pdfpager.aspx?req=892&amp;pgnum=431\">Bais Av\"i Vol.\r\n   * III, chapter 117</a>. This zman is also listed in the Divrei Shalom etc. chapter 177. Since this\r\n   * zman depends on the level of light, Rabbi Yaakov Shakow presented this degree based calculation to Rabbi <a href=\r\n   * \"https://en.wikipedia.org/wiki/Shmuel_Kamenetsky\">Rabbi Shmuel Kamenetsky</a> who agreed to it.\r\n   * @todo add hyperlinks to source of Divrei Shalom.\r\n   *\r\n   * @return the <code>Date</code> representing the time when the sun is 7.67&deg; below sea level. If the\r\n   *         calculation can't be computed such as northern and southern locations even south of the Arctic Circle and\r\n   *         north of the Antarctic Circle where the sun may not reach low enough below the horizon for this\r\n   *         calculation, a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   * @see #ZENITH_7_POINT_67\r\n   */\n\n\n  getTzaisGeonim7Point67Degrees() {\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_7_POINT_67);\n  }\n  /**\r\n   * This method returns the <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> calculated at the\r\n   * sun's position at {@link #ZENITH_8_POINT_5 8.5&deg;} below the western horizon.\r\n   *\r\n   * @return the <code>Date</code> representing the time when the sun is 8.5&deg; below sea level. If the calculation\r\n   *         can't be computed such as northern and southern locations even south of the Arctic Circle and north of\r\n   *         the Antarctic Circle where the sun may not reach low enough below the horizon for this calculation, a\r\n   *         null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * @see #ZENITH_8_POINT_5\r\n   */\n\n\n  getTzaisGeonim8Point5Degrees() {\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_8_POINT_5);\n  }\n  /**\r\n   * This method returns the <em>tzais</em> (nightfall) based on the calculations used in the <a href=\r\n   * \"http://www.worldcat.org/oclc/243303103\">Luach Itim Lebinah</a> as the stringent time for tzais.  It is calculated\r\n   * at the sun's position at {@link #ZENITH_9_POINT_3 9.3&deg;} below the western horizon.\r\n   *\r\n   * @return the <code>Date</code> representing the time when the sun is 9.3&deg; below sea level. If the calculation\r\n   *         can't be computed such as northern and southern locations even south of the Arctic Circle and north of\r\n   *         the Antarctic Circle where the sun may not reach low enough below the horizon for this calculation, a\r\n   *         null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   */\n\n\n  getTzaisGeonim9Point3Degrees() {\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_9_POINT_3);\n  }\n  /**\r\n   * This method returns the <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> calculated as 60\r\n   * minutes after sunset during the equinox (on March 16, about 4 days before the astronomical equinox, the day that\r\n   * a solar hour is 60 minutes) in New York. The sun's position at this time computes to\r\n   * {@link #ZENITH_9_POINT_75 9.75&deg;} below the western horizon. This is the opinion of <a href=\r\n   * \"https://en.wikipedia.org/wiki/Yosef_Eliyahu_Henkin\">Rabbi Eliyahu Henkin</a>.  This also follows the opinion of\r\n   * <a href=\"https://en.wikipedia.org/wiki/Shmuel_Kamenetsky\">Rabbi Shmuel Kamenetsky</a>. Rabbi Yaakov Shakow presented\r\n   * these degree based times to Rabbi Shmuel Kamenetsky who agreed to them.\r\n   *\r\n   * @return the <code>Date</code> representing the time when the sun is 9.75&deg; below sea level. If the calculation\r\n   *         can't be computed such as northern and southern locations even south of the Arctic Circle and north of\r\n   *         the Antarctic Circle where the sun may not reach low enough below the horizon for this calculation, a\r\n   *         null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   *\r\n   * @see #getTzais60()\r\n   */\n\n\n  getTzaisGeonim9Point75Degrees() {\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_9_POINT_75);\n  }\n  /**\r\n   * This method returns the <em>tzais</em> (nightfall) based on the opinion of the <em><a href=\r\n   * \"https://en.wikipedia.org/wiki/Yair_Bacharach\">Chavas Yair</a></em> and <em>Divrei Malkiel</em> that the time\r\n   * to walk the distance of a <em>Mil</em> is 15 minutes for a total of 60 minutes for 4 <em>Mil</em> after\r\n   * {@link #getSeaLevelSunset() sea level sunset}.\r\n   *\r\n   * @return the <code>Date</code> representing 60 minutes after sea level sunset. If the calculation can't be\r\n   *         computed such as in the Arctic Circle where there is at least one day a year where the sun does not rise,\r\n   *         and one where it does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * @see #getAlos60()\r\n   */\n\n\n  getTzais60() {\n    return ComplexZmanimCalendar.getTimeOffset(this.getElevationAdjustedSunset(), 60 * ComplexZmanimCalendar.MINUTE_MILLIS);\n  }\n  /**\r\n   * This method returns <em>tzais</em> usually calculated as 40 minutes (configurable to any offset via\r\n   * {@link #setAteretTorahSunsetOffset(double)}) after sunset. Please note that <em>Chacham Yosef Harari-Raful</em>\r\n   * of <em>Yeshivat Ateret Torah</em> who uses this time, does so only for calculating various other\r\n   * <em>zmanai hayom</em> such as <em>Sof Zman Krias Shema</em> and <em>Plag Hamincha</em>. His calendars do not\r\n   * publish a <em>zman</em> for <em>Tzais</em>. It should also be noted that <em>Chacham Harari-Raful</em> provided a\r\n   * 25 minute <em>zman</em> for Israel. This API uses 40 minutes year round in any place on the globe by default.\r\n   * This offset can be changed by calling {@link #setAteretTorahSunsetOffset(double)}.\r\n   *\r\n   * @return the <code>Date</code> representing 40 minutes (configurable via {@link #setAteretTorahSunsetOffset})\r\n   *         after sea level sunset. If the calculation can't be computed such as in the Arctic Circle where there is\r\n   *         at least one day a year where the sun does not rise, and one where it does not set, a null will be\r\n   *         returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * @see #getAteretTorahSunsetOffset()\r\n   * @see #setAteretTorahSunsetOffset(double)\r\n   */\n\n\n  getTzaisAteretTorah() {\n    return ComplexZmanimCalendar.getTimeOffset(this.getElevationAdjustedSunset(), this.getAteretTorahSunsetOffset() * ComplexZmanimCalendar.MINUTE_MILLIS);\n  }\n  /**\r\n   * Returns the offset in minutes after sunset used to calculate sunset for the Ateret Torah zmanim. The default\r\n   * value is 40 minutes. This affects most zmanim, since almost all zmanim use sunset as part of their calculation.\r\n   *\r\n   * @return the number of minutes after sunset for <em>Tzait</em>.\r\n   * @see #setAteretTorahSunsetOffset(double)\r\n   */\n\n\n  getAteretTorahSunsetOffset() {\n    return this.ateretTorahSunsetOffset;\n  }\n  /**\r\n   * Allows setting the offset in minutes after sunset for the Ateret Torah zmanim. The default if unset is 40\r\n   * minutes. Chacham Yosef Harari-Raful of Yeshivat Ateret Torah uses 40 minutes globally with the exception of\r\n   * Israel where a 25 minute offset is used. This 40 minute (or any other) offset can be overridden by this method.\r\n   * This offset impacts all Ateret Torah zmanim.\r\n   *\r\n   * @param ateretTorahSunsetOffset\r\n   *            the number of minutes after sunset to use as an offset for the Ateret Torah <em>tzais</em>\r\n   * @see #getAteretTorahSunsetOffset()\r\n   */\n\n\n  setAteretTorahSunsetOffset(ateretTorahSunsetOffset) {\n    this.ateretTorahSunsetOffset = ateretTorahSunsetOffset;\n  }\n  /**\r\n   * This method returns the latest <em>zman krias shema</em> (time to recite Shema in the morning) based on the\r\n   * calculation of Chacham Yosef Harari-Raful of Yeshivat Ateret Torah, that the day starts\r\n   * {@link #getAlos72Zmanis() 1/10th of the day} before sunrise and is usually calculated as ending\r\n   * {@link #getTzaisAteretTorah() 40 minutes after sunset} (configurable to any offset via\r\n   * {@link #setAteretTorahSunsetOffset(double)}). <em>shaos zmaniyos</em> are calculated based on this day and added\r\n   * to {@link #getAlos72Zmanis() alos} to reach this time. This time is 3\r\n   * <em> {@link #getShaahZmanisAteretTorah() shaos zmaniyos}</em> (temporal hours) after\r\n   * <em>{@link #getAlos72Zmanis()\r\n     * alos 72 zmaniyos}</em>. <b>Note: </b> Based on this calculation <em>chatzos</em> will not be at midday.\r\n   *\r\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em> based on this calculation. If the\r\n   *         calculation can't be computed such as in the Arctic Circle where there is at least one day a year where\r\n   *         the sun does not rise, and one where it does not set, a null will be returned. See detailed explanation\r\n   *         on top of the {@link AstronomicalCalendar} documentation.\r\n   * @see #getAlos72Zmanis()\r\n   * @see #getTzaisAteretTorah()\r\n   * @see #getAteretTorahSunsetOffset()\r\n   * @see #setAteretTorahSunsetOffset(double)\r\n   * @see #getShaahZmanisAteretTorah()\r\n   */\n\n\n  getSofZmanShmaAteretTorah() {\n    return this.getSofZmanShma(this.getAlos72Zmanis(), this.getTzaisAteretTorah());\n  }\n  /**\r\n   * This method returns the latest <em>zman tfila</em> (time to recite the morning prayers) based on the calculation\r\n   * of Chacham Yosef Harari-Raful of Yeshivat Ateret Torah, that the day starts {@link #getAlos72Zmanis() 1/10th of\r\n     * the day} before sunrise and is usually calculated as ending {@link #getTzaisAteretTorah() 40 minutes after\r\n     * sunset} (configurable to any offset via {@link #setAteretTorahSunsetOffset(double)}). <em>shaos zmaniyos</em> are\r\n   * calculated based on this day and added to {@link #getAlos72Zmanis() alos} to reach this time. This time is 4 *\r\n   * <em>{@link #getShaahZmanisAteretTorah() shaos zmaniyos}</em> (temporal hours) after\r\n   * <em>{@link #getAlos72Zmanis() alos 72 zmaniyos}</em>.\r\n   * <b>Note: </b> Based on this calculation <em>chatzos</em> will not be at midday.\r\n   *\r\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em> based on this calculation. If the\r\n   *         calculation can't be computed such as in the Arctic Circle where there is at least one day a year where\r\n   *         the sun does not rise, and one where it does not set, a null will be returned. See detailed explanation\r\n   *         on top of the {@link AstronomicalCalendar} documentation.\r\n   * @see #getAlos72Zmanis()\r\n   * @see #getTzaisAteretTorah()\r\n   * @see #getShaahZmanisAteretTorah()\r\n   * @see #setAteretTorahSunsetOffset(double)\r\n   */\n\n\n  getSofZmanTfilahAteretTorah() {\n    return this.getSofZmanTfila(this.getAlos72Zmanis(), this.getTzaisAteretTorah());\n  }\n  /**\r\n   * This method returns the time of <em>mincha gedola</em> based on the calculation of <em>Chacham Yosef\r\n   * Harari-Raful</em> of <em>Yeshivat Ateret Torah</em>, that the day starts {@link #getAlos72Zmanis()\r\n     * 1/10th of the day} before sunrise and is usually calculated as ending\r\n   * {@link #getTzaisAteretTorah() 40 minutes after sunset} (configurable to any offset via\r\n   * {@link #setAteretTorahSunsetOffset(double)}). This is the preferred earliest time to pray <em>mincha</em>\r\n   * according to the opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Maimonides\">Rambam</a></em> and others.\r\n   * For more information on this see the documentation on <em>{@link #getMinchaGedola() mincha gedola}</em>. This is\r\n   * calculated as 6.5 {@link #getShaahZmanisAteretTorah()  solar hours} after alos. The calculation used is 6.5 *\r\n   * {@link #getShaahZmanisAteretTorah()} after <em>{@link #getAlos72Zmanis() alos}</em>.\r\n   *\r\n   * @see #getAlos72Zmanis()\r\n   * @see #getTzaisAteretTorah()\r\n   * @see #getShaahZmanisAteretTorah()\r\n   * @see #getMinchaGedola()\r\n   * @see #getMinchaKetanaAteretTorah()\r\n   * @see ZmanimCalendar#getMinchaGedola()\r\n   * @see #getAteretTorahSunsetOffset()\r\n   * @see #setAteretTorahSunsetOffset(double)\r\n   *\r\n   * @return the <code>Date</code> of the time of mincha gedola. If the calculation can't be computed such as in the\r\n   *         Arctic Circle where there is at least one day a year where the sun does not rise, and one where it does\r\n   *         not set, a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   */\n\n\n  getMinchaGedolaAteretTorah() {\n    return this.getMinchaGedola(this.getAlos72Zmanis(), this.getTzaisAteretTorah());\n  }\n  /**\r\n   * This method returns the time of <em>mincha ketana</em> based on the calculation of\r\n   * <em>Chacham Yosef Harari-Raful</em> of <em>Yeshivat Ateret Torah</em>, that the day starts\r\n   * {@link #getAlos72Zmanis() 1/10th of the day} before sunrise and is usually calculated as ending\r\n   * {@link #getTzaisAteretTorah() 40 minutes after sunset} (configurable to any offset via\r\n   * {@link #setAteretTorahSunsetOffset(double)}). This is the preferred earliest time to pray <em>mincha</em>\r\n   * according to the opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Maimonides\">Rambam</a></em> and others.\r\n   * For more information on this see the documentation on <em>{@link #getMinchaGedola() mincha gedola}</em>. This is\r\n   * calculated as 9.5 {@link #getShaahZmanisAteretTorah() solar hours} after {@link #getAlos72Zmanis() alos}. The\r\n   * calculation used is 9.5 * {@link #getShaahZmanisAteretTorah()} after {@link #getAlos72Zmanis() alos}.\r\n   *\r\n   * @see #getAlos72Zmanis()\r\n   * @see #getTzaisAteretTorah()\r\n   * @see #getShaahZmanisAteretTorah()\r\n   * @see #getAteretTorahSunsetOffset()\r\n   * @see #setAteretTorahSunsetOffset(double)\r\n   * @see #getMinchaGedola()\r\n   * @see #getMinchaKetana()\r\n   * @return the <code>Date</code> of the time of mincha ketana. If the calculation can't be computed such as in the\r\n   *         Arctic Circle where there is at least one day a year where the sun does not rise, and one where it does\r\n   *         not set, a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   */\n\n\n  getMinchaKetanaAteretTorah() {\n    return this.getMinchaKetana(this.getAlos72Zmanis(), this.getTzaisAteretTorah());\n  }\n  /**\r\n   * This method returns the time of <em>plag hamincha</em> based on the calculation of Chacham Yosef Harari-Raful of\r\n   * Yeshivat Ateret Torah, that the day starts {@link #getAlos72Zmanis() 1/10th of the day} before sunrise and is\r\n   * usually calculated as ending {@link #getTzaisAteretTorah() 40 minutes after sunset} (configurable to any offset\r\n   * via {@link #setAteretTorahSunsetOffset(double)}). <em>shaos zmaniyos</em> are calculated based on this day and\r\n   * added to {@link #getAlos72Zmanis() alos} to reach this time. This time is 10.75\r\n   * <em>{@link #getShaahZmanisAteretTorah() shaos zmaniyos}</em> (temporal hours) after {@link #getAlos72Zmanis()\r\n     * dawn}.\r\n   *\r\n   * @return the <code>Date</code> of the plag. If the calculation can't be computed such as in the Arctic Circle\r\n   *         where there is at least one day a year where the sun does not rise, and one where it does not set, a null\r\n   *         will be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * @see #getAlos72Zmanis()\r\n   * @see #getTzaisAteretTorah()\r\n   * @see #getShaahZmanisAteretTorah()\r\n   * @see #setAteretTorahSunsetOffset(double)\r\n   * @see #getAteretTorahSunsetOffset()\r\n   */\n\n\n  getPlagHaminchaAteretTorah() {\n    return this.getPlagHamincha(this.getAlos72Zmanis(), this.getTzaisAteretTorah());\n  }\n  /**\r\n   * This method returns the time of <em>misheyakir</em> based on the common calculation of the Syrian community in NY\r\n   * that the <em>alos</em> is a fixed minute offset from day starting {@link #getAlos72Zmanis() 1/10th of the day}\r\n   * before sunrise. The common offsets are 6 minutes (based on the <em>Pri Megadim</em>, but not linked to the\r\n   * calculation of <em>Alos</em> as 1/10th of the day), 8 and 18 minutes (possibly attributed to\r\n   * <em>Chacham Baruch Ben Haim</em>). Since there is no universal accepted offset, the user of this API will have to\r\n   * <em><a href=\"https://en.wikipedia.org/wiki/Baruch_Ben_Haim\">Chacham Baruch Ben Haim</a></em>). Since there is no\r\n   * universal accepted offset, the user of this API will have to specify one. <em>Chacham Yosef Harari-Raful</em> of\r\n   * <em>Yeshivat Ateret Torah</em> does not supply any <em>zman</em> for <em>misheyakir</em> and does not endorse any\r\n   * specific calculation for <em>misheyakir</em>. For that reason, this method is not a public method.\r\n   *\r\n   * @param minutes\r\n   *            the number of minutes after <em>alos</em> calculated as {@link #getAlos72Zmanis() 1/10th of the day}\r\n   * @return the <code>Date</code> of <em>misheyakir</em>. If the calculation can't be computed such as in the Arctic\r\n   *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\r\n   *         a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   * @see #getAlos72Zmanis()\r\n   */\n  // private Date getMesheyakirAteretTorah(double minutes) {\n  // return getTimeOffset(getAlos72Zmanis(), minutes * MINUTE_MILLIS);\n  // }\n\n  /**\r\n   * Method to return <em>tzais</em> (dusk) calculated as 72 minutes zmaniyos, or 1/10th of the day after\r\n   * {@link #getSeaLevelSunset() sea level sunset}.\r\n   *\r\n   * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\r\n   *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\r\n   *         a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   * @see #getAlos72Zmanis()\r\n   */\n\n\n  getTzais72Zmanis() {\n    const shaahZmanis = this.getShaahZmanisGra();\n\n    if (shaahZmanis === Long_MIN_VALUE) {\n      return null;\n    }\n\n    return ComplexZmanimCalendar.getTimeOffset(this.getElevationAdjustedSunset(), shaahZmanis * 1.2);\n  }\n  /**\r\n   * Method to return <em>tzais</em> (dusk) calculated using 90 minutes zmaniyos after {@link #getSeaLevelSunset() sea level sunset}.\r\n   *\r\n   * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\r\n   *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\r\n   *         a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   * @see #getAlos90Zmanis()\r\n   */\n\n\n  getTzais90Zmanis() {\n    const shaahZmanis = this.getShaahZmanisGra();\n\n    if (shaahZmanis === Long_MIN_VALUE) {\n      return null;\n    }\n\n    return ComplexZmanimCalendar.getTimeOffset(this.getElevationAdjustedSunset(), shaahZmanis * 1.5);\n  }\n  /**\r\n   * Method to return <em>tzais</em> (dusk) calculated using 96 minutes zmaniyos after {@link #getSeaLevelSunset() sea level sunset}.\r\n   *\r\n   * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\r\n   *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\r\n   *         a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   * @see #getAlos96Zmanis()\r\n   */\n\n\n  getTzais96Zmanis() {\n    const shaahZmanis = this.getShaahZmanisGra();\n\n    if (shaahZmanis === Long_MIN_VALUE) {\n      return null;\n    }\n\n    return ComplexZmanimCalendar.getTimeOffset(this.getElevationAdjustedSunset(), shaahZmanis * 1.6);\n  }\n  /**\r\n   * Method to return <em>tzais</em> (dusk) calculated as 90 minutes after sea level sunset. This method returns\r\n   * <em>tzais</em> (nightfall) based on the opinion of the Magen Avraham that the time to walk the distance of a\r\n   * <em>Mil</em> according to the <em><a href=\"https://en.wikipedia.org/wiki/Maimonides\">Rambam</a></em>'s opinion\r\n   * is 18 minutes for a total of 90 minutes based on the opinion of <em>Ula</em> who calculated <em>tzais</em> as 5\r\n   * <em>Mil</em> after sea level shkiah (sunset). A similar calculation {@link #getTzais19Point8Degrees()}uses solar\r\n   * position calculations based on this time.\r\n   *\r\n   * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\r\n   *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\r\n   *         a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   * @see #getTzais19Point8Degrees()\r\n   * @see #getAlos90()\r\n   */\n\n\n  getTzais90() {\n    return ComplexZmanimCalendar.getTimeOffset(this.getElevationAdjustedSunset(), 90 * ComplexZmanimCalendar.MINUTE_MILLIS);\n  }\n  /**\r\n   * This method returns <em>tzais</em> (nightfall) based on the opinion of the <em>Magen Avraham</em> that the time\r\n   * to walk the distance of a <em>Mil</em> according to the <em><a href=\"https://en.wikipedia.org/wiki/Maimonides\"\r\n   * >Rambam</a></em>'s opinion is 2/5 of an hour (24 minutes) for a total of 120 minutes based on the opinion of\r\n   * <em>Ula</em> who calculated <em>tzais</em> as 5 <em>Mil</em> after sea level <em>shkiah</em> (sunset). A similar\r\n   * calculation {@link #getTzais26Degrees()} uses temporal calculations based on this time.\r\n   *\r\n   * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\r\n   *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\r\n   *         a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   * @see #getTzais26Degrees()\r\n   * @see #getAlos120()\r\n   */\n\n\n  getTzais120() {\n    return ComplexZmanimCalendar.getTimeOffset(this.getElevationAdjustedSunset(), 120 * ComplexZmanimCalendar.MINUTE_MILLIS);\n  }\n  /**\r\n   * Method to return <em>tzais</em> (dusk) calculated using 120 minutes zmaniyos after {@link #getSeaLevelSunset() sea level sunset}.\r\n   *\r\n   * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\r\n   *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\r\n   *         a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   * @see #getAlos120Zmanis()\r\n   */\n\n\n  getTzais120Zmanis() {\n    const shaahZmanis = this.getShaahZmanisGra();\n\n    if (shaahZmanis === Long_MIN_VALUE) {\n      return null;\n    }\n\n    return ComplexZmanimCalendar.getTimeOffset(this.getElevationAdjustedSunset(), shaahZmanis * 2);\n  }\n  /**\r\n   * For information on how this is calculated see the comments on {@link #getAlos16Point1Degrees()}\r\n   *\r\n   * @return the <code>Date</code> representing the time. If the calculation can't be computed such as northern and\r\n   *         southern locations even south of the Arctic Circle and north of the Antarctic Circle where the sun may\r\n   *         not reach low enough below the horizon for this calculation, a null will be returned. See detailed\r\n   *         explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * @see #getTzais72()\r\n   * @see #getAlos16Point1Degrees() for more information on this calculation.\r\n   */\n\n\n  getTzais16Point1Degrees() {\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_16_POINT_1);\n  }\n  /**\r\n   * For information on how this is calculated see the comments on {@link #getAlos26Degrees()}\r\n   *\r\n   * @return the <code>Date</code> representing the time. If the calculation can't be computed such as northern and\r\n   *         southern locations even south of the Arctic Circle and north of the Antarctic Circle where the sun may\r\n   *         not reach low enough below the horizon for this calculation, a null will be returned. See detailed\r\n   *         explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * @see #getTzais120()\r\n   * @see #getAlos26Degrees()\r\n   */\n\n\n  getTzais26Degrees() {\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_26_DEGREES);\n  }\n  /**\r\n   * For information on how this is calculated see the comments on {@link #getAlos18Degrees()}\r\n   *\r\n   * @return the <code>Date</code> representing the time. If the calculation can't be computed such as northern and\r\n   *         southern locations even south of the Arctic Circle and north of the Antarctic Circle where the sun may\r\n   *         not reach low enough below the horizon for this calculation, a null will be returned. See detailed\r\n   *         explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * @see #getAlos18Degrees()\r\n   */\n\n\n  getTzais18Degrees() {\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ASTRONOMICAL_ZENITH);\n  }\n  /**\r\n   * For information on how this is calculated see the comments on {@link #getAlos19Point8Degrees()}\r\n   *\r\n   * @return the <code>Date</code> representing the time. If the calculation can't be computed such as northern and\r\n   *         southern locations even south of the Arctic Circle and north of the Antarctic Circle where the sun may\r\n   *         not reach low enough below the horizon for this calculation, a null will be returned. See detailed\r\n   *         explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * @see #getTzais90()\r\n   * @see #getAlos19Point8Degrees()\r\n   */\n\n\n  getTzais19Point8Degrees() {\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_19_POINT_8);\n  }\n  /**\r\n   * A method to return <em>tzais</em> (dusk) calculated as 96 minutes after sea level sunset. For information on how\r\n   * this is calculated see the comments on {@link #getAlos96()}.\r\n   *\r\n   * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\r\n   *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\r\n   *         a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   * @see #getAlos96()\r\n   */\n\n\n  getTzais96() {\n    return ComplexZmanimCalendar.getTimeOffset(this.getElevationAdjustedSunset(), 96 * ComplexZmanimCalendar.MINUTE_MILLIS);\n  }\n  /**\r\n   * A method that returns the local time for fixed <em>chatzos</em>. This time is noon and midnight adjusted from\r\n   * standard time to account for the local latitude. The 360&deg; of the globe divided by 24 calculates to 15&deg;\r\n   * per hour with 4 minutes per degree, so at a longitude of 0 , 15, 30 etc... <em>Chatzos</em> in 12:00 noon.\r\n   * Lakewood, N.J., whose longitude is -74.2094, is 0.7906 away from the closest multiple of 15 at -75&deg;. This is\r\n   * multiplied by 4 to yield 3 minutes and 10 seconds for a <em>chatzos</em> of 11:56:50. This method is not tied to\r\n   * the theoretical 15&deg; timezones, but will adjust to the actual timezone and <a\r\n   * href=\"http://en.wikipedia.org/wiki/Daylight_saving_time\">Daylight saving time</a>.\r\n   *\r\n   * @return the Date representing the local <em>chatzos</em>\r\n   * @see GeoLocation#getLocalMeanTimeOffset()\r\n   */\n\n\n  getFixedLocalChatzos() {\n    const geoLocation = this.getGeoLocation();\n    const rawOffsetHours = TimeZone.getRawOffset(geoLocation.getTimeZone()) / ComplexZmanimCalendar.HOUR_MILLIS;\n    return ComplexZmanimCalendar.getTimeOffset(this.getDateFromTime(12 - rawOffsetHours, true), -geoLocation.getLocalMeanTimeOffset());\n  }\n  /**\r\n   * A method that returns the latest <em>zman krias shema</em> (time to recite Shema in the morning) calculated as 3\r\n   * hours before {@link #getFixedLocalChatzos()}.\r\n   *\r\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em> calculated as 3 hours before\r\n   *         {@link #getFixedLocalChatzos()}..\r\n   * @see #getFixedLocalChatzos()\r\n   * @see #getSofZmanTfilaFixedLocal()\r\n   */\n\n\n  getSofZmanShmaFixedLocal() {\n    return ComplexZmanimCalendar.getTimeOffset(this.getFixedLocalChatzos(), -180 * ComplexZmanimCalendar.MINUTE_MILLIS);\n  }\n  /**\r\n   * This method returns the latest <em>zman tfila</em> (time to recite the morning prayers) calculated as 2 hours\r\n   * before {@link #getFixedLocalChatzos()}.\r\n   *\r\n   * @return the <code>Date</code> of the latest <em>zman tfila</em>.\r\n   * @see #getFixedLocalChatzos()\r\n   * @see #getSofZmanShmaFixedLocal()\r\n   */\n\n\n  getSofZmanTfilaFixedLocal() {\n    return ComplexZmanimCalendar.getTimeOffset(this.getFixedLocalChatzos(), -120 * ComplexZmanimCalendar.MINUTE_MILLIS);\n  }\n  /**\r\n   * Returns the Date of the molad based time if it occurs on the current date.Since Kiddush Levana can only be said\r\n   * during the day, there are parameters to limit it to between <em>alos</em> and <em>tzais</em>. If the time occurs\r\n   * between alos and tzais, tzais will be returned\r\n   *\r\n   * @param moladBasedTime\r\n   *            the molad based time such as molad, tchilas and sof zman Kiddush Levana\r\n   * @param alos\r\n   *            optional start of day to limit molad times to the end of the night before or beginning of the next night. Ignored if\r\n   *            either this or tzais are null.\r\n   * @param tzais\r\n   *            optional end of day to limit molad times to the end of the night before or beginning of the next night. Ignored if\r\n   *            either this or alos are null\r\n   * @param techila\r\n   *            is it the start of Kiddush Levana time or the end? If it is start roll it to the next <em>tzais</em>, and and if it\r\n   *            is the end, return the end of the previous night (alos passed in). Ignored if either alos or tzais are null.\r\n   * @return the molad based time. If the zman does not occur during the current date, null will be returned.\r\n   */\n\n\n  getMoladBasedTime(moladBasedTime, alos, tzais, techila) {\n    const lastMidnight = this.getMidnightLastNight();\n    const midnightTonight = this.getMidnightTonight();\n\n    if (!(moladBasedTime < lastMidnight) || moladBasedTime > midnightTonight) {\n      if (alos !== null || tzais !== null) {\n        return techila && !(moladBasedTime < tzais || moladBasedTime > alos) ? tzais : alos;\n      }\n\n      return moladBasedTime;\n    }\n\n    return null;\n  }\n  /**\r\n   * Returns the latest time of Kiddush Levana according to the <a\r\n   * href=\"http://en.wikipedia.org/wiki/Yaakov_ben_Moshe_Levi_Moelin\">Maharil's</a> opinion that it is calculated as\r\n   * halfway between molad and molad. This adds half the 29 days, 12 hours and 793 chalakim time between molad and\r\n   * molad (14 days, 18 hours, 22 minutes and 666 milliseconds) to the month's molad. The sof zman Kiddush Levana\r\n   * will be returned even if it occurs during the day. To limit the time to between <em>tzais</em> and <em>alos</em>,\r\n   * see {@link #getSofZmanKidushLevanaBetweenMoldos(Date, Date)}.\r\n   * This method is available in the current release of the API but may change or be removed in the future since it depends\r\n   * on the still changing {@link JewishCalendar} and related classes, and adds a dependency to the hebrewcalendar package.\r\n   *\r\n   * @param alos\r\n   *            the beginning of the Jewish day. If Kidush Levana occurs during the day (starting at alos and ending\r\n   *            at tzais), the time returned will be alos. If either the alos or tzais parameters are null, no daytime\r\n   *            adjustment will be made.\r\n   * @param tzais\r\n   *            the end of the Jewish day. If Kidush Levana occurs during the day (starting at alos and ending at\r\n   *            tzais), the time returned will be alos. If either the alos or tzais parameters are null, no daytime\r\n   *            adjustment will be made.\r\n   * @return the Date representing the moment halfway between molad and molad. If the time occurs between\r\n   *         <em>alos</em> and <em>tzais</em>, <em>alos</em> will be returned\r\n   * @see #getSofZmanKidushLevanaBetweenMoldos()\r\n   * @see #getSofZmanKidushLevana15Days(Date, Date)\r\n   * @see JewishCalendar#getSofZmanKidushLevanaBetweenMoldos()\r\n   */\n\n\n  getSofZmanKidushLevanaBetweenMoldos(alos = null, tzais = null) {\n    const jewishCalendar = new JewishCalendar(this.getDate()); // Do not calculate for impossible dates, but account for extreme cases. In the extreme case of Rapa Iti in French\n    // Polynesia on Dec 2027 when kiddush Levana 3 days can be said on <em>Rosh Chodesh</em>, the sof zman Kiddush Levana\n    // will be on the 12th of the Teves. In the case of Anadyr, Russia on Jan, 2071, sof zman Kiddush Levana between the\n    // moldos will occur is on the night of 17th of Shevat. See Rabbi Dovid Heber's Shaarei Zmanim chapter 4 (pages 28 and 32).\n\n    if (jewishCalendar.getJewishDayOfMonth() < 11 || jewishCalendar.getJewishDayOfMonth() > 16) {\n      return null;\n    }\n\n    return this.getMoladBasedTime(jewishCalendar.getSofZmanKidushLevanaBetweenMoldos(), alos, tzais, false);\n  }\n  /**\r\n   * Returns the latest time of Kiddush Levana according to the <a\r\n   * href=\"http://en.wikipedia.org/wiki/Yaakov_ben_Moshe_Levi_Moelin\">Maharil's</a> opinion that it is calculated as\r\n   * halfway between molad and molad. This adds half the 29 days, 12 hours and 793 chalakim time between\r\n   * <em>molad</em> and <em>molad</em> (14 days, 18 hours, 22 minutes and 666 milliseconds) to the month's molad. If\r\n   * the time of <em>sof zman Kiddush Levana</em> occurs during the day (between\r\n   * <em>{@link ZmanimCalendar#getAlos72() Alos}</em> and <em>{@link ZmanimCalendar#getTzais72() tzais}</em>) it\r\n   * return the <em>alos</em> prior to the calculated <em>sof zman Kiddush Levana</em>. This method is available in\r\n   * the 1.3 release of the API but may change or be removed in the future since it depends on the still changing\r\n   * {@link JewishCalendar} and related classes.\r\n   *\r\n   * @return the Date representing the moment halfway between molad and molad. If the time occurs between\r\n   *         <em>alos</em> and <em>tzais</em>, <em>alos</em> will be returned\r\n   * @see #getSofZmanKidushLevanaBetweenMoldos(Date, Date)\r\n   * @see #getSofZmanKidushLevana15Days()\r\n   * @see JewishCalendar#getSofZmanKidushLevanaBetweenMoldos()\r\n   */\n\n  /*\r\n    public getSofZmanKidushLevanaBetweenMoldos(): Date {\r\n        return this.getSofZmanKidushLevanaBetweenMoldos(this.getAlos72(), this.getTzais72());\r\n    }\r\n  */\n\n  /**\r\n   * Returns the latest time of <em>Kiddush Levana</em> calculated as 15 days after the <em>molad</em>. This is the\r\n   * opinion brought down in the Shulchan Aruch (Orach Chaim 426). It should be noted that some opinions hold that the\r\n   * <a href=\"http://en.wikipedia.org/wiki/Moses_Isserles\">Rema</a> who brings down the opinion of the <a\r\n   * href=\"http://en.wikipedia.org/wiki/Yaakov_ben_Moshe_Levi_Moelin\">Maharil's</a> of calculating\r\n   * {@link #getSofZmanKidushLevanaBetweenMoldos(Date, Date) half way between molad and mold} is of the opinion that\r\n   * Mechaber agrees to his opinion. Also see the Aruch Hashulchan. For additional details on the subject, See Rabbi\r\n   * Dovid Heber's very detailed write-up in Siman Daled (chapter 4) of <a href=\"http://www.hebrewbooks.org/53000\">Shaarei\r\n   * Zmanim</a>. If the time of <em>sof zman Kiddush Levana</em> occurs during the day (between the <em>alos</em> and\r\n   * <em>tzais</em> passed in as parameters), it returns the <em>alos</em> passed in. If a null alos or tzais are\r\n   * passed to this method, the non-daytime adjusted time will be returned.\r\n   * This method is available in the 1.3 release of the API but may change or be removed in the future since\r\n   * it depends on the still changing {@link JewishCalendar} and related classes.\r\n   * @todo Add hyperlinks to documentation.\r\n   *\r\n   * @param alos\r\n   *            the beginning of the Jewish day. If Kidush Levana occurs during the day (starting at alos and ending\r\n   *            at tzais), the time returned will be alos. If either the alos or tzais parameters are null, no daytime\r\n   *            adjustment will be made.\r\n   * @param tzais\r\n   *            the end of the Jewish day. If Kidush Levana occurs during the day (starting at alos and ending at\r\n   *            tzais), the time returned will be alos. If either the alos or tzais parameters are null, no daytime\r\n   *            adjustment will be made.\r\n   * @return the Date representing the moment 15 days after the molad. If the time occurs between <em>alos</em> and\r\n   *         <em>tzais</em>, <em>alos</em> will be returned\r\n   *\r\n   * @see #getSofZmanKidushLevanaBetweenMoldos(Date, Date)\r\n   * @see JewishCalendar#getSofZmanKidushLevana15Days()\r\n   */\n\n\n  getSofZmanKidushLevana15Days(alos = null, tzais = null) {\n    const jewishCalendar = new JewishCalendar(this.getDate()); // Do not calculate for impossible dates, but account for extreme cases. In the extreme case of Rapa Iti in\n    // French Polynesia on Dec 2027 when kiddush Levana 3 days can be said on <em>Rosh Chodesh</em>, the sof zman Kiddush\n    // Levana will be on the 12th of the Teves. in the case of Anadyr, Russia on Jan, 2071, sof zman kiddush levana will\n    // occur after midnight on the 17th of Shevat. See Rabbi Dovid Heber's Shaarei Zmanim chapter 4 (pages 28 and 32).\n\n    if (jewishCalendar.getJewishDayOfMonth() < 11 || jewishCalendar.getJewishDayOfMonth() > 17) {\n      return null;\n    }\n\n    return this.getMoladBasedTime(jewishCalendar.getSofZmanKidushLevana15Days(), alos, tzais, false);\n  }\n  /**\r\n   * Returns the latest time of Kiddush Levana calculated as 15 days after the molad. This is the opinion brought down\r\n   * in the Shulchan Aruch (Orach Chaim 426). It should be noted that some opinions hold that the\r\n   * <a href=\"http://en.wikipedia.org/wiki/Moses_Isserles\">Rema</a> who brings down the opinion of the <a\r\n   * href=\"http://en.wikipedia.org/wiki/Yaakov_ben_Moshe_Levi_Moelin\">Maharil's</a> of calculating\r\n   * {@link #getSofZmanKidushLevanaBetweenMoldos(Date, Date) half way between molad and mold} is of the opinion that\r\n   * Mechaber agrees to his opinion. Also see the Aruch Hashulchan. For additional details on the subject, See Rabbi\r\n   * Dovid Heber's very detailed write-up in Siman Daled (chapter 4) of <a href=\"http://www.hebrewbooks.org/53000\">Shaarei\r\n   * Zmanim</a>. The sof zman Kiddush Levana will be returned even if it occurs during the day. To limit the time to\r\n   * between <em>tzais</em> and <em>alos</em>, see {@link #getSofZmanKidushLevana15Days(Date, Date)}.\r\n   * This method is available in the current release of the API but may change or be removed in the future since it depends\r\n   * on the still changing {@link JewishCalendar} and related classes.\r\n   *\r\n   * @return the Date representing the moment 15 days after the <em>molad</em>. If the time occurs between\r\n   *         <em>alos</em> and <em>tzais</em>, <em>alos</em> will be returned\r\n   *\r\n   * @see #getSofZmanKidushLevana15Days(Date, Date)\r\n   * @see #getSofZmanKidushLevanaBetweenMoldos()\r\n   * @see JewishCalendar#getSofZmanKidushLevana15Days()\r\n   */\n\n  /*\r\n    public getSofZmanKidushLevana15Days(): Date {\r\n        return this.getSofZmanKidushLevana15Days(this.getAlos72(), this.getTzais72());\r\n    }\r\n  */\n\n  /**\r\n   * Returns the earliest time of <em>Kiddush Levana</em> according to <em>Rabbeinu Yonah</em>'s opinion that it can\r\n   * be said 3 days after the molad.If the time of <em>tchilas zman Kiddush Levana</em> occurs during the day (between\r\n   * <em>{@link ZmanimCalendar#getAlos72() Alos}</em> and <em>{@link ZmanimCalendar#getTzais72() tzais}</em>) it\r\n   * return the next <em>tzais</em>. This method is available in the 1.3 release of the API but may change or be\r\n   * removed in the future since it depends on the still changing {@link JewishCalendar} and related classes.\r\n   *\r\n   * @param alos\r\n   *            the beginning of the Jewish day. If Kidush Levana occurs during the day (starting at alos and ending\r\n   *            at tzais), the time returned will be tzais. If either the alos or tzais parameters are null, no daytime\r\n   *            adjustment will be made.\r\n   * @param tzais\r\n   *           the end of the Jewish day. If Kidush Levana occurs during the day (starting at alos and ending at\r\n   *            tzais), the time returned will be tzais. If either the alos or tzais parameters are null, no daytime\r\n   *            adjustment will be made.\r\n   * @return the Date representing the moment 3 days after the molad. If the time occurs between <em>alos</em> and\r\n   *         <em>tzais</em>, <em>tzais</em> will be returned\r\n   * @see #getTchilasZmanKidushLevana3Days()\r\n   * @see #getTchilasZmanKidushLevana7Days(Date, Date)\r\n   * @see JewishCalendar#getTchilasZmanKidushLevana3Days()\r\n   */\n\n\n  getTchilasZmanKidushLevana3Days(alos = null, tzais = null) {\n    const jewishCalendar = new JewishCalendar();\n    jewishCalendar.setGregorianDate(this.getDate().year, this.getDate().month - 1, this.getDate().day); // Do not calculate for impossible dates, but account for extreme cases. Tchilas zman kiddush Levana 3 days for\n    // the extreme case of Rapa Iti in French Polynesia on Dec 2027 when kiddush Levana 3 days can be said on the evening\n    // of the 30th, the second night of Rosh Chodesh. The 3rd day after the <em>molad</em> will be on the 4th of the month.\n    // In the case of Anadyr, Russia on Jan, 2071, when sof zman kiddush levana is on the 17th of the month, the 3rd day\n    // from the molad will be on the 5th day of Shevat. See Rabbi Dovid Heber's Shaarei Zmanim chapter 4 (pages 28 and 32).\n\n    if (jewishCalendar.getJewishDayOfMonth() > 5 && jewishCalendar.getJewishDayOfMonth() < 30) {\n      return null;\n    }\n\n    let zman = this.getMoladBasedTime(jewishCalendar.getTchilasZmanKidushLevana3Days(), alos, tzais, true); // Get the following month's zman kiddush Levana for the extreme case of Rapa Iti in French Polynesia on Dec 2027 when\n    // kiddush Levana can be said on Rosh Chodesh (the evening of the 30th). See Rabbi Dovid Heber's Shaarei Zmanim chapter 4 (page 32)\n\n    if (zman === null && jewishCalendar.getJewishDayOfMonth() === 30) {\n      jewishCalendar.forward(Calendar.MONTH, 1);\n      zman = this.getMoladBasedTime(jewishCalendar.getTchilasZmanKidushLevana3Days(), null, null, true);\n    }\n\n    return zman;\n  }\n  /**\r\n   * Returns the earliest time of <em>Kiddush Levana</em> according to <em>Rabbeinu Yonah</em>'s opinion that it can\r\n   * be said 3 days after the molad.If the time of <em>tchilas zman Kiddush Levana</em> occurs during the day (between\r\n   * <em>{@link ZmanimCalendar#getAlos72() Alos}</em> and <em>{@link ZmanimCalendar#getTzais72() tzais}</em>) it\r\n   * return the next <em>tzais</em>. This method is available in the 1.3 release of the API but may change or be\r\n   * removed in the future since it depends on the still changing {@link JewishCalendar} and related classes.\r\n   *\r\n   * @return the Date representing the moment 3 days after the molad. If the time occurs between <em>alos</em> and\r\n   *         <em>tzais</em>, <em>tzais</em> will be returned\r\n   * @see #getTchilasZmanKidushLevana3Days(Date, Date)\r\n   * @see #getTchilasZmanKidushLevana7Days()\r\n   * @see JewishCalendar#getTchilasZmanKidushLevana3Days()\r\n   */\n\n  /*\r\n    public getTchilasZmanKidushLevana3Days(): Date {\r\n        return this.getTchilasZmanKidushLevana3Days(this.getAlos72(), this.getTzais72());\r\n    }\r\n  */\n\n  /**\r\n   * Returns the point in time of <em>Molad</em> as a <code>Date</code> Object. For the traditional day of week, hour,\r\n   * minute and chalakim, {@link JewishCalendar#getMoladAsDate()} and the not yet completed\r\n   * {@link net.sourceforge.zmanim.hebrewcalendar.HebrewDateFormatter} that will have formatting for this.\r\n   *\r\n   * @return the Date representing the moment of the molad. If the molad does not occur on this day, a null will be returned.\r\n   *\r\n   * @see #getTchilasZmanKidushLevana3Days()\r\n   * see #getTchilasZmanKidushLevana7Days(Date, Date)\r\n   * @see JewishCalendar#getMoladAsDate()\r\n   */\n\n\n  getZmanMolad() {\n    const jewishCalendar = new JewishCalendar();\n    jewishCalendar.setGregorianDate(this.getDate().year, this.getDate().month - 1, this.getDate().day); // Optimize to not calculate for impossible dates, but account for extreme cases. The molad in the extreme case of Rapa\n    // Iti in French Polynesia on Dec 2027 occurs on the night of the 27th of Kislev. In the case of Anadyr, Russia on\n    // Jan 2071, the molad will be on the 2nd day of Shevat. See Rabbi Dovid Heber's Shaarei Zmanim chapter 4 (pages 28 and 32).\n\n    if (jewishCalendar.getJewishDayOfMonth() > 2 && jewishCalendar.getJewishDayOfMonth() < 27) {\n      return null;\n    }\n\n    let molad = this.getMoladBasedTime(jewishCalendar.getMoladAsDate(), null, null, true); // deal with molad that happens on the end of the previous month\n\n    if (molad === null && jewishCalendar.getJewishDayOfMonth() > 26) {\n      jewishCalendar.forward(Calendar.MONTH, 1);\n      molad = this.getMoladBasedTime(jewishCalendar.getMoladAsDate(), null, null, true);\n    }\n\n    return molad;\n  }\n  /**\r\n   * Used by Molad based zmanim to determine if zmanim occur during the current day.\r\n   * @see #getMoladBasedTime(Date, Date, Date, boolean)\r\n   * @return previous midnight\r\n   */\n\n\n  getMidnightLastNight() {\n    // reset hour, minutes, seconds and millis\n    return this.getDate().set({\n      hour: 0,\n      minute: 0,\n      second: 0,\n      millisecond: 0\n    });\n  }\n  /**\r\n   * Used by Molad based zmanim to determine if zmanim occur during the current day.\r\n   * @see #getMoladBasedTime(Date, Date, Date, boolean)\r\n   * @return following midnight\r\n   */\n\n\n  getMidnightTonight() {\n    return this.getDate().plus({\n      days: 1\n    }).set({\n      hour: 0,\n      minute: 0,\n      second: 0,\n      millisecond: 0\n    });\n  }\n  /**\r\n   * Returns the earliest time of <em>Kiddush Levana</em> according to the opinions that it should not be said until 7\r\n   * days after the molad. If the time of <em>tchilas zman Kiddush Levana</em> occurs during the day (between\r\n   * <em>{@link ZmanimCalendar#getAlos72() Alos}</em> and <em>{@link ZmanimCalendar#getTzais72() tzais}</em>) it\r\n   * return the next <em>tzais</em>. This method is available in the current release of the API but may change or be\r\n   * removed in the future since it depends on the still changing {@link JewishCalendar} and related classes.\r\n   *\r\n   * @param alos\r\n   *            the beginning of the Jewish day. If Kidush Levana occurs during the day (starting at alos and ending\r\n   *            at tzais), the time returned will be tzais. If either the alos or tzais parameters are null, no daytime\r\n   *            adjustment will be made.\r\n   * @param tzais\r\n   *            the end of the Jewish day. If Kidush Levana occurs during the day (starting at alos and ending at\r\n   *            tzais), the time returned will be tzais. If either the alos or tzais parameters are null, no daytime\r\n   *            adjustment will be made.\r\n   * @return the Date representing the moment 7 days after the molad. If the time occurs between <em>alos</em> and\r\n   *         <em>tzais</em>, <em>tzais</em> will be returned\r\n   * @see #getTchilasZmanKidushLevana3Days(Date, Date)\r\n   * @see #getTchilasZmanKidushLevana7Days()\r\n   * @see JewishCalendar#getTchilasZmanKidushLevana7Days()\r\n   */\n\n\n  getTchilasZmanKidushLevana7Days(alos = null, tzais = null) {\n    const jewishCalendar = new JewishCalendar(this.getDate()); // Optimize to not calculate for impossible dates, but account for extreme cases. Tchilas zman kiddush Levana 7 days for\n    // the extreme case of Rapa Iti in French Polynesia on Jan 2028 (when kiddush Levana 3 days can be said on the evening\n    // of the 30th, the second night of Rosh Chodesh), the 7th day after the molad will be on the 4th of the month.\n    // In the case of Anadyr, Russia on Jan, 2071, when sof zman kiddush levana is on the 17th of the month, the 7th day\n    // from the molad will be on the 9th day of Shevat. See Rabbi Dovid Heber's Shaarei Zmanim chapter 4 (pages 28 and 32).\n\n    if (jewishCalendar.getJewishDayOfMonth() < 4 || jewishCalendar.getJewishDayOfMonth() > 9) {\n      return null;\n    }\n\n    return this.getMoladBasedTime(jewishCalendar.getTchilasZmanKidushLevana7Days(), alos, tzais, true);\n  }\n  /**\r\n   * Returns the earliest time of <em>Kiddush Levana</em> according to the opinions that it should not be said until 7\r\n   * days after the molad. If the time of <em>tchilas zman Kiddush Levana</em> occurs during the day (between\r\n   * <em>{@link ZmanimCalendar#getAlos72() Alos}</em> and <em>{@link ZmanimCalendar#getTzais72() tzais}</em>) it\r\n   * return the next <em>tzais</em>. This method is available in the 1.3 release of the API but may change or be\r\n   * removed in the future since it depends on the still changing {@link JewishCalendar} and related classes.\r\n   *\r\n   * @return the Date representing the moment 7 days after the molad. If the time occurs between <em>alos</em> and\r\n   *         <em>tzais</em>, <em>tzais</em> will be returned\r\n   * @see #getTchilasZmanKidushLevana7Days(Date, Date)\r\n   * @see #getTchilasZmanKidushLevana3Days()\r\n   * @see JewishCalendar#getTchilasZmanKidushLevana7Days()\r\n   */\n\n  /*\r\n    public getTchilasZmanKidushLevana7Days(): Date {\r\n        return this.getTchilasZmanKidushLevana7Days(this.getAlos72(), this.getTzais72());\r\n    }\r\n  */\n\n  /**\r\n   * This method returns the latest time one is allowed eating chametz on Erev Pesach according to the opinion of the\r\n   * <em><a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a></em>. This time is identical to the {@link\r\n    * #getSofZmanTfilaGRA() Sof zman tfilah GRA} and is provided as a convenience method for those who are unaware how\r\n   * this zman is calculated. This time is 4 hours into the day based on the opinion of the <em><a href=\r\n   * \"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a></em> that the day is calculated from sunrise to sunset. This\r\n   * returns the time 4 * {@link #getShaahZmanisGra()} after {@link #getSeaLevelSunrise() sea level sunrise}.\r\n   *\r\n   * @see ZmanimCalendar#getShaahZmanisGra()\r\n   * @see ZmanimCalendar#getSofZmanTfilaGRA()\r\n   * @return the <code>Date</code> one is allowed eating chametz on Erev Pesach. If the calculation can't be computed\r\n   *         such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\r\n   *         where it does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   */\n\n\n  getSofZmanAchilasChametzGRA() {\n    return this.getSofZmanTfilaGRA();\n  }\n  /**\r\n   * This method returns the latest time one is allowed eating chametz on Erev Pesach according to the opinion of the\r\n   * <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> based on <em>alos</em> being {@link #getAlos72() 72} minutes before {@link #getSunrise() sunrise}.\r\n   * This time is identical to the {@link #getSofZmanTfilaMGA72Minutes() Sof zman tfilah MGA 72 minutes}. This time\r\n   * is 4 <em>{@link #getShaahZmanisMGA() shaos zmaniyos}</em> (temporal hours) after {@link #getAlos72() dawn} based\r\n   * on the opinion of the <em>MGA</em> that the day is calculated from a {@link #getAlos72() dawn} of 72 minutes\r\n   * before sunrise to {@link #getTzais72() nightfall} of 72 minutes after sunset. This returns the time of 4 *\r\n   * {@link #getShaahZmanisMGA()} after {@link #getAlos72() dawn}.\r\n   *\r\n   * @return the <code>Date</code> of the latest time of eating chametz. If the calculation can't be computed such as\r\n   *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n   *         does not set), a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * @see #getShaahZmanisMGA()\r\n   * @see #getAlos72()\r\n   * @see #getSofZmanTfilaMGA72Minutes()\r\n   */\n\n\n  getSofZmanAchilasChametzMGA72Minutes() {\n    return this.getSofZmanTfilaMGA72Minutes();\n  }\n  /**\r\n   * This method returns the latest time one is allowed eating chametz on Erev Pesach according to the opinion of the\r\n   * of the <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> based on <em>alos</em> being {@link #getAlos16Point1Degrees() 16.1&deg;} before\r\n   * {@link #getSunrise() sunrise}. This time is 4 <em>{@link #getShaahZmanis16Point1Degrees() shaos zmaniyos}</em>\r\n   * (solar hours) after {@link #getAlos16Point1Degrees() dawn} based on the opinion of the <em>MGA</em> that the day\r\n   * is calculated from dawn to nightfall with both being 16.1&deg; below sunrise or sunset. This returns the time of\r\n   * 4 {@link #getShaahZmanis16Point1Degrees()} after {@link #getAlos16Point1Degrees() dawn}.\r\n   *\r\n   * @return the <code>Date</code> of the latest time of eating chametz. If the calculation can't be computed such as\r\n   *         northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle where\r\n   *         the sun may not reach low enough below the horizon for this calculation, a null will be returned. See\r\n   *         detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   *\r\n   * @see #getShaahZmanis16Point1Degrees()\r\n   * @see #getAlos16Point1Degrees()\r\n   * @see #getSofZmanTfilaMGA16Point1Degrees()\r\n   */\n\n\n  getSofZmanAchilasChametzMGA16Point1Degrees() {\n    return this.getSofZmanTfilaMGA16Point1Degrees();\n  }\n  /**\r\n   * This method returns the latest time for burning chametz on Erev Pesach according to the opinion of the\r\n   * <em><a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a></em> This time is 5 hours into the day based on the opinion of the\r\n   * <em><a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a></em> that the day is calculated from sunrise to sunset. This returns the\r\n   * time 5 * {@link #getShaahZmanisGra()} after {@link #getSeaLevelSunrise() sea level sunrise}.\r\n   *\r\n   * @see ZmanimCalendar#getShaahZmanisGra()\r\n   * @return the <code>Date</code> of the latest time for burning chametz on Erev Pesach. If the calculation can't be\r\n   *         computed such as in the Arctic Circle where there is at least one day a year where the sun does not rise,\r\n   *         and one where it does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   */\n\n\n  getSofZmanBiurChametzGRA() {\n    return ComplexZmanimCalendar.getTimeOffset(this.getElevationAdjustedSunrise(), this.getShaahZmanisGra() * 5);\n  }\n  /**\r\n   * This method returns the latest time for burning chametz on Erev Pesach according to the opinion of the\r\n   * <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> based on <em>alos</em> being {@link #getAlos72() 72} minutes before {@link #getSunrise() sunrise}.\r\n   * This time is 5 <em>{@link #getShaahZmanisMGA() shaos zmaniyos}</em> (temporal hours) after {@link #getAlos72()\r\n     * dawn} based on the opinion of the <em>MGA</em> that the day is calculated from a {@link #getAlos72() dawn} of 72\r\n   * minutes before sunrise to {@link #getTzais72() nightfall} of 72 minutes after sunset. This returns the time of 5\r\n   * * {@link #getShaahZmanisMGA()} after {@link #getAlos72() dawn}.\r\n   *\r\n   * @return the <code>Date</code> of the latest time for burning chametz on Erev Pesach. If the calculation can't be\r\n   *         computed such as in the Arctic Circle where there is at least one day a year where the sun does not rise,\r\n   *         and one where it does not set), a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * @see #getShaahZmanisMGA()\r\n   * @see #getAlos72()\r\n   */\n\n\n  getSofZmanBiurChametzMGA72Minutes() {\n    return ComplexZmanimCalendar.getTimeOffset(this.getAlos72(), this.getShaahZmanisMGA() * 5);\n  }\n  /**\r\n   * This method returns the latest time for burning <em>chametz</em> on <em>Erev Pesach</em> according to the opinion of the\r\n   * <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> based on <em>alos</em> being {@link #getAlos16Point1Degrees() 16.1&deg;} before\r\n   * {@link #getSunrise() sunrise}. This time is 5 <em>{@link #getShaahZmanis16Point1Degrees() shaos zmaniyos}</em>\r\n   * (solar hours) after {@link #getAlos16Point1Degrees() dawn} based on the opinion of the <em>MGA</em> that the day\r\n   * is calculated from dawn to nightfall with both being 16.1&deg; below sunrise or sunset. This returns the time of\r\n   * 5 {@link #getShaahZmanis16Point1Degrees()} after {@link #getAlos16Point1Degrees() dawn}.\r\n   *\r\n   * @return the <code>Date</code> of the latest time for burning chametz on Erev Pesach. If the calculation can't be\r\n   *         computed such as northern and southern locations even south of the Arctic Circle and north of the\r\n   *         Antarctic Circle where the sun may not reach low enough below the horizon for this calculation, a null\r\n   *         will be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   *\r\n   * @see #getShaahZmanis16Point1Degrees()\r\n   * @see #getAlos16Point1Degrees()\r\n   */\n\n\n  getSofZmanBiurChametzMGA16Point1Degrees() {\n    return ComplexZmanimCalendar.getTimeOffset(this.getAlos16Point1Degrees(), this.getShaahZmanis16Point1Degrees() * 5);\n  }\n  /**\r\n   * A method that returns \"solar\" midnight, or the time when the sun is at its <a\r\n   * href=\"http://en.wikipedia.org/wiki/Nadir\">nadir</a>.\r\n   * <b>Note:</b> this method is experimental and might be removed.\r\n   *\r\n   * @return the <code>Date</code> of Solar Midnight (chatzos layla). If the calculation can't be computed such as in\r\n   *         the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n   *         does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   */\n\n\n  getSolarMidnight() {\n    const clonedCal = this.clone();\n    clonedCal.setDate(clonedCal.getDate().plus({\n      days: 1\n    }));\n    const sunset = this.getSeaLevelSunset();\n    const sunrise = clonedCal.getSeaLevelSunrise();\n    return ComplexZmanimCalendar.getTimeOffset(sunset, this.getTemporalHour(sunset, sunrise) * 6);\n  }\n  /**\r\n   * A method that returns the <em><a href=\"https://en.wikipedia.org/wiki/Shneur_Zalman_of_Liadi\">Baal Hatanya</a></em>'s\r\n   * <em>netz amiti</em> (sunrise) without {@link AstronomicalCalculator#getElevationAdjustment(double)\r\n     * elevation adjustment}. This forms the base for the <em>Baal Hatanya</em>'s dawn based calculations that are\r\n   * calculated as a dip below the horizon before sunrise.\r\n   *\r\n   * According to the <em>Baal Hatanya</em>, <em>netz amiti</em>, or true (halachic) sunrise, is when the top of the sun's\r\n   * disk is visible at an elevation similar to the mountains of Eretz Yisrael. The time is calculated as the point at which\r\n   * the center of the sun's disk is 1.583&deg; below the horizon. This degree based calculation can be found in Rabbi Shalom\r\n   * DovBer Levine's commentary on The <a href=\"http://www.chabadlibrary.org/books/pdf/Seder-Hachnosas-Shabbos.pdf\">Baal\r\n   * Hatanya's Seder Hachnasas Shabbos</a>. From an elevation of 546 meters, the top of <a href=\r\n   * \"https://en.wikipedia.org/wiki/Mount_Carmel\">Har Hacarmel</a>, the sun disappears when it is 1&deg; 35' or 1.583&deg;\r\n   * below the sea level horizon. This in turn is based on the Gemara <a href=\r\n   * \"http://www.hebrewbooks.org/shas.aspx?mesechta=2&amp;daf=35\">Shabbos 35a</a>. There are other opinions brought down by\r\n   * Rabbi Levine, including Rabbi Yosef Yitzchok\r\n   * Feigelstock who calculates it as the degrees below the horizon 4 minutes after sunset in Yerushalaym (on the equinox). That\r\n   * is brought down as 1.583&deg;. This is identical to the 1&deg; 35' zman and is probably a typo and should be 1.683&deg;.\r\n   * These calculations are used by most <a href=\"https://en.wikipedia.org/wiki/Chabad\">Chabad</a> calendars that use the\r\n   * <em>Baal Hatanya</em>'s Zmanim. See\r\n   * <a href=\"https://www.chabad.org/library/article_cdo/aid/3209349/jewish/About-Our-Zmanim-Calculations.htm\">About Our Zmanim\r\n   * Calculations @ Chabad.org</a>.\r\n   *\r\n   * Note: <em>netz amiti</em> is used only for calculating certain zmanim, and is intentionally unpublished. For practical purposes,\r\n   * daytime mitzvos like shofar and lulav should not be done until after the published time for netz-sunrise.\r\n   *\r\n   * @return the <code>Date</code> representing the exact sea-level <em>netz amiti</em> (sunrise) time. If the calculation can't be\r\n   *         computed such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\r\n   *         where it does not set, a null will be returned. See detailed explanation on top of the page.\r\n   *\r\n   * @see #getSunrise()\r\n   * @see #getSeaLevelSunrise()\r\n   * @see #getSunsetBaalHatanya()\r\n   * @see #ZENITH_1_POINT_583\r\n   */\n\n\n  getSunriseBaalHatanya() {\n    return this.getSunriseOffsetByDegrees(ComplexZmanimCalendar.ZENITH_1_POINT_583);\n  }\n  /**\r\n   * A method that returns the <em><a href=\"https://en.wikipedia.org/wiki/Shneur_Zalman_of_Liadi\">Baal Hatanya</a></em>'s\r\n   * <em>shkiah amiti</em> (sunset) without {@link AstronomicalCalculator#getElevationAdjustment(double)\r\n     * elevation adjustment}. This forms the base for the <em>Baal Hatanya</em>'s  dusk based calculations that are calculated\r\n   * as a dip below the horizon after sunset.\r\n   *\r\n   * According to the <em>Baal Hatanya</em>, <em>shkiah amiti</em>, true (halachic) sunset, is when the top of the\r\n   * sun's disk disappears from view at an elevation similar to the mountains of Eretz Yisrael.\r\n   * This time is calculated as the point at which the center of the sun's disk is 1.583 degrees below the horizon.\r\n   *\r\n   * Note: <em>shkiah amiti</em> is used only for calculating certain zmanim, and is intentionally unpublished. For practical\r\n   * purposes, all daytime mitzvos should be completed before the published time for shkiah-sunset.\r\n   *\r\n   * For further explanation of the calculations used for the <em>Baal Hatanya</em>'s Zmanim in this library, see\r\n   * <a href=\"https://www.chabad.org/library/article_cdo/aid/3209349/jewish/About-Our-Zmanim-Calculations.htm\">About Our Zmanim\r\n   * Calculations @ Chabad.org</a>.\r\n   *\r\n   * @return the <code>Date</code> representing the exact sea-level <em>shkiah amiti</em> (sunset) time. If the calculation\r\n   *         can't be computed such as in the Arctic Circle where there is at least one day a year where the sun does not\r\n   *         rise, and one where it does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   *\r\n   * @see #getSunset()\r\n   * @see #getSeaLevelSunset()\r\n   * @see #getSunriseBaalHatanya()\r\n   * @see #ZENITH_1_POINT_583\r\n   */\n\n\n  getSunsetBaalHatanya() {\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_1_POINT_583);\n  }\n  /**\r\n   * A method that returns the <em><a href=\"https://en.wikipedia.org/wiki/Shneur_Zalman_of_Liadi\">Baal Hatanya</a></em>'s\r\n   * a <em>shaah zmanis</em> ({@link #getTemporalHour(Date, Date) temporal hour}). This forms the base for the\r\n   * <em>Baal Hatanya</em>'s  day  based calculations that are calculated\r\n   * as a 1.583&deg; dip below the horizon after sunset.\r\n   *\r\n   * According to the <em>Baal Hatanya</em>, <em>shkiah amiti</em>, true (halachic) sunset, is when the top of the\r\n   * sun's disk disappears from view at an elevation similar to the mountains of Eretz Yisrael.\r\n   * This time is calculated as the point at which the center of the sun's disk is 1.583 degrees below the horizon.\r\n   *\r\n   * A method that returns a <em>shaah zmanis</em> ( {@link #getTemporalHour(Date, Date) temporal hour}) calculated\r\n   * based on the <em><a href=\"https://en.wikipedia.org/wiki/Shneur_Zalman_of_Liadi\">Baal Hatanya</a></em>'s <em>netz\r\n   * amiti</em> and <em>shkiah amiti</em> using a dip of 1.583&deg; below the sea level horizon. This calculation divides\r\n   * the day based on the opinion of the <em>Baal Hatanya</em> that the day runs from {@link #getSunriseBaalHatanya()\r\n     * netz amiti} to {@link #getSunsetBaalHatanya() shkiah amiti}. The calculations are based on a day from {@link\r\n    * #getSunriseBaalHatanya() sea level netz amiti} to {@link #getSunsetBaalHatanya() sea level shkiah amiti}. The day\r\n   * is split into 12 equal parts with each one being a <em>shaah zmanis</em>. This method is similar to {@link\r\n    * #getTemporalHour}, but all calculations are based on a sea level sunrise and sunset.\r\n   * @todo Copy sunrise and sunset comments here as applicable.\r\n   *\r\n   * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em> calculated from\r\n   *         {@link #getSunriseBaalHatanya() <em>netz amiti</em> (sunrise)} to {@link #getSunsetBaalHatanya() <em>shkiah amiti</em>\r\n     *         (\"real\" sunset)}. If the calculation can't be computed such as in the Arctic Circle where there is at least one day a\r\n   *         year where the sun does not rise, and one where it does not set, {@link Long#MIN_VALUE} will be returned. See\r\n   *         detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   *\r\n   * @see #getTemporalHour(Date, Date)\r\n   * @see #getSunriseBaalHatanya()\r\n   * @see #getSunsetBaalHatanya()\r\n   * @see #ZENITH_1_POINT_583\r\n   */\n\n\n  getShaahZmanisBaalHatanya() {\n    return this.getTemporalHour(this.getSunriseBaalHatanya(), this.getSunsetBaalHatanya());\n  }\n  /**\r\n   * Returns the <em><a href=\"https://en.wikipedia.org/wiki/Shneur_Zalman_of_Liadi\">Baal Hatanya</a></em>'s <em>alos</em> (dawn)\r\n   * calculated as the time when the sun is 16.9&deg; below the eastern\r\n   * {@link #GEOMETRIC_ZENITH geometric horizon} before {@link #getSunrise sunrise}. For more information the source\r\n   * of 16.9&deg; see {@link #ZENITH_16_POINT_9}.\r\n   *\r\n   * @see #ZENITH_16_POINT_9\r\n   * @return The <code>Date</code> of dawn. If the calculation can't be computed such as northern and southern\r\n   *         locations even south of the Arctic Circle and north of the Antarctic Circle where the sun may not reach\r\n   *         low enough below the horizon for this calculation, a null will be returned. See detailed explanation on\r\n   *         top of the {@link AstronomicalCalendar} documentation.\r\n   */\n\n\n  getAlosBaalHatanya() {\n    return this.getSunriseOffsetByDegrees(ComplexZmanimCalendar.ZENITH_16_POINT_9);\n  }\n  /**\r\n   * This method returns the latest <em>zman krias shema</em> (time to recite Shema in the morning). This time is 3\r\n   * <em>{@link #getShaahZmanisBaalHatanya() shaos zmaniyos}</em> (solar hours) after {@link #getSunriseBaalHatanya()\r\n  * <em>netz amiti</em> (sunrise)} based on the opinion of the <em>Baal Hatanya</em> that the day is calculated from\r\n   * sunrise to sunset. This returns the time 3 * {@link #getShaahZmanisBaalHatanya()} after {@link #getSunriseBaalHatanya()\r\n  * <em>netz amiti</em> (sunrise)}.\r\n   *\r\n   * @see ZmanimCalendar#getSofZmanShma(Date, Date)\r\n   * @see #getShaahZmanisBaalHatanya()\r\n   * @return the <code>Date</code> of the latest zman shema according to the Baal Hatanya. If the calculation\r\n   *         can't be computed such as in the Arctic Circle where there is at least one day a year where the sun does\r\n   *         not rise, and one where it does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   */\n\n\n  getSofZmanShmaBaalHatanya() {\n    return this.getSofZmanShma(this.getSunriseBaalHatanya(), this.getSunsetBaalHatanya());\n  }\n  /**\r\n   * This method returns the latest <em>zman tefilah</em> (time to recite the morning prayers). This time is 4\r\n   * hours into the day based on the opinion of the <em>Baal Hatanya</em> that the day is\r\n   * calculated from sunrise to sunset. This returns the time 4 * {@link #getShaahZmanisBaalHatanya()} after\r\n   * {@link #getSunriseBaalHatanya() <em>netz amiti</em> (sunrise)}.\r\n   *\r\n   * @see ZmanimCalendar#getSofZmanTfila(Date, Date)\r\n   * @see #getShaahZmanisBaalHatanya()\r\n   * @return the <code>Date</code> of the latest zman tefilah. If the calculation can't be computed such as in the\r\n   *         Arctic Circle where there is at least one day a year where the sun does not rise, and one where it does\r\n   *         not set, a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   */\n\n\n  getSofZmanTfilaBaalHatanya() {\n    return this.getSofZmanTfila(this.getSunriseBaalHatanya(), this.getSunsetBaalHatanya());\n  }\n  /**\r\n   * This method returns the latest time one is allowed eating chametz on Erev Pesach according to the opinion of the\r\n   * <em>Baal Hatanya</em>. This time is identical to the {@link #getSofZmanTfilaBaalHatanya() Sof zman\r\n     * tefilah Baal Hatanya}. This time is 4 hours into the day based on the opinion of the <em>Baal\r\n   * Hatanya</em> that the day is calculated from sunrise to sunset. This returns the time 4 *\r\n   * {@link #getShaahZmanisBaalHatanya()} after {@link #getSunriseBaalHatanya() <em>netz amiti</em> (sunrise)}.\r\n   *\r\n   * @see #getShaahZmanisBaalHatanya()\r\n   * @see #getSofZmanTfilaBaalHatanya()\r\n   * @return the <code>Date</code> one is allowed eating chametz on Erev Pesach. If the calculation can't be computed\r\n   *         such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\r\n   *         where it does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   */\n\n\n  getSofZmanAchilasChametzBaalHatanya() {\n    return this.getSofZmanTfilaBaalHatanya();\n  }\n  /**\r\n   * This method returns the latest time for burning chametz on Erev Pesach according to the opinion of the\r\n   * <em>Baal Hatanya</em>. This time is 5 hours into the day based on the opinion of the\r\n   * <em>Baal Hatanya</em> that the day is calculated from sunrise to sunset. This returns the\r\n   * time 5 * {@link #getShaahZmanisBaalHatanya()} after {@link #getSunriseBaalHatanya() <em>netz amiti</em> (sunrise)}.\r\n   *\r\n   * @see #getShaahZmanisBaalHatanya()\r\n   * @return the <code>Date</code> of the latest time for burning chametz on Erev Pesach. If the calculation can't be\r\n   *         computed such as in the Arctic Circle where there is at least one day a year where the sun does not rise,\r\n   *         and one where it does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   */\n\n\n  getSofZmanBiurChametzBaalHatanya() {\n    return ComplexZmanimCalendar.getTimeOffset(this.getSunriseBaalHatanya(), this.getShaahZmanisBaalHatanya() * 5);\n  }\n  /**\r\n   * This method returns the time of <em>mincha gedola</em>. <em>Mincha gedola</em> is the earliest time one can pray\r\n   * mincha. The <em><a href=\"https://en.wikipedia.org/wiki/Maimonides\">Rambam</a></em> is of the opinion that it is\r\n   * better to delay <em>mincha</em> until <em>{@link #getMinchaKetanaBaalHatanya() mincha ketana}</em> while the\r\n   * <em><a href=\"https://en.wikipedia.org/wiki/Asher_ben_Jehiel\">Ra\"sh</a></em>,\r\n   * <em><a href=\"https://en.wikipedia.org/wiki/Jacob_ben_Asher\">Tur</a></em>, <em><a href=\r\n   * \"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a></em> and others are of the opinion that <em>mincha</em> can be prayed\r\n   * <em>lechatchila</em> starting at <em>mincha gedola</em>. This is calculated as 6.5 {@link #getShaahZmanisBaalHatanya()\r\n     * sea level solar hours} after {@link #getSunriseBaalHatanya() <em>netz amiti</em> (sunrise)}. This calculation is based\r\n   * on the opinion of the <em>Baal Hatanya</em> that the day is calculated from sunrise to sunset. This returns the time 6.5 *\r\n   * {@link #getShaahZmanisBaalHatanya()} after {@link #getSunriseBaalHatanya() <em>netz amiti</em> (\"real\" sunrise)}.\r\n   *\r\n   * @see #getMinchaGedola(Date, Date)\r\n   * @see #getShaahZmanisBaalHatanya()\r\n   * @see #getMinchaKetanaBaalHatanya()\r\n   * @return the <code>Date</code> of the time of mincha gedola. If the calculation can't be computed such as in the\r\n   *         Arctic Circle where there is at least one day a year where the sun does not rise, and one where it does\r\n   *         not set, a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   */\n\n\n  getMinchaGedolaBaalHatanya() {\n    return this.getMinchaGedola(this.getSunriseBaalHatanya(), this.getSunsetBaalHatanya());\n  }\n  /**\r\n   * This is a conveniance method that returns the later of {@link #getMinchaGedolaBaalHatanya()} and\r\n   * {@link #getMinchaGedola30Minutes()}. In the winter when 1/2 of a <em>{@link #getShaahZmanisBaalHatanya() shaah zmanis}</em> is\r\n   * less than 30 minutes {@link #getMinchaGedola30Minutes()} will be returned, otherwise {@link #getMinchaGedolaBaalHatanya()}\r\n   * will be returned.\r\n   *\r\n   * @return the <code>Date</code> of the later of {@link #getMinchaGedolaBaalHatanya()} and {@link #getMinchaGedola30Minutes()}.\r\n   *         If the calculation can't be computed such as in the Arctic Circle where there is at least one day a year\r\n   *         where the sun does not rise, and one where it does not set, a null will be returned. See detailed\r\n   *         explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   */\n\n\n  getMinchaGedolaBaalHatanyaGreaterThan30() {\n    if (this.getMinchaGedola30Minutes() === null || this.getMinchaGedolaBaalHatanya() === null) {\n      return null;\n    }\n\n    return DateTime.max(this.getMinchaGedola30Minutes(), this.getMinchaGedolaBaalHatanya());\n  }\n  /**\r\n   * This method returns the time of <em>mincha ketana</em>. This is the preferred earliest time to pray\r\n   * <em>mincha</em> in the opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Maimonides\">Rambam</a></em> and others.\r\n   * For more information on this see the documentation on <em>{@link #getMinchaGedolaBaalHatanya() mincha gedola}</em>.\r\n   * This is calculated as 9.5 {@link #getShaahZmanisBaalHatanya()  sea level solar hours} after {@link #getSunriseBaalHatanya()\r\n     * <em>netz amiti</em> (sunrise)}. This calculation is calculated based on the opinion of the <em>Baal Hatanya</em> that the\r\n   * day is calculated from sunrise to sunset. This returns the time 9.5 * {@link #getShaahZmanisBaalHatanya()} after {@link\r\n    * #getSunriseBaalHatanya() <em>netz amiti</em> (sunrise)}.\r\n   *\r\n   * @see #getMinchaKetana(Date, Date)\r\n   * @see #getShaahZmanisBaalHatanya()\r\n   * @see #getMinchaGedolaBaalHatanya()\r\n   * @return the <code>Date</code> of the time of mincha ketana. If the calculation can't be computed such as in the\r\n   *         Arctic Circle where there is at least one day a year where the sun does not rise, and one where it does\r\n   *         not set, a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   */\n\n\n  getMinchaKetanaBaalHatanya() {\n    return this.getMinchaKetana(this.getSunriseBaalHatanya(), this.getSunsetBaalHatanya());\n  }\n  /**\r\n   * This method returns the time of <em>plag hamincha</em>. This is calculated as 10.75 hours after sunrise. This\r\n   * calculation is based on the opinion of the <em>Baal Hatanya</em> that the day is calculated\r\n   * from sunrise to sunset. This returns the time 10.75 * {@link #getShaahZmanisBaalHatanya()} after\r\n   * {@link #getSunriseBaalHatanya() <em>netz amiti</em> (sunrise)}.\r\n   *\r\n   * @see #getPlagHamincha(Date, Date)\r\n   * @return the <code>Date</code> of the time of <em>plag hamincha</em>. If the calculation can't be computed such as\r\n   *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n   *         does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   */\n\n\n  getPlagHaminchaBaalHatanya() {\n    return this.getPlagHamincha(this.getSunriseBaalHatanya(), this.getSunsetBaalHatanya());\n  }\n  /**\r\n   * A method that returns <em>tzais</em> (nightfall) when the sun is 6&deg; below the western geometric horizon\r\n   * (90&deg;) after {@link #getSunset sunset}. For information on the source of this calculation see\r\n   * {@link #ZENITH_6_DEGREES}.\r\n   *\r\n   * @return The <code>Date</code> of nightfall. If the calculation can't be computed such as northern and southern\r\n   *         locations even south of the Arctic Circle and north of the Antarctic Circle where the sun may not reach\r\n   *         low enough below the horizon for this calculation, a null will be returned. See detailed explanation on\r\n   *         top of the {@link AstronomicalCalendar} documentation.\r\n   * @see #ZENITH_6_DEGREES\r\n   */\n\n\n  getTzaisBaalHatanya() {\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_6_DEGREES);\n  } // eslint-disable-next-line class-methods-use-this\n\n\n  getClassName() {\n    return 'net.sourceforge.zmanim.ComplexZmanimCalendar';\n  }\n\n}\n/**\r\n * The zenith of 3.7&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\r\n * calculating <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> that <em>tzais</em> is the\r\n * time it takes to walk 3/4 of a <em>Mil</em> at 18 minutes a <em>Mil</em>, or 13.5 minutes after sunset. The sun\r\n * is 3.7&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} at this time in Jerusalem on March 16, about 4 days\r\n * before the equinox, the day that a solar hour is 60 minutes.\r\n *\r\n * @see #getTzaisGeonim3Point7Degrees()\r\n */\n\nComplexZmanimCalendar.ZENITH_3_POINT_7 = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 3.7;\n/**\r\n * The zenith of 3.8&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\r\n * calculating <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> that <em>tzais</em> is the\r\n * time it takes to walk 3/4 of a <em>Mil</em> at 18 minutes a <em>Mil</em>, or 13.5 minutes after sunset. The sun\r\n * is 3.8&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} at this time in Jerusalem on March 16, about 4 days\r\n * before the equinox, the day that a solar hour is 60 minutes.\r\n *\r\n * @see #getTzaisGeonim3Point8Degrees()\r\n */\n\nComplexZmanimCalendar.ZENITH_3_POINT_8 = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 3.8;\n/**\r\n * The zenith of 5.95&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\r\n * calculating <em>tzais</em> (nightfall) according to some opinions. This calculation is based on the position of\r\n * the sun 24 minutes after sunset in Jerusalem on March 16, about 4 days before the equinox, the day that a solar\r\n * hour is 60 minutes, which calculates to 5.95&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}.\r\n *\r\n * @see #getTzaisGeonim5Point95Degrees()\r\n */\n\nComplexZmanimCalendar.ZENITH_5_POINT_95 = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 5.95;\n/**\r\n * The zenith of 7.083&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This is often referred to as\r\n * 7&deg;5' or 7&deg; and 5 minutes. This calculation is used for calculating <em>alos</em> (dawn) and\r\n * <em>tzais</em> (nightfall) according to some opinions. This calculation is based on the position of the sun 30\r\n * minutes after sunset in Jerusalem on March 16, about 4 days before the equinox, the day that a solar hour is 60\r\n * minutes, which calculates to 7.0833333&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}. This is time some\r\n * opinions consider dark enough for 3 stars to be visible. This is the opinion of the\r\n * <em><a href=\"http://www.hebrewbooks.org/1053\">Sh\"Ut Melamed Leho'il</a></em>, <em>Sh\"Ut Bnei Tziyon</em>, <em>Tenuvas\r\n * Sadeh</em> and very close to the time of the <em><a href=\"http://www.hebrewbooks.org/22044\">Mekor Chesed</a></em> of\r\n * the <em>Sefer chasidim</em>. TODO Confirm the proper source.\r\n *\r\n * @see #getTzaisGeonim7Point083Degrees()\r\n * @see #getBainHasmashosRT13Point5MinutesBefore7Point083Degrees()\r\n */\n\nComplexZmanimCalendar.ZENITH_7_POINT_083 = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 7 + 5 / 60;\n/**\r\n * The zenith of 10.2&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\r\n * calculating <em>misheyakir</em> according to some opinions. This calculation is based on the position of the sun\r\n * 45 minutes before {@link #getSunrise sunrise} in Jerusalem on March 16, about 4 days before the equinox, the day\r\n * that a solar hour is 60 minutes which calculates to 10.2&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}.\r\n *\r\n * @see #getMisheyakir10Point2Degrees()\r\n */\n\nComplexZmanimCalendar.ZENITH_10_POINT_2 = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 10.2;\n/**\r\n * The zenith of 11&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\r\n * calculating <em>misheyakir</em> according to some opinions. This calculation is based on the position of the sun\r\n * 48 minutes before {@link #getSunrise sunrise} in Jerusalem on March 16, about 4 days before the equinox, the day\r\n * that a solar hour is 60 minutes which calculates to 11&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}\r\n *\r\n * @see #getMisheyakir11Degrees()\r\n */\n\nComplexZmanimCalendar.ZENITH_11_DEGREES = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 11;\n/**\r\n * The zenith of 11.5&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\r\n * calculating <em>misheyakir</em> according to some opinions. This calculation is based on the position of the sun\r\n * 52 minutes before {@link #getSunrise sunrise} in Jerusalem on March 16, about 4 days before the equinox, the day\r\n * that a solar hour is 60 minutes which calculates to 11.5&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}\r\n *\r\n * @see #getMisheyakir11Point5Degrees()\r\n */\n\nComplexZmanimCalendar.ZENITH_11_POINT_5 = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 11.5;\n/**\r\n * The zenith of 13.24&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\r\n * calculating <em>Rabbeinu Tam's bain hashmashos</em> according to some opinions.\r\n * NOTE: See comments on {@link #getBainHasmashosRT13Point24Degrees} for additional details about the degrees.\r\n *\r\n * @see #getBainHasmashosRT13Point24Degrees\r\n *\r\n */\n\nComplexZmanimCalendar.ZENITH_13_POINT_24 = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 13.24;\n/**\r\n * The zenith of 19&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\r\n * calculating <em>alos</em> according to some opinions.\r\n *\r\n * @see #getAlos19Degrees()\r\n * @see #getAlos18Degrees()\r\n */\n\nComplexZmanimCalendar.ZENITH_19_DEGREES = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 19;\n/**\r\n * The zenith of 19.8&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\r\n * calculating <em>alos</em> (dawn) and <em>tzais</em> (nightfall) according to some opinions. This calculation is\r\n * based on the position of the sun 90 minutes after sunset in Jerusalem on March 16, about 4 days before the\r\n * equinox, the day that a solar hour is 60 minutes which calculates to 19.8&deg; below {@link #GEOMETRIC_ZENITH\r\n   * geometric zenith}\r\n *\r\n * @see #getTzais19Point8Degrees()\r\n * @see #getAlos19Point8Degrees()\r\n * @see #getAlos90()\r\n * @see #getTzais90()\r\n */\n\nComplexZmanimCalendar.ZENITH_19_POINT_8 = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 19.8;\n/**\r\n * The zenith of 26&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\r\n * calculating <em>alos</em> (dawn) and <em>tzais</em> (nightfall) according to some opinions. This calculation is\r\n * based on the position of the sun {@link #getAlos120() 120 minutes} after sunset in Jerusalem on March 16, about 4\r\n * days before the equinox, the day that a solar hour is 60 minutes which calculates to 26&deg; below\r\n * {@link #GEOMETRIC_ZENITH geometric zenith}\r\n *\r\n * @see #getAlos26Degrees()\r\n * @see #getTzais26Degrees()\r\n * @see #getAlos120()\r\n * @see #getTzais120()\r\n */\n\nComplexZmanimCalendar.ZENITH_26_DEGREES = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 26;\n/**\r\n * The zenith of 4.37&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\r\n * calculating <em>tzais</em> (nightfall) according to some opinions. This calculation is based on the position of\r\n * the sun {@link #getTzaisGeonim4Point37Degrees() 16 7/8 minutes} after sunset (3/4 of a 22.5 minute Mil) in\r\n * Jerusalem on March 16, about 4 days before the equinox, the day that a solar hour is 60 minutes which calculates\r\n * to 4.37&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}\r\n *\r\n * @see #getTzaisGeonim4Point37Degrees()\r\n */\n\nComplexZmanimCalendar.ZENITH_4_POINT_37 = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 4.37;\n/**\r\n * The zenith of 4.61&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\r\n * calculating <em>tzais</em> (nightfall) according to some opinions. This calculation is based on the position of\r\n * the sun {@link #getTzaisGeonim4Point37Degrees() 18 minutes} after sunset (3/4 of a 24 minute Mil) in Jerusalem on\r\n * March 16, about 4 days before the equinox, the day that a solar hour is 60 minutes which calculates to 4.61&deg;\r\n * below {@link #GEOMETRIC_ZENITH geometric zenith}\r\n *\r\n * @see #getTzaisGeonim4Point61Degrees()\r\n */\n\nComplexZmanimCalendar.ZENITH_4_POINT_61 = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 4.61;\n/**\r\n * The zenith of 5.88&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). TODO add more documentation\r\n * @see #getTzaisGeonim4Point8Degrees()\r\n */\n\nComplexZmanimCalendar.ZENITH_4_POINT_8 = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 4.8;\n/**\r\n * The zenith of 3.65&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\r\n * calculating <em>tzais</em> (nightfall) according to some opinions. This calculation is based on the position of\r\n * the sun {@link #getTzaisGeonim3Point65Degrees() 13.5 minutes} after sunset (3/4 of an 18 minute Mil) in Jerusalem\r\n * on March 16, about 4 days before the equinox, the day that a solar hour is 60 minutes which calculates to\r\n * 3.65&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}\r\n *\r\n * @see #getTzaisGeonim3Point65Degrees()\r\n */\n\nComplexZmanimCalendar.ZENITH_3_POINT_65 = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 3.65;\n/**\r\n * The zenith of 3.676&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). TODO add more documentation\r\n */\n\nComplexZmanimCalendar.ZENITH_3_POINT_676 = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 3.676;\n/**\r\n * The zenith of 5.88&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). TODO add more documentation\r\n */\n\nComplexZmanimCalendar.ZENITH_5_POINT_88 = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 5.88;\n/**\r\n * The zenith of 1.583&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\r\n * calculating <em>netz amiti</em> (sunrise) and <em>shkiah amiti</em> (sunset) based on the opinion of the\r\n * <em><a href=\"https://en.wikipedia.org/wiki/Shneur_Zalman_of_Liadi\">Baal Hatanya</a></em>.\r\n *\r\n * @see #getSunriseBaalHatanya()\r\n * @see #getSunsetBaalHatanya()\r\n */\n\nComplexZmanimCalendar.ZENITH_1_POINT_583 = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 1.583;\n/**\r\n * The zenith of 16.9&deg; below geometric zenith (90&deg;). This calculation is used for determining <em>alos</em>\r\n * (dawn) based on the opinion of the <em>Baal Hatanya</em>. It is based on the calculation that the time between dawn\r\n * and <em>netz amiti</em> (sunrise) is 72 minutes, the time that is takes to walk 4 <em>mil</em> at 18 minutes\r\n * a mil (<em><a href=\"https://en.wikipedia.org/wiki/Maimonides\">Rambam</a></em> and others). The sun's position at 72\r\n * minutes before {@link #getSunriseBaalHatanya <em>netz amiti</em> (sunrise)} in Jerusalem on the equinox (on March 16,\r\n * about 4 days before the astronomical equinox, the day that a solar hour is 60 minutes) is 16.9&deg; below\r\n * {@link #GEOMETRIC_ZENITH geometric zenith}.\r\n *\r\n * @see #getAlosBaalHatanya()\r\n */\n\nComplexZmanimCalendar.ZENITH_16_POINT_9 = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 16.9;\n/**\r\n * The zenith of 6&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for calculating\r\n * <em>tzais</em> (nightfall) based on the opinion of the <em>Baal Hatanya</em>. This calculation is based on the position\r\n * of the sun 24 minutes after {@link #getSunset sunset} in Jerusalem on March 16, about 4 days before the equinox, the day\r\n * that a solar hour is 60 minutes, which is 6&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}.\r\n *\r\n * @see #getTzaisBaalHatanya()\r\n */\n\nComplexZmanimCalendar.ZENITH_6_DEGREES = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 6;\n/**\r\n * calculating <em>tzais</em> (nightfall) according to some opinions. This is based on the calculations of <a href=\r\n * \"https://en.wikipedia.org/wiki/Yechiel_Michel_Tucazinsky\">Rabbi Yechiel Michel Tucazinsky</a> of the position of\r\n * the sun no later than {@link #getTzaisGeonim6Point45Degrees() 31 minutes} after sunset in Jerusalem, and at the\r\n * height of the summer solstice, this zman is 28 minutes after<em>shkiah</em>. This computes to 6.45&deg; below\r\n * {@link #GEOMETRIC_ZENITH geometric zenith}.\r\n *\r\n * @see #getTzaisGeonim6Point45Degrees()\r\n */\n\nComplexZmanimCalendar.ZENITH_6_POINT_45 = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 6.45;\n/**\r\n * The zenith of 7.65&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\r\n * calculating <em>misheyakir</em> according to some opinions.\r\n *\r\n * @see #getMisheyakir7Point65Degrees()\r\n */\n\nComplexZmanimCalendar.ZENITH_7_POINT_65 = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 7.65;\n/**\r\n * The zenith of 7.67&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\r\n * calculating <em>tzais</em> according to some opinions.\r\n *\r\n * @see #getMisheyakir7Point65Degrees()\r\n */\n\nComplexZmanimCalendar.ZENITH_7_POINT_67 = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 7.67;\n/**\r\n * The zenith of 9.3&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\r\n * calculating <em>tzais</em> (nightfall) according to some opinions.\r\n *\r\n * @see #getTzaisGeonim9Point3Degrees()\r\n */\n\nComplexZmanimCalendar.ZENITH_9_POINT_3 = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 9.3;\n/**\r\n * The zenith of 9.5&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\r\n * calculating <em>misheyakir</em> according to some opinions.\r\n *\r\n * @see #getMisheyakir9Point5Degrees()\r\n */\n\nComplexZmanimCalendar.ZENITH_9_POINT_5 = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 9.5;\n/**\r\n * The zenith of 9.75&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\r\n * calculating <em>alos</em> (dawn) and <em>tzais</em> (nightfall) according to some opinions.\r\n *\r\n * @see #getTzaisGeonim9Point75Degrees()\r\n */\n\nComplexZmanimCalendar.ZENITH_9_POINT_75 = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 9.75;","map":{"version":3,"sources":["../../src/ComplexZmanimCalendar.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { DateTime } from 'luxon';\r\nimport { Calendar, Long_MIN_VALUE, TimeZone } from './polyfills/Utils';\r\nimport { ZmanimCalendar } from './ZmanimCalendar';\r\nimport { JewishCalendar } from './hebrewcalendar/JewishCalendar';\r\n/**\r\n * <p>This class extends ZmanimCalendar and provides many more zmanim than available in the ZmanimCalendar. The basis for\r\n * most zmanim in this class are from the <em>sefer</em> <b><a href=\"http://hebrewbooks.org/9765\">Yisroel Vehazmanim</a></b>\r\n * by <b><a href=\"https://en.wikipedia.org/wiki/Yisroel_Dovid_Harfenes\">Rabbi Yisrael Dovid Harfenes</a></b>.\r\n * As an example of the number of different <em>zmanim</em> made available by this class, there are methods to return 14\r\n * different calculations for <em>alos</em> (dawn) and 25 for <em>tzais</em> available in this API. The real power of this\r\n * API is the ease in calculating <em>zmanim</em> that are not part of the library. The methods for <em>zmanim</em>\r\n * calculations not present in this class or it's superclass  {@link ZmanimCalendar} are contained in the\r\n * {@link AstronomicalCalendar}, the base class of the calendars in our API since they are generic methods for calculating\r\n * time based on degrees or time before or after {@link #getSunrise sunrise} and {@link #getSunset sunset} and are of interest\r\n * for calculation beyond <em>zmanim</em> calculations. Here are some examples.\r\n * <p>First create the Calendar for the location you would like to calculate:\r\n *\r\n * <pre style=\"background: #FEF0C9; display: inline-block;\">\r\n * String locationName = &quot;Lakewood, NJ&quot;;\r\n * double latitude = 40.0828; // Lakewood, NJ\r\n * double longitude = -74.2094; // Lakewood, NJ\r\n * double elevation = 20; // optional elevation correction in Meters\r\n * // the String parameter in getTimeZone() has to be a valid timezone listed in\r\n * // {@link java.util.TimeZone#getAvailableIDs()}\r\n * TimeZone timeZone = TimeZone.getTimeZone(&quot;America/New_York&quot;);\r\n * GeoLocation location = new GeoLocation(locationName, latitude, longitude, elevation, timeZone);\r\n * ComplexZmanimCalendar czc = new ComplexZmanimCalendar(location);\r\n * // Optionally set the date or it will default to today's date\r\n * czc.getCalendar().set(Calendar.MONTH, Calendar.FEBRUARY);\r\n * czc.getCalendar().set(Calendar.DAY_OF_MONTH, 8);</pre>\r\n *\r\n * <b>Note:</b> For locations such as Israel where the beginning and end of daylight savings time can fluctuate from\r\n * year to year, if your version of Java does not have an <a href=\r\n * \"http://www.oracle.com/technetwork/java/javase/tzdata-versions-138805.html\">up to date timezone database</a>, create a\r\n * {@link java.util.SimpleTimeZone} with the known start and end of DST.\r\n * To get <em>alos</em> calculated as 14&deg; below the horizon (as calculated in the calendars published in Montreal),\r\n * add {@link AstronomicalCalendar#GEOMETRIC_ZENITH} (90) to the 14&deg; offset to get the desired time:\r\n *\r\n * <pre style=\"background: #FEF0C9; display: inline-block;\">\r\n *  Date alos14 = czc.getSunriseOffsetByDegrees({@link AstronomicalCalendar#GEOMETRIC_ZENITH} + 14);</pre>\r\n *\r\n * To get <em>mincha gedola</em> calculated based on the <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\"\r\n * >Magen Avraham (MGA)</a></em> using a <em>shaah zmanis</em> based on the day starting\r\n * 16.1&deg; below the horizon (and ending 16.1&deg; after sunset) the following calculation can be used:\r\n\r\n *\r\n * <pre style=\"background: #FEF0C9; display: inline-block;\">\r\n * Date minchaGedola = czc.getTimeOffset(czc.getAlos16point1Degrees(), czc.getShaahZmanis16Point1Degrees() * 6.5);</pre>\r\n * <p>\r\n * or even simpler using the included convenience methods\r\n * <pre style=\"background: #FEF0C9; display: inline-block;\">\r\n * Date minchaGedola = czc.getMinchaGedola(czc.getAlos16point1Degrees(), czc.getShaahZmanis16Point1Degrees());</pre>\r\n *\r\n * A little more complex example would be calculating zmanim that rely on a <em>shaah zmanis</em> that is\r\n * not present in this library. While a drop more complex, it is still rather easy. An example would be to calculate\r\n * the <em><a href=\"https://en.wikipedia.org/wiki/Israel_Isserlein\">Trumas Hadeshen</a>'s</em> <em>alos</em> to\r\n * <em>tzais</em> based <em>plag hamincha</em> as calculated in the Machzikei Hadass calendar in Manchester, England.\r\n * A number of this calendar's zmanim are calculated based on a day starting at <em>alos</em> of 12&deg; before sunrise\r\n * and ending at <em>tzais</em> of 7.083&deg; after sunset. Be aware that since the <em>alos</em> and <em>tzais</em>\r\n * do not use identical degree based offsets, this leads to <em>chatzos</em> being at a time other than the\r\n * {@link #getSunTransit() solar transit} (solar midday). To calculate this zman, use the following steps. Note that\r\n * <em>plag hamincha</em> is 10.75 hours after the start of the day, and the following steps are all that it takes.\r\n *\r\n * <pre style=\"background: #FEF0C9; display: inline-block;\">\r\n * Date plag = czc.getPlagHamincha(czc.getSunriseOffsetByDegrees({@link AstronomicalCalendar#GEOMETRIC_ZENITH} + 12),\r\n *        czc.getSunsetOffsetByDegrees({@link AstronomicalCalendar#GEOMETRIC_ZENITH} + ZENITH_7_POINT_083));</pre>\r\n *\r\n * Something a drop more challenging, but still simple, would be calculating a zman using the same \"complex\" offset day\r\n * used in the above mentioned Manchester calendar, but for a <em>shaos zmaniyos</em> based <em>zman</em> not not\r\n * supported by this library, such as calculating the point that one should be <em>makpid</em>\r\n * not to eat on <em>erev Shabbos</em> or <em>erev Yom Tov</em>. This is 9 <em>shaos zmaniyos</em> into the day.\r\n * <ol>\r\n *  <li>Calculate the <em>shaah zmanis</em> in milliseconds for this day</li>\r\n *  <li>Add 9 of these <em>shaos zmaniyos</em> to alos starting at 12&deg;</li>\r\n * </ol>\r\n *\r\n * <pre style=\"background: #FEF0C9; display: inline-block;\">\r\n * long shaahZmanis = czc.getTemporalHour(czc.getSunriseOffsetByDegrees({@link AstronomicalCalendar#GEOMETRIC_ZENITH} + 12),\r\n *            czc.getSunsetOffsetByDegrees({@link AstronomicalCalendar#GEOMETRIC_ZENITH} + ZENITH_7_POINT_083));\r\n * Date sofZmanAchila = getTimeOffset(czc.getSunriseOffsetByDegrees({@link AstronomicalCalendar#GEOMETRIC_ZENITH} + 12),\r\n *          shaahZmanis * 9);</pre>\r\n *\r\n * Calculating this <em>sof zman achila</em> according to the <em><a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a></em>\r\n * is simplicity itself.\r\n * <pre style=\"background: #FEF0C9; display: inline-block;\">\r\n * Date sofZmanAchila = czc.getTimeOffset(czc.getSunrise(), czc.getShaahZmanisGra() * 9);</pre>\r\n *\r\n * <h2>Documentation from the {@link ZmanimCalendar} parent class</h2>\r\n * {@inheritDoc}\r\n *\r\n * @author &copy; Eliyahu Hershfeld 2004 - 2016\r\n */\r\nexport class ComplexZmanimCalendar extends ZmanimCalendar {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * The offset in minutes (defaults to 40) after sunset used for <em>tzeit</em> for Ateret Torah calculations.\r\n         * @see #getTzaisAteretTorah()\r\n         * @see #getAteretTorahSunsetOffset()\r\n         * @see #setAteretTorahSunsetOffset(double)\r\n         */\r\n        this.ateretTorahSunsetOffset = 40;\r\n    }\r\n    /*\r\n    constructor(location?: GeoLocation) {\r\n      super(location);\r\n    }\r\n    */\r\n    /**\r\n     * Default constructor will set a default {@link GeoLocation#GeoLocation()}, a default\r\n     * {@link AstronomicalCalculator#getDefault() AstronomicalCalculator} and default the calendar to the current date.\r\n     *\r\n     * @see AstronomicalCalendar#AstronomicalCalendar()\r\n     */\r\n    /*\r\n      public ComplexZmanimCalendar() {\r\n          super();\r\n      }\r\n  */\r\n    /**\r\n     * Method to return a <em>shaah zmanis</em> (temporal hour) calculated using a 19.8&deg; dip. This calculation\r\n     * divides the day based on the opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> that the day runs from dawn to dusk. Dawn for this calculation is\r\n     * when the sun is 19.8&deg; below the eastern geometric horizon before sunrise. Dusk for this is when the sun is\r\n     * 19.8&deg; below the western geometric horizon after sunset. This day is split into 12 equal parts with each part\r\n     * being a <em>shaah zmanis</em>.\r\n     *\r\n     * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em>. If the calculation can't be computed\r\n     *         such as northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle\r\n     *         where the sun may not reach low enough below the horizon for this calculation, a {@link Long#MIN_VALUE}\r\n     *         will be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n     */\r\n    getShaahZmanis19Point8Degrees() {\r\n        return this.getTemporalHour(this.getAlos19Point8Degrees(), this.getTzais19Point8Degrees());\r\n    }\r\n    /**\r\n     * Method to return a <em>shaah zmanis</em> (temporal hour) calculated using a 18&deg; dip. This calculation divides\r\n     * the day based on the opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> that the day runs from dawn to dusk. Dawn for this calculation is when\r\n     * the sun is 18&deg; below the eastern geometric horizon before sunrise. Dusk for this is when the sun is 18&deg;\r\n     * below the western geometric horizon after sunset. This day is split into 12 equal parts with each part being a\r\n     * <em>shaah zmanis</em>.\r\n     *\r\n     * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em>. If the calculation can't be computed\r\n     *         such as northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle\r\n     *         where the sun may not reach low enough below the horizon for this calculation, a {@link Long#MIN_VALUE}\r\n     *         will be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n     */\r\n    getShaahZmanis18Degrees() {\r\n        return this.getTemporalHour(this.getAlos18Degrees(), this.getTzais18Degrees());\r\n    }\r\n    /**\r\n     * Method to return a <em>shaah zmanis</em> (temporal hour) calculated using a dip of 26&deg;. This calculation\r\n     * divides the day based on the opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> that the day runs from dawn to dusk. Dawn for this calculation is\r\n     * when the sun is {@link #getAlos26Degrees() 26&deg;} below the eastern geometric horizon before sunrise. Dusk for\r\n     * this is when the sun is {@link #getTzais26Degrees() 26&deg;} below the western geometric horizon after sunset.\r\n     * This day is split into 12 equal parts with each part being a <em>shaah zmanis</em>.\r\n     *\r\n     * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em>. If the calculation can't be computed\r\n     *         such as northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle\r\n     *         where the sun may not reach low enough below the horizon for this calculation, a {@link Long#MIN_VALUE}\r\n     *         will be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n     */\r\n    getShaahZmanis26Degrees() {\r\n        return this.getTemporalHour(this.getAlos26Degrees(), this.getTzais26Degrees());\r\n    }\r\n    /**\r\n     * Method to return a <em>shaah zmanis</em> (temporal hour) calculated using a dip of 16.1&deg;. This calculation\r\n     * divides the day based on the opinion that the day runs from dawn to dusk. Dawn for this calculation is when the\r\n     * sun is 16.1&deg; below the eastern geometric horizon before sunrise and dusk is when the sun is 16.1&deg; below\r\n     * the western geometric horizon after sunset. This day is split into 12 equal parts with each part being a\r\n     * <em>shaah zmanis</em>.\r\n     *\r\n     * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em>. If the calculation can't be computed\r\n     *         such as northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle\r\n     *         where the sun may not reach low enough below the horizon for this calculation, a {@link Long#MIN_VALUE}\r\n     *         will be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n     *\r\n     * @see #getAlos16Point1Degrees()\r\n     * @see #getTzais16Point1Degrees()\r\n     * @see #getSofZmanShmaMGA16Point1Degrees()\r\n     * @see #getSofZmanTfilaMGA16Point1Degrees()\r\n     * @see #getMinchaGedola16Point1Degrees()\r\n     * @see #getMinchaKetana16Point1Degrees()\r\n     * @see #getPlagHamincha16Point1Degrees()\r\n     */\r\n    getShaahZmanis16Point1Degrees() {\r\n        return this.getTemporalHour(this.getAlos16Point1Degrees(), this.getTzais16Point1Degrees());\r\n    }\r\n    /**\r\n     * Method to return a <em>shaah zmanis</em> (solar hour) according to the opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em>. This calculation\r\n     * divides the day based on the opinion of the <em>MGA</em> that the day runs from dawn to dusk. Dawn for this\r\n     * calculation is 60 minutes before sunrise and dusk is 60 minutes after sunset. This day is split into 12 equal\r\n     * parts with each part being a <em>shaah zmanis</em>. Alternate methods of calculating a <em>shaah zmanis</em> are\r\n     * available in the subclass {@link ComplexZmanimCalendar}\r\n     *\r\n     * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em>. If the calculation can't be computed\r\n     *         such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\r\n     *         where it does not set, a {@link Long#MIN_VALUE} will be returned. See detailed explanation on top of the\r\n     *         {@link AstronomicalCalendar} documentation.\r\n     */\r\n    getShaahZmanis60Minutes() {\r\n        return this.getTemporalHour(this.getAlos60(), this.getTzais60());\r\n    }\r\n    /**\r\n     * Method to return a <em>shaah zmanis</em> (solar hour) according to the opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em>. This calculation\r\n     * divides the day based on the opinion of the <em>MGA</em> that the day runs from dawn to dusk. Dawn for this\r\n     * calculation is 72 minutes before sunrise and dusk is 72 minutes after sunset. This day is split into 12 equal\r\n     * parts with each part being a <em>shaah zmanis</em>. Alternate methods of calculating a <em>shaah zmanis</em> are\r\n     * available in the subclass {@link ComplexZmanimCalendar}\r\n     *\r\n     * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em>. If the calculation can't be computed\r\n     *         such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\r\n     *         where it does not set, a {@link Long#MIN_VALUE} will be returned. See detailed explanation on top of the\r\n     *         {@link AstronomicalCalendar} documentation.\r\n     */\r\n    getShaahZmanis72Minutes() {\r\n        return this.getShaahZmanisMGA();\r\n    }\r\n    /**\r\n     * Method to return a <em>shaah zmanis</em> (temporal hour) according to the opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> based on\r\n     * <em>alos</em> being {@link #getAlos72Zmanis() 72} minutes <em>zmaniyos</em> before {@link #getSunrise() sunrise}.\r\n     * This calculation divides the day based on the opinion of the <em>MGA</em> that the day runs from dawn to dusk.\r\n     * Dawn for this calculation is 72 minutes <em>zmaniyos</em> before sunrise and dusk is 72 minutes <em>zmaniyos</em>\r\n     * after sunset. This day is split into 12 equal parts with each part being a <em>shaah zmanis</em>. This is\r\n     * identical to 1/10th of the day from {@link #getSunrise() sunrise} to {@link #getSunset() sunset}.\r\n     *\r\n     * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em>. If the calculation can't be computed\r\n     *         such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\r\n     *         where it does not set, a {@link Long#MIN_VALUE} will be returned. See detailed explanation on top of the\r\n     *         {@link AstronomicalCalendar} documentation.\r\n     * @see #getAlos72Zmanis()\r\n     * @see #getTzais72Zmanis()\r\n     */\r\n    getShaahZmanis72MinutesZmanis() {\r\n        return this.getTemporalHour(this.getAlos72Zmanis(), this.getTzais72Zmanis());\r\n    }\r\n    /**\r\n     * Method to return a <em>shaah zmanis</em> (temporal hour) calculated using a dip of 90 minutes. This calculation\r\n     * divides the day based on the opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> that the day runs from dawn to dusk. Dawn for this calculation is\r\n     * 90 minutes before sunrise and dusk is 90 minutes after sunset. This day is split into 12 equal parts with each\r\n     * part being a <em>shaah zmanis</em>.\r\n     *\r\n     * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em>. If the calculation can't be computed\r\n     *         such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\r\n     *         where it does not set, a {@link Long#MIN_VALUE} will be returned. See detailed explanation on top of the\r\n     *         {@link AstronomicalCalendar} documentation.\r\n     */\r\n    getShaahZmanis90Minutes() {\r\n        return this.getTemporalHour(this.getAlos90(), this.getTzais90());\r\n    }\r\n    /**\r\n     * Method to return a <em>shaah zmanis</em> (temporal hour) according to the opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> based on\r\n     * <em>alos</em> being {@link #getAlos90Zmanis() 90} minutes <em>zmaniyos</em> before {@link #getSunrise() sunrise}.\r\n     * This calculation divides the day based on the opinion of the <em>MGA</em> that the day runs from dawn to dusk.\r\n     * Dawn for this calculation is 90 minutes <em>zmaniyos</em> before sunrise and dusk is 90 minutes <em>zmaniyos</em>\r\n     * after sunset. This day is split into 12 equal parts with each part being a <em>shaah zmanis</em>. This is\r\n     * identical to 1/8th of the day from {@link #getSunrise() sunrise} to {@link #getSunset() sunset}.\r\n     *\r\n     * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em>. If the calculation can't be computed\r\n     *         such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\r\n     *         where it does not set, a {@link Long#MIN_VALUE} will be returned. See detailed explanation on top of the\r\n     *         {@link AstronomicalCalendar} documentation.\r\n     * @see #getAlos90Zmanis()\r\n     * @see #getTzais90Zmanis()\r\n     */\r\n    getShaahZmanis90MinutesZmanis() {\r\n        return this.getTemporalHour(this.getAlos90Zmanis(), this.getTzais90Zmanis());\r\n    }\r\n    /**\r\n     * Method to return a <em>shaah zmanis</em> (temporal hour) according to the opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> based on\r\n     * <em>alos</em> being {@link #getAlos96Zmanis() 96} minutes <em>zmaniyos</em> before {@link #getSunrise() sunrise}.\r\n     * This calculation divides the day based on the opinion of the <em>MGA</em> that the day runs from dawn to dusk.\r\n     * Dawn for this calculation is 96 minutes <em>zmaniyos</em> before sunrise and dusk is 96 minutes <em>zmaniyos</em>\r\n     * after sunset. This day is split into 12 equal parts with each part being a <em>shaah zmanis</em>. This is\r\n     * identical to 1/7.5th of the day from {@link #getSunrise() sunrise} to {@link #getSunset() sunset}.\r\n     *\r\n     * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em>. If the calculation can't be computed\r\n     *         such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\r\n     *         where it does not set, a {@link Long#MIN_VALUE} will be returned. See detailed explanation on top of the\r\n     *         {@link AstronomicalCalendar} documentation.\r\n     * @see #getAlos96Zmanis()\r\n     * @see #getTzais96Zmanis()\r\n     */\r\n    getShaahZmanis96MinutesZmanis() {\r\n        return this.getTemporalHour(this.getAlos96Zmanis(), this.getTzais96Zmanis());\r\n    }\r\n    /**\r\n     * Method to return a <em>shaah zmanis</em> (temporal hour) according to the opinion of the\r\n     * <em>Chacham Yosef Harari-Raful</em> of <em>Yeshivat Ateret Torah</em> calculated with <em>alos</em> being 1/10th\r\n     * of sunrise to sunset day, or {@link #getAlos72Zmanis() 72} minutes <em>zmaniyos</em> of such a day before\r\n     * {@link #getSunrise() sunrise}, and <em>tzais</em> is usually calculated as {@link #getTzaisAteretTorah() 40\r\n       * minutes} (configurable to any offset via {@link #setAteretTorahSunsetOffset(double)}) after {@link #getSunset()\r\n       * sunset}. This day is split into 12 equal parts with each part being a <em>shaah zmanis</em>. Note that with this\r\n     * system, <em>chatzos</em> (mid-day) will not be the point that the sun is {@link #getSunTransit() halfway across\r\n       * the sky}.\r\n     *\r\n     * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em>. If the calculation can't be computed\r\n     *         such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\r\n     *         where it does not set, a {@link Long#MIN_VALUE} will be returned. See detailed explanation on top of the\r\n     *         {@link AstronomicalCalendar} documentation.\r\n     * @see #getAlos72Zmanis()\r\n     * @see #getTzaisAteretTorah()\r\n     * @see #getAteretTorahSunsetOffset()\r\n     * @see #setAteretTorahSunsetOffset(double)\r\n     */\r\n    getShaahZmanisAteretTorah() {\r\n        return this.getTemporalHour(this.getAlos72Zmanis(), this.getTzaisAteretTorah());\r\n    }\r\n    /**\r\n     * Method to return a <em>shaah zmanis</em> (temporal hour) calculated using a dip of 96 minutes. This calculation\r\n     * divides the day based on the opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> that the day runs from dawn to dusk. Dawn for this calculation is\r\n     * 96 minutes before sunrise and dusk is 96 minutes after sunset. This day is split into 12 equal parts with each\r\n     * part being a <em>shaah zmanis</em>.\r\n     *\r\n     * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em>. If the calculation can't be computed\r\n     *         such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\r\n     *         where it does not set, a {@link Long#MIN_VALUE} will be returned. See detailed explanation on top of the\r\n     *         {@link AstronomicalCalendar} documentation.\r\n     */\r\n    getShaahZmanis96Minutes() {\r\n        return this.getTemporalHour(this.getAlos96(), this.getTzais96());\r\n    }\r\n    /**\r\n     * Method to return a <em>shaah zmanis</em> (temporal hour) calculated using a dip of 120 minutes. This calculation\r\n     * divides the day based on the opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> that the day runs from dawn to dusk. Dawn for this calculation is\r\n     * 120 minutes before sunrise and dusk is 120 minutes after sunset. This day is split into 12 equal parts with each\r\n     * part being a <em>shaah zmanis</em>.\r\n     *\r\n     * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em>. If the calculation can't be computed\r\n     *         such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\r\n     *         where it does not set, a {@link Long#MIN_VALUE} will be returned. See detailed explanation on top of the\r\n     *         {@link AstronomicalCalendar} documentation.\r\n     */\r\n    getShaahZmanis120Minutes() {\r\n        return this.getTemporalHour(this.getAlos120(), this.getTzais120());\r\n    }\r\n    /**\r\n     * Method to return a <em>shaah zmanis</em> (temporal hour) according to the opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> based on\r\n     * <em>alos</em> being {@link #getAlos120Zmanis() 120} minutes <em>zmaniyos</em> before {@link #getSunrise()\r\n       * sunrise}. This calculation divides the day based on the opinion of the <em>MGA</em> that the day runs from dawn\r\n     * to dusk. Dawn for this calculation is 120 minutes <em>zmaniyos</em> before sunrise and dusk is 120 minutes\r\n     * <em>zmaniyos</em> after sunset. This day is split into 12 equal parts with each part being a\r\n     * <em>shaah zmanis</em>. This is identical to 1/6th of the day from {@link #getSunrise() sunrise} to\r\n     * {@link #getSunset() sunset}.\r\n     *\r\n     * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em>. If the calculation can't be computed\r\n     *         such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\r\n     *         where it does not set, a {@link Long#MIN_VALUE} will be returned. See detailed explanation on top of the\r\n     *         {@link AstronomicalCalendar} documentation.\r\n     * @see #getAlos120Zmanis()\r\n     * @see #getTzais120Zmanis()\r\n     */\r\n    getShaahZmanis120MinutesZmanis() {\r\n        return this.getTemporalHour(this.getAlos120Zmanis(), this.getTzais120Zmanis());\r\n    }\r\n    /**\r\n     * This method returns the time of <em>plag hamincha</em> based on sunrise being 120 minutes <em>zmaniyos</em>\r\n     * or 1/6th of the day before sunrise. This is calculated as 10.75 hours after {@link #getAlos120Zmanis() dawn}.\r\n     * The formula used is 10.75 * {@link #getShaahZmanis120MinutesZmanis()} after {@link #getAlos120Zmanis() dawn}.\r\n     *\r\n     * @return the <code>Date</code> of the time of <em>plag hamincha</em>. If the calculation can't be computed such as\r\n     *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n     *         does not set, a null will be returned. See detailed explanation on top of the\r\n     *         {@link AstronomicalCalendar} documentation.\r\n     *\r\n     * @see #getShaahZmanis120MinutesZmanis()\r\n     */\r\n    getPlagHamincha120MinutesZmanis() {\r\n        return this.getPlagHamincha(this.getAlos120Zmanis(), this.getTzais120Zmanis());\r\n    }\r\n    /**\r\n     * This method returns the time of <em>plag hamincha</em> according to the <em>Magen Avraham</em> with the day\r\n     * starting 120 minutes before sunrise and ending 120 minutes after sunset. This is calculated as 10.75 hours after\r\n     * {@link #getAlos120() dawn 120 minutes}. The formula used is\r\n     * 10.75 {@link #getShaahZmanis120Minutes()} after {@link #getAlos120()}.\r\n     *\r\n     * @return the <code>Date</code> of the time of <em>plag hamincha</em>. If the calculation can't be computed such as\r\n     *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n     *         does not set, a null will be returned. See detailed explanation on top of the\r\n     *         {@link AstronomicalCalendar} documentation.\r\n     *\r\n     * @see #getShaahZmanis120Minutes()\r\n     */\r\n    getPlagHamincha120Minutes() {\r\n        return this.getPlagHamincha(this.getAlos120(), this.getTzais120());\r\n    }\r\n    /**\r\n     * Method to return <em>alos</em> (dawn) calculated as 60 minutes before sunrise. This is the time to walk the\r\n     * distance of 4 <em>Mil</em> at 15 minutes a <em>Mil</em>. This seems to be the opinion of the <em><a href=\r\n     * \"https://en.wikipedia.org/wiki/Yair_Bacharach\">Chavas Yair</a></em> in the <em>Mekor Chaim, Orach Chaim Ch.\r\n     * 90</em>, though  the Mekor chaim in Ch. 58 and in the <em><a href=\r\n     * \"http://www.hebrewbooks.org/pdfpager.aspx?req=45193&amp;pgnum=214\">Chut Hashani Cha 97</a></em> states that\r\n     * a a person walks 3 and a 1/3 <em>mil</em> in an hour, or an 18 minute <em>mil</em>. Also see the <a href=\r\n     * \"https://he.wikipedia.org/wiki/%D7%9E%D7%9C%D7%9B%D7%99%D7%90%D7%9C_%D7%A6%D7%91%D7%99_%D7%98%D7%A0%D7%A0%D7%91%D7%95%D7%99%D7%9D\"\r\n     * >Divrei Malkiel</a> <a href=\"http://www.hebrewbooks.org/pdfpager.aspx?req=803&amp;pgnum=33\">Vol. 4, Ch. 20, page 34</a>) who\r\n     * mentions the 15 minute <em>mil</em> lechumra by baking matzos. Also see the <a href=\r\n     * \"https://en.wikipedia.org/wiki/Joseph_Colon_Trabotto\">Maharik</a> <a href=\r\n     * \"http://www.hebrewbooks.org/pdfpager.aspx?req=1142&amp;pgnum=216\">Ch. 173</a> where the questioner quoting the\r\n     * <a href=\"https://en.wikipedia.org/wiki/Eliezer_ben_Nathan\">Ra'avan</a> is of the opinion that the time to walk a\r\n     * <em>mil</em> is 15 minutes (5 <em>mil</em> in a little over an hour). There are many who believe that there is a\r\n     * <em>ta'us sofer</em> (scribe's error) in the Ra'avan, and it should 4 <em>mil</em> in a little over an hour, or an\r\n     * 18 minute <em>mil</em>. Time based offset calculations are based on the opinion of the\r\n     * <em><a href=\"https://en.wikipedia.org/wiki/Rishonim\">Rishonim</a></em> who stated that the time of the <em>neshef</em>\r\n     * (time between dawn and sunrise) does not vary by the time of year or location but purely depends on the time it takes to\r\n     * walk the distance of 4* <em>mil</em>. {@link #getTzaisGeonim9Point75Degrees()} is a related <em>zman</em> that is a\r\n     * degree based calculation based on 60 minutes.\r\n     *\r\n     * TODO: apply documentation to Tzais once reviewed.\r\n     *\r\n     * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\r\n     *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\r\n     *         a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n     *         documentation.\r\n     *\r\n     * @see #getTzaisGeonim9Point75Degrees()\r\n     */\r\n    getAlos60() {\r\n        return ComplexZmanimCalendar.getTimeOffset(this.getSunrise(), -60 * ComplexZmanimCalendar.MINUTE_MILLIS);\r\n    }\r\n    /**\r\n     * Method to return <em>alos</em> (dawn) calculated using 72 minutes <em>zmaniyos</em> or 1/10th of the day before\r\n     * sunrise. This is based on an 18 minute <em>Mil</em> so the time for 4 <em>Mil</em> is 72 minutes which is 1/10th\r\n     * of a day (12 * 60 = 720) based on the a day being from {@link #getSeaLevelSunrise() sea level sunrise} to\r\n     * {@link #getSeaLevelSunrise sea level sunset} or {@link #getSunrise() sunrise} to {@link #getSunset() sunset}\r\n     * (depending on the {@link #isUseElevation()} setting).\r\n     * The actual calculation is {@link #getSeaLevelSunrise()}- ( {@link #getShaahZmanisGra()} * 1.2). This calculation\r\n     * is used in the calendars published by <em><a href=\r\n     * \"https://en.wikipedia.org/wiki/Central_Rabbinical_Congress\">Hisachdus Harabanim D'Artzos Habris Ve'Canada</a></em>\r\n     *\r\n     * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\r\n     *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\r\n     *         a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n     *         documentation.\r\n     * @see #getShaahZmanisGra()\r\n     */\r\n    getAlos72Zmanis() {\r\n        const shaahZmanis = this.getShaahZmanisGra();\r\n        if (shaahZmanis === Long_MIN_VALUE) {\r\n            return null;\r\n        }\r\n        return ComplexZmanimCalendar.getTimeOffset(this.getElevationAdjustedSunrise(), shaahZmanis * -1.2);\r\n    }\r\n    /**\r\n     * Method to return <em>alos</em> (dawn) calculated using 96 minutes before before {@link #getSunrise() sunrise} or\r\n     * {@link #getSeaLevelSunrise() sea level sunrise} (depending on the {@link #isUseElevation()} setting) that is based\r\n     * on the time to walk the distance of 4 <em>Mil</em> at 24 minutes a <em>Mil</em>. Time based offset\r\n     * calculations for <em>alos</em> are based on the opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Rishonim\"\r\n     * >Rishonim</a></em> who stated that the time of the <em>Neshef</em> (time between dawn and sunrise) does not vary\r\n     * by the time of year or location but purely depends on the time it takes to walk the distance of 4 <em>Mil</em>.\r\n     *\r\n     * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\r\n     *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\r\n     *         a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n     *         documentation.\r\n     */\r\n    getAlos96() {\r\n        return ComplexZmanimCalendar.getTimeOffset(this.getElevationAdjustedSunrise(), -96 * ComplexZmanimCalendar.MINUTE_MILLIS);\r\n    }\r\n    /**\r\n     * Method to return <em>alos</em> (dawn) calculated using 90 minutes <em>zmaniyos</em> or 1/8th of the day before\r\n     * {@link #getSunrise() sunrise} or {@link #getSeaLevelSunrise() sea level sunrise} (depending on the {@link\r\n      * #isUseElevation()} setting). This is based on a 22.5 minute <em>Mil</em> so the time for 4 <em>Mil</em> is 90\r\n     * minutes which is 1/8th of a day (12 * 60) / 8 = 90\r\n     * The day is calculated from {@link #getSeaLevelSunrise() sea level sunrise} to {@link #getSeaLevelSunrise sea level\r\n       * sunset} or {@link #getSunrise() sunrise} to {@link #getSunset() sunset} (depending on the {@link #isUseElevation()}.\r\n     * The actual calculation used is {@link #getSunrise()} - ( {@link #getShaahZmanisGra()} * 1.5).\r\n     *\r\n     * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\r\n     *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\r\n     *         a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n     *         documentation.\r\n     * @see #getShaahZmanisGra()\r\n     */\r\n    getAlos90Zmanis() {\r\n        const shaahZmanis = this.getShaahZmanisGra();\r\n        if (shaahZmanis === Long_MIN_VALUE) {\r\n            return null;\r\n        }\r\n        return ComplexZmanimCalendar.getTimeOffset(this.getElevationAdjustedSunrise(), shaahZmanis * -1.5);\r\n    }\r\n    /**\r\n     * This method returns <em>alos</em> (dawn) calculated using 96 minutes <em>zmaniyos</em> or 1/7.5th of the day before\r\n     * {@link #getSunrise() sunrise} or {@link #getSeaLevelSunrise() sea level sunrise} (depending on the {@link\r\n      * #isUseElevation()} setting). This is based on a 24 minute <em>Mil</em> so the time for 4 <em>Mil</em> is 96\r\n     * minutes which is 1/7.5th of a day (12 * 60 / 7.5 = 96).\r\n     * The day is calculated from {@link #getSeaLevelSunrise() sea level sunrise} to {@link #getSeaLevelSunrise sea level\r\n       * sunset} or {@link #getSunrise() sunrise} to {@link #getSunset() sunset} (depending on the {@link #isUseElevation()}.\r\n     * The actual calculation used is {@link #getSunrise()} - ( {@link #getShaahZmanisGra()} * 1.6).\r\n     *\r\n     * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\r\n     *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\r\n     *         a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n     *         documentation.\r\n     * @see #getShaahZmanisGra()\r\n     */\r\n    getAlos96Zmanis() {\r\n        const shaahZmanis = this.getShaahZmanisGra();\r\n        if (shaahZmanis === Long_MIN_VALUE) {\r\n            return null;\r\n        }\r\n        return ComplexZmanimCalendar.getTimeOffset(this.getElevationAdjustedSunrise(), shaahZmanis * -1.6);\r\n    }\r\n    /**\r\n     * offset calculations for <em>alos</em> are based on the opinion of the <em><a href=\r\n     * \"https://en.wikipedia.org/wiki/Rishonim\">Rishonim</a></em> who stated that the time of the <em>Neshef</em>\r\n     * (time between dawn and sunrise) does not vary by the time of year or location but purely depends on the time it\r\n     * takes to walk the distance of 4 <em>Mil</em>.\r\n     *\r\n     * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\r\n     *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\r\n     *         a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n     *         documentation.\r\n     */\r\n    getAlos90() {\r\n        return ComplexZmanimCalendar.getTimeOffset(this.getElevationAdjustedSunrise(), -90 * ComplexZmanimCalendar.MINUTE_MILLIS);\r\n    }\r\n    /**\r\n     * opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Rishonim\">Rishonim</a></em> who stated that the time\r\n     * of the <em>Neshef</em> (time between dawn and sunrise) does not vary by the time of year or location but purely\r\n     * depends on the time it takes to walk the distance of 5\r\n     * <em>Mil</em>(<em>Ula</em>).\r\n     *\r\n     * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\r\n     *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\r\n     *         a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n     *         documentation.\r\n     */\r\n    getAlos120() {\r\n        return ComplexZmanimCalendar.getTimeOffset(this.getElevationAdjustedSunrise(), -120 * ComplexZmanimCalendar.MINUTE_MILLIS);\r\n    }\r\n    /**\r\n     * This method returns <em>alos</em> (dawn) calculated using 120 minutes <em>zmaniyos</em> or 1/6th of the day before\r\n     * {@link #getSunrise() sunrise} or {@link #getSeaLevelSunrise() sea level sunrise} (depending on the {@link\r\n      * #isUseElevation()} setting). This is based on a 24 minute <em>Mil</em> so the time for 5 <em>Mil</em> is 120\r\n     * minutes which is 1/6th of a day (12 * 60 / 6 = 120).\r\n     * The day is calculated from {@link #getSeaLevelSunrise() sea level sunrise} to {@link #getSeaLevelSunrise sea level\r\n     * sunset} or {@link #getSunrise() sunrise} to {@link #getSunset() sunset} (depending on the {@link #isUseElevation()}.\r\n     * The actual calculation used is {@link #getSunrise()} - ( {@link #getShaahZmanisGra()} * 2).\r\n     *\r\n     * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\r\n     *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\r\n     *         a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n     *         documentation.\r\n     * @see #getShaahZmanisGra()\r\n     */\r\n    getAlos120Zmanis() {\r\n        const shaahZmanis = this.getShaahZmanisGra();\r\n        if (shaahZmanis === Long_MIN_VALUE) {\r\n            return null;\r\n        }\r\n        return ComplexZmanimCalendar.getTimeOffset(this.getElevationAdjustedSunrise(), shaahZmanis * -2);\r\n    }\r\n    /**\r\n     * A method to return <em>alos</em> (dawn) calculated when the sun is {@link #ZENITH_26_DEGREES 26&deg;} below the\r\n     * eastern geometric horizon before sunrise. This calculation is based on the same calculation of\r\n     * {@link #getAlos120() 120 minutes} but uses a degree based calculation instead of 120 exact minutes. This\r\n     * calculation is based on the position of the sun 120 minutes before sunrise in Jerusalem during the equinox (on March\r\n     * 16, about 4 days before the astronomical equinox, the day that a solar hour is 60 minutes) which calculates to 26&deg;\r\n     * below {@link #GEOMETRIC_ZENITH geometric zenith}.\r\n     *\r\n     * @return the <code>Date</code> representing <em>alos</em>. If the calculation can't be computed such as northern\r\n     *         and southern locations even south of the Arctic Circle and north of the Antarctic Circle where the sun\r\n     *         may not reach low enough below the horizon for this calculation, a null will be returned. See detailed\r\n     *         explanation on top of the {@link AstronomicalCalendar} documentation.\r\n     * @see #ZENITH_26_DEGREES\r\n     * @see #getAlos120()\r\n     * @see #getTzais120()\r\n     */\r\n    getAlos26Degrees() {\r\n        return this.getSunriseOffsetByDegrees(ComplexZmanimCalendar.ZENITH_26_DEGREES);\r\n    }\r\n    /**\r\n     * A method to return <em>alos</em> (dawn) calculated when the sun is {@link #ASTRONOMICAL_ZENITH 18&deg;} below the\r\n     * eastern geometric horizon before sunrise.\r\n     *\r\n     * @return the <code>Date</code> representing <em>alos</em>. If the calculation can't be computed such as northern\r\n     *         and southern locations even south of the Arctic Circle and north of the Antarctic Circle where the sun\r\n     *         may not reach low enough below the horizon for this calculation, a null will be returned. See detailed\r\n     *         explanation on top of the {@link AstronomicalCalendar} documentation.\r\n     * @see #ASTRONOMICAL_ZENITH\r\n     */\r\n    getAlos18Degrees() {\r\n        return this.getSunriseOffsetByDegrees(ComplexZmanimCalendar.ASTRONOMICAL_ZENITH);\r\n    }\r\n    /**\r\n     * A method to return <em>alos</em> (dawn) calculated when the sun is {@link #ZENITH_19_DEGREES 19&deg;} below the\r\n     * eastern geometric horizon before sunrise. This is the <em><a href=\"https://en.wikipedia.org/wiki/Maimonides\"\r\n     * >Rambam</a></em>'s alos according to Rabbi Moshe Kosower's <a href=\r\n     * \"http://www.worldcat.org/oclc/145454098\">Maaglei Tzedek</a>, page 88, <a href=\r\n     * \"http://www.hebrewbooks.org/pdfpager.aspx?req=33464&amp;pgnum=13\">Ayeles Hashachar Vol. I, page 12</a>, <a href=\r\n     * \"http://www.hebrewbooks.org/pdfpager.aspx?req=55960&amp;pgnum=258\">Yom Valayla Shel Torah, Ch. 34, p. 222</a> and\r\n     * Rabbi Yaakov Shakow's <a href=\"http://www.worldcat.org/oclc/1043573513\">Luach Ikvei Hayom</a>.\r\n     *\r\n     * @return the <code>Date</code> representing <em>alos</em>. If the calculation can't be computed such as northern\r\n     *         and southern locations even south of the Arctic Circle and north of the Antarctic Circle where the sun\r\n     *         may not reach low enough below the horizon for this calculation, a null will be returned. See detailed\r\n     *         explanation on top of the {@link AstronomicalCalendar} documentation.\r\n     * @see #ASTRONOMICAL_ZENITH\r\n     */\r\n    getAlos19Degrees() {\r\n        return this.getSunriseOffsetByDegrees(ComplexZmanimCalendar.ZENITH_19_DEGREES);\r\n    }\r\n    /**\r\n     * Method to return <em>alos</em> (dawn) calculated when the sun is {@link #ZENITH_19_POINT_8 19.8&deg;} below the\r\n     * eastern geometric horizon before sunrise. This calculation is based on the same calculation of\r\n     * {@link #getAlos90() 90 minutes} but uses a degree based calculation instead of 90 exact minutes. This calculation\r\n     * is based on the position of the sun 90 minutes before sunrise in Jerusalem during the equinox (on March 16,\r\n     * about 4 days before the astronomical equinox, the day that a solar hour is 60 minutes) which calculates to\r\n     * 19.8&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}\r\n     *\r\n     * @return the <code>Date</code> representing <em>alos</em>. If the calculation can't be computed such as northern\r\n     *         and southern locations even south of the Arctic Circle and north of the Antarctic Circle where the sun\r\n     *         may not reach low enough below the horizon for this calculation, a null will be returned. See detailed\r\n     *         explanation on top of the {@link AstronomicalCalendar} documentation.\r\n     * @see #ZENITH_19_POINT_8\r\n     * @see #getAlos90()\r\n     */\r\n    getAlos19Point8Degrees() {\r\n        return this.getSunriseOffsetByDegrees(ComplexZmanimCalendar.ZENITH_19_POINT_8);\r\n    }\r\n    /**\r\n     * Method to return <em>alos</em> (dawn) calculated when the sun is {@link #ZENITH_16_POINT_1 16.1&deg;} below the\r\n     * eastern geometric horizon before sunrise. This calculation is based on the same calculation of\r\n     * {@link #getAlos72() 72 minutes} but uses a degree based calculation instead of 72 exact minutes. This calculation\r\n     * is based on the position of the sun 72 minutes before sunrise in Jerusalem during the equinox (on March 16,\r\n     * about 4 days before the astronomical equinox, the day that a solar hour is 60 minutes) which calculates to\r\n     * 16.1&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}.\r\n     *\r\n     * @return the <code>Date</code> representing <em>alos</em>. If the calculation can't be computed such as northern\r\n     *         and southern locations even south of the Arctic Circle and north of the Antarctic Circle where the sun\r\n     *         may not reach low enough below the horizon for this calculation, a null will be returned. See detailed\r\n     *         explanation on top of the {@link AstronomicalCalendar} documentation.\r\n     * @see #ZENITH_16_POINT_1\r\n     * @see #getAlos72()\r\n     */\r\n    getAlos16Point1Degrees() {\r\n        return this.getSunriseOffsetByDegrees(ComplexZmanimCalendar.ZENITH_16_POINT_1);\r\n    }\r\n    /**\r\n     * This method returns <em>misheyakir</em> based on the position of the sun when it is {@link #ZENITH_11_DEGREES\r\n     * 11.5&deg;} below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for calculating\r\n     * <em>misheyakir</em> according to some opinions. This calculation is based on the position of the sun 52 minutes\r\n     * before {@link #getSunrise sunrise} in Jerusalem during the equinox (on March 16, about 4 days before the\r\n     * astronomical equinox, the day that a solar hour is 60 minutes) which calculates to 11.5&deg; below\r\n     * {@link #GEOMETRIC_ZENITH geometric zenith}\r\n     *\r\n     * @return the <code>Date</code> of <em>misheyakir</em>. If the calculation can't be computed such as northern and\r\n     *         southern locations even south of the Arctic Circle and north of the Antarctic Circle where the sun may\r\n     *         not reach low enough below the horizon for this calculation, a null will be returned. See detailed\r\n     *         explanation on top of the {@link AstronomicalCalendar} documentation.\r\n     * @see #ZENITH_11_POINT_5\r\n     */\r\n    getMisheyakir11Point5Degrees() {\r\n        return this.getSunriseOffsetByDegrees(ComplexZmanimCalendar.ZENITH_11_POINT_5);\r\n    }\r\n    /**\r\n     * This method returns <em>misheyakir</em> based on the position of the sun when it is {@link #ZENITH_11_DEGREES\r\n     * 11&deg;} below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for calculating\r\n     * <em>misheyakir</em> according to some opinions. This calculation is based on the position of the sun 48 minutes\r\n     * before {@link #getSunrise sunrise} in Jerusalem during the equinox (on March 16, about 4 days before the\r\n     * astronomical equinox, the day that a solar hour is 60 minutes) which calculates to 11&deg; below\r\n     * {@link #GEOMETRIC_ZENITH geometric zenith}\r\n     *\r\n     * @return If the calculation can't be computed such as northern and southern locations even south of the Arctic\r\n     *         Circle and north of the Antarctic Circle where the sun may not reach low enough below the horizon for\r\n     *         this calculation, a null will be returned. See detailed explanation on top of the\r\n     *         {@link AstronomicalCalendar} documentation.\r\n     * @see #ZENITH_11_DEGREES\r\n     */\r\n    getMisheyakir11Degrees() {\r\n        return this.getSunriseOffsetByDegrees(ComplexZmanimCalendar.ZENITH_11_DEGREES);\r\n    }\r\n    /**\r\n     * This method returns <em>misheyakir</em> based on the position of the sun when it is {@link #ZENITH_10_POINT_2\r\n     * 10.2&deg;} below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for calculating\r\n     * <em>misheyakir</em> according to some opinions. This calculation is based on the position of the sun 45 minutes\r\n     * before {@link #getSunrise sunrise} in Jerusalem during the equinox (on March 16, about 4 days before the\r\n     * astronomical equinox, the day that a solar hour is 60 minutes) which calculates to 10.2&deg; below\r\n     * {@link #GEOMETRIC_ZENITH geometric zenith}\r\n     *\r\n     * @return the <code>Date</code> of <em>misheyakir</em>. If the calculation can't be computed such as\r\n     *         northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle where\r\n     *         the sun may not reach low enough below the horizon for this calculation, a null will be returned. See\r\n     *         detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n     * @see #ZENITH_10_POINT_2\r\n     */\r\n    getMisheyakir10Point2Degrees() {\r\n        return this.getSunriseOffsetByDegrees(ComplexZmanimCalendar.ZENITH_10_POINT_2);\r\n    }\r\n    /**\r\n     * This method returns <em>misheyakir</em> based on the position of the sun when it is {@link #ZENITH_7_POINT_65\r\n     * 7.65&deg;} below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). The degrees are based on a 35/36 minute zman\r\n     * during the equinox (on March 16, about 4 days before the astronomical equinox, the day that a solar hour is 60\r\n     * minutes) when the <em>neshef</em> (twilight) is the shortest. This time is based on <a href=\r\n     * \"https://en.wikipedia.org/wiki/Moshe_Feinstein\">Rabbi Moshe Feinstein</a> who writes in <a href=\r\n     * \"http://www.hebrewbooks.org/pdfpager.aspx?req=14677&amp;pgnum=7\">Ohr Hachaim Vol. 4, Ch. 6</a>)\r\n     * that misheyakir in New York is 35-40 minutes before sunset, something that is a drop less than 8&deg;.\r\n     * <a href=\"https://en.wikipedia.org/wiki/Yisroel_Taplin\">Rabbi Yisroel Taplin</a> in <a href=\r\n     * \"http://www.worldcat.org/oclc/889556744\">Zmanei Yisrael</a> (page 117) notes that <a href=\r\n     * \"https://en.wikipedia.org/wiki/Yaakov_Kamenetsky\">Rabbi Yaakov Kamenetsky</a> stated that it is not less than 36\r\n     * minutes before sunrise (maybe it is 40 minutes). Sefer Yisrael Vehazmanim (p. 7) quotes the Tamar Yifrach\r\n     * in the name of the <a href=\"https://en.wikipedia.org/wiki/Joel_Teitelbaum\">Satmar Rov</a> that one should be stringent\r\n     * not consider misheyakir before 36 minutes. This is also the accepted <a href=\"https://en.wikipedia.org/wiki/Minhag\">minhag</a>\r\n     * in <a href=\"https://en.wikipedia.org/wiki/Lakewood_Township,_New_Jersey\">Lakewood</a> that is used in the <a href=\r\n     * \"https://en.wikipedia.org/wiki/Beth_Medrash_Govoha\">Yeshiva</a>. This follows the opinion of <a href=\r\n     * \"https://en.wikipedia.org/wiki/Shmuel_Kamenetsky\">Rabbi Shmuel Kamenetsky</a> who provided the time of 35/36 minutes,\r\n     * but did not provide a degree based time. Since this zman depends on the level of light, Rabbi Yaakov Shakow presented\r\n     * this degree based calculations to Rabbi Kamenetsky who agreed to them.\r\n     *\r\n     * @return the <code>Date</code> of <em>misheyakir</em>. If the calculation can't be computed such as\r\n     *         northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle where\r\n     *         the sun may not reach low enough below the horizon for this calculation, a null will be returned. See\r\n     *         detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n     *\r\n     * @see #ZENITH_7_POINT_65\r\n     * @see #getMisheyakir9Point5Degrees()\r\n     */\r\n    getMisheyakir7Point65Degrees() {\r\n        return this.getSunriseOffsetByDegrees(ComplexZmanimCalendar.ZENITH_7_POINT_65);\r\n    }\r\n    /**\r\n     * This method returns <em>misheyakir</em> based on the position of the sun when it is {@link #ZENITH_9_POINT_5\r\n       * 9.5&deg;} below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is based on Rabbi Dovid Kronglass's\r\n     * Calculation of 45 minutes in Baltimore as mentioned in <a href=\r\n     * \"http://www.hebrewbooks.org/pdfpager.aspx?req=20287&amp;pgnum=29\">Divrei Chachamim No. 24</a> brought down by the <a href=\r\n     * \"http://www.hebrewbooks.org/pdfpager.aspx?req=50535&amp;pgnum=87\">Birur Halacha, Tinyana, Ch. 18</a>. This calculates to\r\n     * 9.5&deg;. Also see <a href=\"https://en.wikipedia.org/wiki/Jacob_Isaac_Neiman\">Rabbi Yaakov Yitzchok Neiman</a> in Kovetz\r\n     * Eitz Chaim Vol. 9, p. 202 that the Vyaan Yosef did not want to rely on times earlier than 45 minutes in New York. This\r\n     * <em>zman</em> is also used in the calendars published by Rabbi Hershel Edelstein. As mentioned in the <em>Yisroel\r\n     * Vehazmanim</em>,  Rabbi Edelstein who was given the 45 minute zman by Rabbi Bick. The calendars published by the\r\n     * <em><a href=\"https://en.wikipedia.org/wiki/Mizrahi_Jews\">Edot Hamizrach</a></em> communities also use this zman. This also\r\n     * follows the opinion of <a href=\"https://en.wikipedia.org/wiki/Shmuel_Kamenetsky\">Rabbi Shmuel Kamenetsky</a> who provided\r\n     * the time of 36 and 45 minutes, but did not provide a degree based time. Since this zman depends on the level of light,\r\n     * Rabbi Yaakov Shakow presented these degree based times to Rabbi Shmuel Kamenetsky who agreed to them.\r\n     *\r\n     * @return the <code>Date</code> of <em>misheyakir</em>. If the calculation can't be computed such as\r\n     *         northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle where\r\n     *         the sun may not reach low enough below the horizon for this calculation, a null will be returned. See\r\n     *         detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n     *\r\n     * @see #ZENITH_9_POINT_5\r\n     * @see #getMisheyakir7Point65Degrees()\r\n     */\r\n    getMisheyakir9Point5Degrees() {\r\n        return this.getSunriseOffsetByDegrees(ComplexZmanimCalendar.ZENITH_9_POINT_5);\r\n    }\r\n    /**\r\n     * opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> based\r\n     * on <em>alos</em> being {@link #getAlos19Point8Degrees() 19.8&deg;} before {@link #getSunrise() sunrise}. This\r\n     * time is 3 <em>{@link #getShaahZmanis19Point8Degrees() shaos zmaniyos}</em> (solar hours) after {@link\r\n      * #getAlos19Point8Degrees() dawn} based on the opinion of the <em>MGA</em> that the day is calculated from dawn to\r\n     * nightfall with both being 19.8&deg; below sunrise or sunset. This returns the time of 3 *\r\n     * {@link #getShaahZmanis19Point8Degrees()} after {@link #getAlos19Point8Degrees() dawn}.\r\n     *\r\n     * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\r\n     *         as northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle\r\n     *         where the sun may not reach low enough below the horizon for this calculation, a null will be returned.\r\n     *         See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n     * @see #getShaahZmanis19Point8Degrees()\r\n     * @see #getAlos19Point8Degrees()\r\n     */\r\n    getSofZmanShmaMGA19Point8Degrees() {\r\n        return this.getSofZmanShma(this.getAlos19Point8Degrees(), this.getTzais19Point8Degrees());\r\n    }\r\n    /**\r\n     * opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> based\r\n     * on <em>alos</em> being {@link #getAlos16Point1Degrees() 16.1&deg;} before {@link #getSunrise() sunrise}. This time\r\n     * is 3 <em>{@link #getShaahZmanis16Point1Degrees() shaos zmaniyos}</em> (solar hours) after\r\n     * {@link #getAlos16Point1Degrees() dawn} based on the opinion of the <em>MGA</em> that the day is calculated from\r\n     * dawn to nightfall with both being 16.1&deg; below sunrise or sunset. This returns the time of\r\n     *\r\n     * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\r\n     *         as northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle\r\n     *         where the sun may not reach low enough below the horizon for this calculation, a null will be returned.\r\n     *         See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n     * @see #getShaahZmanis16Point1Degrees()\r\n     * @see #getAlos16Point1Degrees()\r\n     */\r\n    getSofZmanShmaMGA16Point1Degrees() {\r\n        return this.getSofZmanShma(this.getAlos16Point1Degrees(), this.getTzais16Point1Degrees());\r\n    }\r\n    /**\r\n     * opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> based\r\n     * on <em>alos</em> being {@link #getAlos18Degrees() 18&deg;} before {@link #getSunrise() sunrise}. This time is 3\r\n     * <em>{@link #getShaahZmanis18Degrees() shaos zmaniyos}</em> (solar hours) after {@link #getAlos18Degrees() dawn}\r\n     * based on the opinion of the <em>MGA</em> that the day is calculated from dawn to nightfall with both being 18&deg;\r\n     * below sunrise or sunset. This returns the time of 3 * {@link #getShaahZmanis18Degrees()} after\r\n     * {@link #getAlos18Degrees() dawn}.\r\n     *\r\n     * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\r\n     *         as northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle\r\n     *         where the sun may not reach low enough below the horizon for this calculation, a null will be returned.\r\n     *         See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n     * @see #getShaahZmanis18Degrees()\r\n     * @see #getAlos18Degrees()\r\n     */\r\n    getSofZmanShmaMGA18Degrees() {\r\n        return this.getSofZmanShma(this.getAlos18Degrees(), this.getTzais18Degrees());\r\n    }\r\n    /**\r\n     * This method returns the latest <em>zman krias shema</em> (time to recite Shema in the morning) according to the\r\n     * opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> based on <em>alos</em> being {@link #getAlos72() 72} minutes before\r\n     * {@link #getSunrise() sunrise}. This time is 3 <em>{@link #getShaahZmanis72Minutes() shaos zmaniyos}</em> (solar\r\n     * hours) after {@link #getAlos72() dawn} based on the opinion of the <em>MGA</em> that the day is calculated from a\r\n     * {@link #getAlos72() dawn} of 72 minutes before sunrise to {@link #getTzais72() nightfall} of 72 minutes after\r\n     * sunset. This returns the time of 3 * {@link #getShaahZmanis72Minutes()} after {@link #getAlos72() dawn}. This\r\n     * class returns an identical time to {@link #getSofZmanShmaMGA()} and is repeated here for clarity.\r\n     *\r\n     * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\r\n     *         as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where\r\n     *         it does not set, a null will be returned. See detailed explanation on top of the\r\n     *         {@link AstronomicalCalendar} documentation.\r\n     * @see #getShaahZmanis72Minutes()\r\n     * @see #getAlos72()\r\n     * @see #getSofZmanShmaMGA()\r\n     */\r\n    getSofZmanShmaMGA72Minutes() {\r\n        return this.getSofZmanShmaMGA();\r\n    }\r\n    /**\r\n     * opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> based\r\n     * on <em>alos</em> being {@link #getAlos72Zmanis() 72} minutes <em>zmaniyos</em>, or 1/10th of the day before\r\n     * {@link #getSunrise() sunrise}. This time is 3 <em>{@link #getShaahZmanis90MinutesZmanis() shaos zmaniyos}</em>\r\n     * (solar hours) after {@link #getAlos72Zmanis() dawn} based on the opinion of the <em>MGA</em> that the day is\r\n     * calculated from a {@link #getAlos72Zmanis() dawn} of 72 minutes <em>zmaniyos</em>, or 1/10th of the day before\r\n     * {@link #getSeaLevelSunrise() sea level sunrise} to {@link #getTzais72Zmanis() nightfall} of 72 minutes\r\n     * <em>zmaniyos</em> after {@link #getSeaLevelSunset() sea level sunset}. This returns the time of 3 *\r\n     * {@link #getShaahZmanis72MinutesZmanis()} after {@link #getAlos72Zmanis() dawn}.\r\n     *\r\n     * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\r\n     *         as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where\r\n     *         it does not set, a null will be returned. See detailed explanation on top of the\r\n     *         {@link AstronomicalCalendar} documentation.\r\n     * @see #getShaahZmanis72MinutesZmanis()\r\n     * @see #getAlos72Zmanis()\r\n     */\r\n    getSofZmanShmaMGA72MinutesZmanis() {\r\n        return this.getSofZmanShma(this.getAlos72Zmanis(), this.getTzais72Zmanis());\r\n    }\r\n    /**\r\n     * opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> based on\r\n     * <em>alos</em> being {@link #getAlos90() 90} minutes before {@link #getSunrise() sunrise}. This time is 3\r\n     * <em>{@link #getShaahZmanis90Minutes() shaos zmaniyos}</em> (solar hours) after {@link #getAlos90() dawn} based on\r\n     * the opinion of the <em>MGA</em> that the day is calculated from a {@link #getAlos90() dawn} of 90 minutes before\r\n     * sunrise to {@link #getTzais90() nightfall} of 90 minutes after sunset. This returns the time of 3 *\r\n     * {@link #getShaahZmanis90Minutes()} after {@link #getAlos90() dawn}.\r\n     *\r\n     * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\r\n     *         as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where\r\n     *         it does not set, a null will be returned. See detailed explanation on top of the\r\n     *         {@link AstronomicalCalendar} documentation.\r\n     * @see #getShaahZmanis90Minutes()\r\n     * @see #getAlos90()\r\n     */\r\n    getSofZmanShmaMGA90Minutes() {\r\n        return this.getSofZmanShma(this.getAlos90(), this.getTzais90());\r\n    }\r\n    /**\r\n     * This method returns the latest <em>zman krias shema</em> (time to recite Shema in the morning) according to the\r\n     * opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> based on <em>alos</em> being {@link #getAlos90Zmanis() 90} minutes <em>zmaniyos</em>\r\n     * before {@link #getSunrise() sunrise}. This time is 3\r\n     * <em>{@link #getShaahZmanis90MinutesZmanis() shaos zmaniyos}</em> (solar hours) after {@link #getAlos90Zmanis()\r\n       * dawn} based on the opinion of the <em>MGA</em> that the day is calculated from a {@link #getAlos90Zmanis() dawn}\r\n     * of 90 minutes <em>zmaniyos</em> before sunrise to {@link #getTzais90Zmanis() nightfall} of 90 minutes\r\n     * <em>zmaniyos</em> after sunset. This returns the time of 3 * {@link #getShaahZmanis90MinutesZmanis()} after\r\n     * {@link #getAlos90Zmanis() dawn}.\r\n     *\r\n     * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\r\n     *         as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where\r\n     *         it does not set, a null will be returned. See detailed explanation on top of the\r\n     *         {@link AstronomicalCalendar} documentation.\r\n     * @see #getShaahZmanis90MinutesZmanis()\r\n     * @see #getAlos90Zmanis()\r\n     */\r\n    getSofZmanShmaMGA90MinutesZmanis() {\r\n        return this.getSofZmanShma(this.getAlos90Zmanis(), this.getTzais90Zmanis());\r\n    }\r\n    /**\r\n     * This method returns the latest <em>zman krias shema</em> (time to recite Shema in the morning) according to the\r\n     * opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> based on <em>alos</em> being {@link #getAlos96() 96} minutes before\r\n     * {@link #getSunrise() sunrise}. This time is 3 <em>{@link #getShaahZmanis96Minutes() shaos zmaniyos}</em> (solar\r\n     * hours) after {@link #getAlos96() dawn} based on the opinion of the <em>MGA</em> that the day is calculated from a\r\n     * {@link #getAlos96() dawn} of 96 minutes before sunrise to {@link #getTzais96() nightfall} of 96 minutes after\r\n     * sunset. This returns the time of 3 * {@link #getShaahZmanis96Minutes()} after {@link #getAlos96() dawn}.\r\n     *\r\n     * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\r\n     *         as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where\r\n     *         it does not set, a null will be returned. See detailed explanation on top of the\r\n     *         {@link AstronomicalCalendar} documentation.\r\n     * @see #getShaahZmanis96Minutes()\r\n     * @see #getAlos96()\r\n     */\r\n    getSofZmanShmaMGA96Minutes() {\r\n        return this.getSofZmanShma(this.getAlos96(), this.getTzais96());\r\n    }\r\n    /**\r\n     * This method returns the latest <em>zman krias shema</em> (time to recite Shema in the morning) according to the\r\n     * opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> based on <em>alos</em> being {@link #getAlos90Zmanis() 96} minutes <em>zmaniyos</em>\r\n     * before {@link #getSunrise() sunrise}. This time is 3\r\n     * <em>{@link #getShaahZmanis96MinutesZmanis() shaos zmaniyos}</em> (solar hours) after {@link #getAlos96Zmanis()\r\n       * dawn} based on the opinion of the <em>MGA</em> that the day is calculated from a {@link #getAlos96Zmanis() dawn}\r\n     * of 96 minutes <em>zmaniyos</em> before sunrise to {@link #getTzais90Zmanis() nightfall} of 96 minutes\r\n     * <em>zmaniyos</em> after sunset. This returns the time of 3 * {@link #getShaahZmanis96MinutesZmanis()} after\r\n     * {@link #getAlos96Zmanis() dawn}.\r\n     *\r\n     * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\r\n     *         as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where\r\n     *         it does not set, a null will be returned. See detailed explanation on top of the\r\n     *         {@link AstronomicalCalendar} documentation.\r\n     * @see #getShaahZmanis96MinutesZmanis()\r\n     * @see #getAlos96Zmanis()\r\n     */\r\n    getSofZmanShmaMGA96MinutesZmanis() {\r\n        return this.getSofZmanShma(this.getAlos96Zmanis(), this.getTzais96Zmanis());\r\n    }\r\n    /**\r\n     * This method returns the latest <em>zman krias shema</em> (time to recite Shema in the morning) calculated as 3\r\n     * hours (regular and not zmaniyos) before {@link ZmanimCalendar#getChatzos()}. This is the opinion of the\r\n     * <em>Shach</em> in the <em>Nekudas Hakesef (Yora Deah 184), Shevus Yaakov, Chasan Sofer</em> and others. This\r\n     * returns the time of 3 hours before {@link ZmanimCalendar#getChatzos()}. TODO: hyperlinks\r\n     *\r\n     * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\r\n     *         as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where\r\n     *         it does not set, a null will be returned. See detailed explanation on top of the\r\n     *         {@link AstronomicalCalendar} documentation.\r\n     * @see ZmanimCalendar#getChatzos()\r\n     * @see #getSofZmanTfila2HoursBeforeChatzos()\r\n     */\r\n    getSofZmanShma3HoursBeforeChatzos() {\r\n        return ComplexZmanimCalendar.getTimeOffset(this.getChatzos(), -180 * ComplexZmanimCalendar.MINUTE_MILLIS);\r\n    }\r\n    /**\r\n     * This method returns the latest <em>zman krias shema</em> (time to recite Shema in the morning) according to the\r\n     * opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> based on <em>alos</em> being {@link #getAlos120() 120} minutes or 1/6th of the day\r\n     * before {@link #getSunrise() sunrise}. This time is 3 <em>{@link #getShaahZmanis120Minutes() shaos zmaniyos}</em>\r\n     * (solar hours) after {@link #getAlos120() dawn} based on the opinion of the <em>MGA</em> that the day is\r\n     * calculated from a {@link #getAlos120() dawn} of 120 minutes before sunrise to {@link #getTzais120() nightfall} of\r\n     * 120 minutes after sunset. This returns the time of 3 * {@link #getShaahZmanis120Minutes()} after\r\n     * {@link #getAlos120() dawn}.\r\n     *\r\n     * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\r\n     *         as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where\r\n     *         it does not set, a null will be returned. See detailed explanation on top of the\r\n     *         {@link AstronomicalCalendar} documentation.\r\n     * @see #getShaahZmanis120Minutes()\r\n     * @see #getAlos120()\r\n     */\r\n    getSofZmanShmaMGA120Minutes() {\r\n        return this.getSofZmanShma(this.getAlos120(), this.getTzais120());\r\n    }\r\n    /**\r\n     * This method returns the latest <em>zman krias shema</em> (time to recite Shema in the morning) based on the\r\n     * opinion that the day starts at <em>{@link #getAlos16Point1Degrees() alos 16.1&deg;}</em> and ends at\r\n     * {@link #getSeaLevelSunset() sea level sunset}. 3 shaos zmaniyos are calculated based on this day and added to\r\n     * {@link #getAlos16Point1Degrees() alos}to reach this time. This time is 3 <em>shaos zmaniyos</em> (solar hours)\r\n     * after {@link #getAlos16Point1Degrees() dawn} based on the opinion that the day is calculated from a\r\n     * <em>{@link #getAlos16Point1Degrees() alos 16.1&deg;}</em> to {@link #getSeaLevelSunset() sea level sunset}.\r\n     * <b>Note: </b> Based on this calculation <em>chatzos</em> will not be at midday.\r\n     *\r\n     * @return the <code>Date</code> of the latest <em>zman krias shema</em> based on this day. If the calculation can't\r\n     *         be computed such as northern and southern locations even south of the Arctic Circle and north of the\r\n     *         Antarctic Circle where the sun may not reach low enough below the horizon for this calculation, a null\r\n     *         will be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n     * @see #getAlos16Point1Degrees()\r\n     * @see #getSeaLevelSunset()\r\n     */\r\n    getSofZmanShmaAlos16Point1ToSunset() {\r\n        return this.getSofZmanShma(this.getAlos16Point1Degrees(), this.getElevationAdjustedSunset());\r\n    }\r\n    /**\r\n     * This method returns the latest <em>zman krias shema</em> (time to recite Shema in the morning) based on the\r\n     * opinion that the day starts at <em>{@link #getAlos16Point1Degrees() alos 16.1&deg;}</em> and ends at\r\n     * <em> {@link #getTzaisGeonim7Point083Degrees() tzais 7.083&deg;}</em>. 3 <em>shaos zmaniyos</em> are calculated\r\n     * based on this day and added to <em>{@link #getAlos16Point1Degrees() alos}</em> to reach this time. This time is 3\r\n     * <em>shaos zmaniyos</em> (temporal hours) after <em>{@link #getAlos16Point1Degrees() alos 16.1&deg;}</em> based on\r\n     * the opinion that the day is calculated from a <em>{@link #getAlos16Point1Degrees() alos 16.1&deg;}</em> to\r\n     * <em>{@link #getTzaisGeonim7Point083Degrees() tzais 7.083&deg;}</em>.\r\n     * <b>Note: </b> Based on this calculation <em>chatzos</em> will not be at midday.\r\n     *\r\n     * @return the <code>Date</code> of the latest <em>zman krias shema</em> based on this calculation. If the\r\n     *         calculation can't be computed such as northern and southern locations even south of the Arctic Circle and\r\n     *         north of the Antarctic Circle where the sun may not reach low enough below the horizon for this\r\n     *         calculation, a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n     *         documentation.\r\n     * @see #getAlos16Point1Degrees()\r\n     * @see #getTzaisGeonim7Point083Degrees()\r\n     */\r\n    getSofZmanShmaAlos16Point1ToTzaisGeonim7Point083Degrees() {\r\n        return this.getSofZmanShma(this.getAlos16Point1Degrees(), this.getTzaisGeonim7Point083Degrees());\r\n    }\r\n    /**\r\n     * From the GRA in Kol Eliyahu on Berachos #173 that states that <em>zman krias shema</em> is calculated as half the\r\n     * time from {@link #getSeaLevelSunrise() sea level sunrise} to {@link #getFixedLocalChatzos() fixed local chatzos}.\r\n     * The GRA himself seems to contradict this when he stated that <em>zman krias shema</em> is 1/4 of the day from\r\n     * sunrise to sunset. See <em>Sarah Lamoed</em> #25 in Yisroel Vehazmanim Vol. III page 1016.\r\n     *\r\n     * @return the <code>Date</code> of the latest <em>zman krias shema</em> based on this calculation. If the\r\n     *         calculation can't be computed such as in the Arctic Circle where there is at least one day a year where\r\n     *         the sun does not rise, and one where it does not set, a null will be returned. See detailed explanation\r\n     *         on top of the {@link AstronomicalCalendar} documentation.\r\n     * @see #getFixedLocalChatzos()\r\n     * @deprecated As per a conversation Rabbi Yisroel Twerski had with Rabbi Harfenes, this zman published in the Yisrael\r\n     *         Vehazmanim was based on a misunderstanding and should not be used. This deprecated will be removed pending\r\n     *         confirmation from Rabbi Harfenes.\r\n     */\r\n    getSofZmanShmaKolEliyahu() {\r\n        const chatzos = this.getFixedLocalChatzos();\r\n        if (chatzos === null || this.getSunrise() === null) {\r\n            return null;\r\n        }\r\n        const diff = (chatzos.valueOf() - this.getElevationAdjustedSunrise().valueOf()) / 2;\r\n        return ComplexZmanimCalendar.getTimeOffset(chatzos, -diff);\r\n    }\r\n    /**\r\n     * This method returns the latest <em>zman tfila</em> (time to recite the morning prayers) according to the opinion\r\n     * of the <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> based on <em>alos</em> being {@link #getAlos19Point8Degrees() 19.8&deg;} before\r\n     * {@link #getSunrise() sunrise}. This time is 4 <em>{@link #getShaahZmanis19Point8Degrees() shaos zmaniyos}</em>\r\n     * (solar hours) after {@link #getAlos19Point8Degrees() dawn} based on the opinion of the <em>MGA</em> that the day\r\n     * is calculated from dawn to nightfall with both being 19.8&deg; below sunrise or sunset. This returns the time of\r\n     * 4 * {@link #getShaahZmanis19Point8Degrees()} after {@link #getAlos19Point8Degrees() dawn}.\r\n     *\r\n     * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\r\n     *         as northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle\r\n     *         where the sun may not reach low enough below the horizon for this calculation, a null will be returned.\r\n     *         See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n     *\r\n     * @see #getShaahZmanis19Point8Degrees()\r\n     * @see #getAlos19Point8Degrees()\r\n     */\r\n    getSofZmanTfilaMGA19Point8Degrees() {\r\n        return this.getSofZmanTfila(this.getAlos19Point8Degrees(), this.getTzais19Point8Degrees());\r\n    }\r\n    /**\r\n     * This method returns the latest <em>zman tfila</em> (time to recite the morning prayers) according to the opinion\r\n     * of the <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> based on <em>alos</em> being {@link #getAlos16Point1Degrees() 16.1&deg;} before\r\n     * {@link #getSunrise() sunrise}. This time is 4 <em>{@link #getShaahZmanis16Point1Degrees() shaos zmaniyos}</em>\r\n     * (solar hours) after {@link #getAlos16Point1Degrees() dawn} based on the opinion of the <em>MGA</em> that the day\r\n     * is calculated from dawn to nightfall with both being 16.1&deg; below sunrise or sunset. This returns the time of\r\n     * 4 * {@link #getShaahZmanis16Point1Degrees()} after {@link #getAlos16Point1Degrees() dawn}.\r\n     *\r\n     * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\r\n     *         as northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle\r\n     *         where the sun may not reach low enough below the horizon for this calculation, a null will be returned.\r\n     *         See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n     *\r\n     * @see #getShaahZmanis16Point1Degrees()\r\n     * @see #getAlos16Point1Degrees()\r\n     */\r\n    getSofZmanTfilaMGA16Point1Degrees() {\r\n        return this.getSofZmanTfila(this.getAlos16Point1Degrees(), this.getTzais16Point1Degrees());\r\n    }\r\n    /**\r\n     * This method returns the latest <em>zman tfila</em> (time to recite the morning prayers) according to the opinion\r\n     * of the <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> based on <em>alos</em> being {@link #getAlos18Degrees() 18&deg;} before {@link #getSunrise()\r\n       * sunrise}. This time is 4 <em>{@link #getShaahZmanis18Degrees() shaos zmaniyos}</em> (solar hours) after\r\n     * {@link #getAlos18Degrees() dawn} based on the opinion of the <em>MGA</em> that the day is calculated from dawn to\r\n     * nightfall with both being 18&deg; below sunrise or sunset. This returns the time of 4 *\r\n     * {@link #getShaahZmanis18Degrees()} after {@link #getAlos18Degrees() dawn}.\r\n     *\r\n     * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\r\n     *         as northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle\r\n     *         where the sun may not reach low enough below the horizon for this calculation, a null will be returned.\r\n     *         See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n     *\r\n     * @see #getShaahZmanis18Degrees()\r\n     * @see #getAlos18Degrees()\r\n     */\r\n    getSofZmanTfilaMGA18Degrees() {\r\n        return this.getSofZmanTfila(this.getAlos18Degrees(), this.getTzais18Degrees());\r\n    }\r\n    /**\r\n     * This method returns the latest <em>zman tfila</em> (time to recite the morning prayers) according to the opinion\r\n     * of the <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> based on <em>alos</em> being {@link #getAlos72() 72} minutes before {@link #getSunrise()\r\n       * sunrise}. This time is 4 <em>{@link #getShaahZmanis72Minutes() shaos zmaniyos}</em> (solar hours) after\r\n     * {@link #getAlos72() dawn} based on the opinion of the <em>MGA</em> that the day is calculated from a\r\n     * {@link #getAlos72() dawn} of 72 minutes before sunrise to {@link #getTzais72() nightfall} of 72 minutes after\r\n     * sunset. This returns the time of 4 * {@link #getShaahZmanis72Minutes()} after {@link #getAlos72() dawn}. This\r\n     * class returns an identical time to {@link #getSofZmanTfilaMGA()} and is repeated here for clarity.\r\n     *\r\n     * @return the <code>Date</code> of the latest <em>zman tfila</em>. If the calculation can't be computed such as in\r\n     *         the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n     *         does not set, a null will be returned. See detailed explanation on top of the\r\n     *         {@link AstronomicalCalendar} documentation.\r\n     * @see #getShaahZmanis72Minutes()\r\n     * @see #getAlos72()\r\n     * @see #getSofZmanShmaMGA()\r\n     */\r\n    getSofZmanTfilaMGA72Minutes() {\r\n        return this.getSofZmanTfilaMGA();\r\n    }\r\n    /**\r\n     * This method returns the latest <em>zman tfila</em> (time to the morning prayers) according to the opinion of the\r\n     *  <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> based on <em>alos</em> being {@link #getAlos72Zmanis() 72} minutes <em>zmaniyos</em> before\r\n     * {@link #getSunrise() sunrise}. This time is 4 <em>{@link #getShaahZmanis72MinutesZmanis() shaos zmaniyos}</em>\r\n     * (solar hours) after {@link #getAlos72Zmanis() dawn} based on the opinion of the <em>MGA</em> that the day is\r\n     * calculated from a {@link #getAlos72Zmanis() dawn} of 72 minutes <em>zmaniyos</em> before sunrise to\r\n     * {@link #getTzais72Zmanis() nightfall} of 72 minutes <em>zmaniyos</em> after sunset. This returns the time of 4 *\r\n     * {@link #getShaahZmanis72MinutesZmanis()} after {@link #getAlos72Zmanis() dawn}.\r\n     *\r\n     * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\r\n     *         as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where\r\n     *         it does not set, a null will be returned. See detailed explanation on top of the\r\n     *         {@link AstronomicalCalendar} documentation.\r\n     * @see #getShaahZmanis72MinutesZmanis()\r\n     * @see #getAlos72Zmanis()\r\n     */\r\n    getSofZmanTfilaMGA72MinutesZmanis() {\r\n        return this.getSofZmanTfila(this.getAlos72Zmanis(), this.getTzais72Zmanis());\r\n    }\r\n    /**\r\n     * This method returns the latest <em>zman tfila</em> (time to recite the morning prayers) according to the opinion\r\n     * of the  <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> based on <em>alos</em> being {@link #getAlos90() 90} minutes before {@link #getSunrise()\r\n       * sunrise}. This time is 4 <em>{@link #getShaahZmanis90Minutes() shaos zmaniyos}</em> (solar hours) after\r\n     * {@link #getAlos90() dawn} based on the opinion of the <em>MGA</em> that the day is calculated from a\r\n     * {@link #getAlos90() dawn} of 90 minutes before sunrise to {@link #getTzais90() nightfall} of 90 minutes after\r\n     * sunset. This returns the time of 4 * {@link #getShaahZmanis90Minutes()} after {@link #getAlos90() dawn}.\r\n     *\r\n     * @return the <code>Date</code> of the latest <em>zman tfila</em>. If the calculation can't be computed such as in\r\n     *         the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n     *         does not set, a null will be returned. See detailed explanation on top of the\r\n     *         {@link AstronomicalCalendar} documentation.\r\n     * @see #getShaahZmanis90Minutes()\r\n     * @see #getAlos90()\r\n     */\r\n    getSofZmanTfilaMGA90Minutes() {\r\n        return this.getSofZmanTfila(this.getAlos90(), this.getTzais90());\r\n    }\r\n    /**\r\n     * This method returns the latest <em>zman tfila</em> (time to the morning prayers) according to the opinion of the\r\n     *  <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> based on <em>alos</em> being {@link #getAlos90Zmanis() 90} minutes <em>zmaniyos</em> before\r\n     * {@link #getSunrise() sunrise}. This time is 4 <em>{@link #getShaahZmanis90MinutesZmanis() shaos zmaniyos}</em>\r\n     * (solar hours) after {@link #getAlos90Zmanis() dawn} based on the opinion of the <em>MGA</em> that the day is\r\n     * calculated from a {@link #getAlos90Zmanis() dawn} of 90 minutes <em>zmaniyos</em> before sunrise to\r\n     * {@link #getTzais90Zmanis() nightfall} of 90 minutes <em>zmaniyos</em> after sunset. This returns the time of 4 *\r\n     * {@link #getShaahZmanis90MinutesZmanis()} after {@link #getAlos90Zmanis() dawn}.\r\n     *\r\n     * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\r\n     *         as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where\r\n     *         it does not set, a null will be returned. See detailed explanation on top of the\r\n     *         {@link AstronomicalCalendar} documentation.\r\n     * @see #getShaahZmanis90MinutesZmanis()\r\n     * @see #getAlos90Zmanis()\r\n     */\r\n    getSofZmanTfilaMGA90MinutesZmanis() {\r\n        return this.getSofZmanTfila(this.getAlos90Zmanis(), this.getTzais90Zmanis());\r\n    }\r\n    /**\r\n     * This method returns the latest <em>zman tfila</em> (time to recite the morning prayers) according to the opinion\r\n     * of the  <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> based on <em>alos</em> being {@link #getAlos96() 96} minutes before {@link #getSunrise()\r\n       * sunrise}. This time is 4 <em>{@link #getShaahZmanis96Minutes() shaos zmaniyos}</em> (solar hours) after\r\n     * {@link #getAlos96() dawn} based on the opinion of the <em>MGA</em> that the day is calculated from a\r\n     * {@link #getAlos96() dawn} of 96 minutes before sunrise to {@link #getTzais96() nightfall} of 96 minutes after\r\n     * sunset. This returns the time of 4 * {@link #getShaahZmanis96Minutes()} after {@link #getAlos96() dawn}.\r\n     *\r\n     * @return the <code>Date</code> of the latest <em>zman tfila</em>. If the calculation can't be computed such as in\r\n     *         the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n     *         does not set, a null will be returned. See detailed explanation on top of the\r\n     *         {@link AstronomicalCalendar} documentation.\r\n     * @see #getShaahZmanis96Minutes()\r\n     * @see #getAlos96()\r\n     */\r\n    getSofZmanTfilaMGA96Minutes() {\r\n        return this.getSofZmanTfila(this.getAlos96(), this.getTzais96());\r\n    }\r\n    /**\r\n     * This method returns the latest <em>zman tfila</em> (time to the morning prayers) according to the opinion of the\r\n     *  <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> based on <em>alos</em> being {@link #getAlos96Zmanis() 96} minutes <em>zmaniyos</em> before\r\n     * {@link #getSunrise() sunrise}. This time is 4 <em>{@link #getShaahZmanis96MinutesZmanis() shaos zmaniyos}</em>\r\n     * (solar hours) after {@link #getAlos96Zmanis() dawn} based on the opinion of the <em>MGA</em> that the day is\r\n     * calculated from a {@link #getAlos96Zmanis() dawn} of 96 minutes <em>zmaniyos</em> before sunrise to\r\n     * {@link #getTzais96Zmanis() nightfall} of 96 minutes <em>zmaniyos</em> after sunset. This returns the time of 4 *\r\n     * {@link #getShaahZmanis96MinutesZmanis()} after {@link #getAlos96Zmanis() dawn}.\r\n     *\r\n     * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\r\n     *         as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where\r\n     *         it does not set, a null will be returned. See detailed explanation on top of the\r\n     *         {@link AstronomicalCalendar} documentation.\r\n     * @see #getShaahZmanis90MinutesZmanis()\r\n     * @see #getAlos90Zmanis()\r\n     */\r\n    getSofZmanTfilaMGA96MinutesZmanis() {\r\n        return this.getSofZmanTfila(this.getAlos96Zmanis(), this.getTzais96Zmanis());\r\n    }\r\n    /**\r\n     * This method returns the latest <em>zman tfila</em> (time to recite the morning prayers) according to the opinion\r\n     * of the  <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> based on <em>alos</em> being {@link #getAlos120() 120} minutes before {@link #getSunrise()\r\n       * sunrise} . This time is 4 <em>{@link #getShaahZmanis120Minutes() shaos zmaniyos}</em> (solar hours) after\r\n     * {@link #getAlos120() dawn} based on the opinion of the <em>MGA</em> that the day is calculated from a\r\n     * {@link #getAlos120() dawn} of 120 minutes before sunrise to {@link #getTzais120() nightfall} of 120 minutes after\r\n     * sunset. This returns the time of 4 * {@link #getShaahZmanis120Minutes()} after {@link #getAlos120() dawn}.\r\n     *\r\n     * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\r\n     *         as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where\r\n     *         it does not set, a null will be returned. See detailed explanation on top of the\r\n     *         {@link AstronomicalCalendar} documentation.\r\n     * @see #getShaahZmanis120Minutes()\r\n     * @see #getAlos120()\r\n     */\r\n    getSofZmanTfilaMGA120Minutes() {\r\n        return this.getSofZmanTfila(this.getAlos120(), this.getTzais120());\r\n    }\r\n    /**\r\n     * This method returns the latest <em>zman tfila</em> (time to recite the morning prayers) calculated as 2 hours\r\n     * before {@link ZmanimCalendar#getChatzos()}. This is based on the opinions that calculate\r\n     * <em>sof zman krias shema</em> as {@link #getSofZmanShma3HoursBeforeChatzos()}. This returns the time of 2 hours\r\n     * before {@link ZmanimCalendar#getChatzos()}.\r\n     * TODO: Add hyperlinks to documentation\r\n     *\r\n     * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\r\n     *         as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where\r\n     *         it does not set, a null will be returned. See detailed explanation on top of the\r\n     *         {@link AstronomicalCalendar} documentation.\r\n     * @see ZmanimCalendar#getChatzos()\r\n     * @see #getSofZmanShma3HoursBeforeChatzos()\r\n     */\r\n    getSofZmanTfila2HoursBeforeChatzos() {\r\n        return ComplexZmanimCalendar.getTimeOffset(this.getChatzos(), -120 * ComplexZmanimCalendar.MINUTE_MILLIS);\r\n    }\r\n    /**\r\n     * This method returns mincha gedola calculated as 30 minutes after <em>{@link #getChatzos() chatzos}</em> and not\r\n     * 1/2 of a <em>{@link #getShaahZmanisGra() shaah zmanis}</em> after <em>{@link #getChatzos() chatzos}</em> as\r\n     * calculated by {@link #getMinchaGedola}. Some use this time to delay the start of mincha in the winter when 1/2 of\r\n     * a <em>{@link #getShaahZmanisGra() shaah zmanis}</em> is less than 30 minutes. See\r\n     * {@link #getMinchaGedolaGreaterThan30()}for a convenience method that returns the later of the 2 calculations. One\r\n     * should not use this time to start <em>mincha</em> before the standard\r\n     * <em>{@link #getMinchaGedola() mincha gedola}</em>. See <em>Shulchan Aruch\r\n     * Orach Chayim Siman Raish Lamed Gimel seif alef</em> and the <em>Shaar Hatziyon seif katan ches</em>.\r\n     * TODO: Add hyperlinks to documentation.\r\n     *\r\n     * @return the <code>Date</code> of 30 minutes after <em>chatzos</em>. If the calculation can't be computed such as\r\n     *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n     *         does not set, a null will be returned. See detailed explanation on top of the\r\n     *         {@link AstronomicalCalendar} documentation.\r\n     * @see #getMinchaGedola()\r\n     * @see #getMinchaGedolaGreaterThan30()\r\n     */\r\n    getMinchaGedola30Minutes() {\r\n        return ComplexZmanimCalendar.getTimeOffset(this.getChatzos(), ComplexZmanimCalendar.MINUTE_MILLIS * 30);\r\n    }\r\n    /**\r\n     * This method returns the time of <em>mincha gedola</em> according to the Magen Avraham with the day starting 72\r\n     * minutes before sunrise and ending 72 minutes after sunset. This is the earliest time to pray <em>mincha</em>. For\r\n     * more information on this see the documentation on <em>{@link #getMinchaGedola() mincha gedola}</em>. This is\r\n     * calculated as 6.5 {@link #getTemporalHour() solar hours} after alos. The calculation used is 6.5 *\r\n     * {@link #getShaahZmanis72Minutes()} after {@link #getAlos72() alos}.\r\n     *\r\n     * @see #getAlos72()\r\n     * @see #getMinchaGedola()\r\n     * @see #getMinchaKetana()\r\n     * @see ZmanimCalendar#getMinchaGedola()\r\n     * @return the <code>Date</code> of the time of mincha gedola. If the calculation can't be computed such as in the\r\n     *         Arctic Circle where there is at least one day a year where the sun does not rise, and one where it does\r\n     *         not set, a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n     *         documentation.\r\n     */\r\n    getMinchaGedola72Minutes() {\r\n        return this.getMinchaGedola(this.getAlos72(), this.getTzais72());\r\n    }\r\n    /**\r\n     * This method returns the time of <em>mincha gedola</em> according to the Magen Avraham with the day starting and\r\n     * ending 16.1&deg; below the horizon. This is the earliest time to pray <em>mincha</em>. For more information on\r\n     * this see the documentation on <em>{@link #getMinchaGedola() mincha gedola}</em>. This is calculated as 6.5\r\n     * {@link #getTemporalHour() solar hours} after alos. The calculation used is 6.5 *\r\n     * {@link #getShaahZmanis16Point1Degrees()} after {@link #getAlos16Point1Degrees() alos}.\r\n     *\r\n     * @see #getShaahZmanis16Point1Degrees()\r\n     * @see #getMinchaGedola()\r\n     * @see #getMinchaKetana()\r\n     * @return the <code>Date</code> of the time of mincha gedola. If the calculation can't be computed such as northern\r\n     *         and southern locations even south of the Arctic Circle and north of the Antarctic Circle where the sun\r\n     *         may not reach low enough below the horizon for this calculation, a null will be returned. See detailed\r\n     *         explanation on top of the {@link AstronomicalCalendar} documentation.\r\n     */\r\n    getMinchaGedola16Point1Degrees() {\r\n        return this.getMinchaGedola(this.getAlos16Point1Degrees(), this.getTzais16Point1Degrees());\r\n    }\r\n    /**\r\n     * This is a conveniance method that returns the later of {@link #getMinchaGedola()} and\r\n     * {@link #getMinchaGedola30Minutes()}. In the winter when 1/2 of a <em>{@link #getShaahZmanisGra() shaah zmanis}</em> is\r\n     * less than 30 minutes {@link #getMinchaGedola30Minutes()} will be returned, otherwise {@link #getMinchaGedola()}\r\n     * will be returned.\r\n     *\r\n     * @return the <code>Date</code> of the later of {@link #getMinchaGedola()} and {@link #getMinchaGedola30Minutes()}.\r\n     *         If the calculation can't be computed such as in the Arctic Circle where there is at least one day a year\r\n     *         where the sun does not rise, and one where it does not set, a null will be returned. See detailed\r\n     *         explanation on top of the {@link AstronomicalCalendar} documentation.\r\n     */\r\n    getMinchaGedolaGreaterThan30() {\r\n        if (this.getMinchaGedola30Minutes() === null || this.getMinchaGedola() === null) {\r\n            return null;\r\n        }\r\n        return DateTime.max(this.getMinchaGedola30Minutes(), this.getMinchaGedola());\r\n    }\r\n    /**\r\n     * starting and ending 16.1&deg; below the horizon. This is the preferred earliest time to pray <em>mincha</em>\r\n     * according to the opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Maimonides\">Rambam</a></em> and others.\r\n     * For more information on this see the documentation on <em>{@link #getMinchaGedola() mincha gedola}</em>. This is\r\n     * calculated as 9.5 {@link #getTemporalHour() solar hours} after alos. The calculation used is 9.5 *\r\n     * {@link #getShaahZmanis16Point1Degrees()} after {@link #getAlos16Point1Degrees() alos}.\r\n     *\r\n     * @see #getShaahZmanis16Point1Degrees()\r\n     * @see #getMinchaGedola()\r\n     * @see #getMinchaKetana()\r\n     * @return the <code>Date</code> of the time of mincha ketana. If the calculation can't be computed such as northern\r\n     *         and southern locations even south of the Arctic Circle and north of the Antarctic Circle where the sun\r\n     *         may not reach low enough below the horizon for this calculation, a null will be returned. See detailed\r\n     *         explanation on top of the {@link AstronomicalCalendar} documentation.\r\n     */\r\n    getMinchaKetana16Point1Degrees() {\r\n        return this.getMinchaKetana(this.getAlos16Point1Degrees(), this.getTzais16Point1Degrees());\r\n    }\r\n    /**\r\n     * starting 72 minutes before sunrise and ending 72 minutes after sunset. This is the preferred earliest time to pray\r\n     * <em>mincha</em> according to the opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Maimonides\">Rambam</a></em>\r\n     * and others. For more information on this see the documentation on <em>{@link #getMinchaGedola() mincha gedola}</em>.\r\n     * This is calculated as 9.5 {@link #getShaahZmanis72Minutes()} after <em>alos</em>. The calculation used is 9.5 *\r\n     * {@link #getShaahZmanis72Minutes()} after <em>{@link #getAlos72() alos}</em>.\r\n     *\r\n     * @see #getShaahZmanis16Point1Degrees()\r\n     * @see #getMinchaGedola()\r\n     * @see #getMinchaKetana()\r\n     * @return the <code>Date</code> of the time of mincha ketana. If the calculation can't be computed such as in the\r\n     *         Arctic Circle where there is at least one day a year where the sun does not rise, and one where it does\r\n     *         not set, a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n     *         documentation.\r\n     */\r\n    getMinchaKetana72Minutes() {\r\n        return this.getMinchaKetana(this.getAlos72(), this.getTzais72());\r\n    }\r\n    /**\r\n     * This method returns the time of <em>plag hamincha</em> according to the <em>Magen Avraham</em> with the day\r\n     * starting 60 minutes before sunrise and ending 60 minutes after sunset. This is calculated as 10.75 hours after\r\n     * {@link #getAlos60() dawn}. The formula used is\r\n     * 10.75 {@link #getShaahZmanis60Minutes()} after {@link #getAlos60()}.\r\n     *\r\n     * @return the <code>Date</code> of the time of <em>plag hamincha</em>. If the calculation can't be computed such as\r\n     *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n     *         does not set, a null will be returned. See detailed explanation on top of the\r\n     *         {@link AstronomicalCalendar} documentation.\r\n     *\r\n     * @see #getShaahZmanis60Minutes()\r\n     */\r\n    getPlagHamincha60Minutes() {\r\n        return this.getPlagHamincha(this.getAlos60(), this.getTzais60());\r\n    }\r\n    /**\r\n     * This method returns the time of <em>plag hamincha</em> according to the <em>Magen Avraham</em> with the day\r\n     * starting 72 minutes before sunrise and ending 72 minutes after sunset. This is calculated as 10.75 hours after\r\n     * {@link #getAlos72() dawn}. The formula used is\r\n     * 10.75 {@link #getShaahZmanis72Minutes()} after {@link #getAlos72()}.\r\n     *\r\n     * @return the <code>Date</code> of the time of <em>plag hamincha</em>. If the calculation can't be computed such as\r\n     *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n     *         does not set, a null will be returned. See detailed explanation on top of the\r\n     *         {@link AstronomicalCalendar} documentation.\r\n     *\r\n     * @see #getShaahZmanis72Minutes()\r\n     */\r\n    getPlagHamincha72Minutes() {\r\n        return this.getPlagHamincha(this.getAlos72(), this.getTzais72());\r\n    }\r\n    /**\r\n     * This method returns the time of <em>plag hamincha</em> according to the <em>Magen Avraham</em> with the day\r\n     * starting 90 minutes before sunrise and ending 90 minutes after sunset. This is calculated as 10.75 hours after\r\n     * {@link #getAlos90() dawn}. The formula used is\r\n     * 10.75 {@link #getShaahZmanis90Minutes()} after {@link #getAlos90()}.\r\n     *\r\n     * @return the <code>Date</code> of the time of <em>plag hamincha</em>. If the calculation can't be computed such as\r\n     *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n     *         does not set, a null will be returned. See detailed explanation on top of the\r\n     *         {@link AstronomicalCalendar} documentation.\r\n     *\r\n     * @see #getShaahZmanis90Minutes()\r\n     */\r\n    getPlagHamincha90Minutes() {\r\n        return this.getPlagHamincha(this.getAlos90(), this.getTzais90());\r\n    }\r\n    /**\r\n     * This method returns the time of <em>plag hamincha</em> according to the <em>Magen Avraham</em> with the day\r\n     * starting 96 minutes before sunrise and ending 96 minutes after sunset. This is calculated as 10.75 hours after\r\n     * {@link #getAlos96() dawn}. The formula used is\r\n     * 10.75 {@link #getShaahZmanis96Minutes()} after {@link #getAlos96()}.\r\n     *\r\n     * @return the <code>Date</code> of the time of <em>plag hamincha</em>. If the calculation can't be computed such as\r\n     *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n     *         does not set, a null will be returned. See detailed explanation on top of the\r\n     *         {@link AstronomicalCalendar} documentation.\r\n     * @see #getShaahZmanis96Minutes()\r\n     */\r\n    getPlagHamincha96Minutes() {\r\n        return this.getPlagHamincha(this.getAlos96(), this.getTzais96());\r\n    }\r\n    /**\r\n     * This method returns the time of <em>plag hamincha</em>. This is calculated as 10.75 hours after\r\n     * {@link #getAlos96Zmanis() dawn}. The formula used is\r\n     * 10.75 * {@link #getShaahZmanis96MinutesZmanis()} after {@link #getAlos96Zmanis() dawn}.\r\n     *\r\n     * @return the <code>Date</code> of the time of <em>plag hamincha</em>. If the calculation can't be computed such as\r\n     *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n     *         does not set, a null will be returned. See detailed explanation on top of the\r\n     *         {@link AstronomicalCalendar} documentation.\r\n     */\r\n    getPlagHamincha96MinutesZmanis() {\r\n        return this.getPlagHamincha(this.getAlos96Zmanis(), this.getTzais96Zmanis());\r\n    }\r\n    /**\r\n     * This method returns the time of <em>plag hamincha</em>. This is calculated as 10.75 hours after\r\n     * {@link #getAlos90Zmanis() dawn}. The formula used is\r\n     * 10.75 * {@link #getShaahZmanis90MinutesZmanis()} after {@link #getAlos90Zmanis() dawn}.\r\n     *\r\n     * @return the <code>Date</code> of the time of <em>plag hamincha</em>. If the calculation can't be computed such as\r\n     *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n     *         does not set, a null will be returned. See detailed explanation on top of the\r\n     *         {@link AstronomicalCalendar} documentation.\r\n     */\r\n    getPlagHamincha90MinutesZmanis() {\r\n        return this.getPlagHamincha(this.getAlos90Zmanis(), this.getTzais90Zmanis());\r\n    }\r\n    /**\r\n     * This method returns the time of <em>plag hamincha</em>. This is calculated as 10.75 hours after\r\n     * {@link #getAlos72Zmanis() dawn}. The formula used is\r\n     * 10.75 * {@link #getShaahZmanis72MinutesZmanis()} after {@link #getAlos72Zmanis() dawn}.\r\n     *\r\n     * @return the <code>Date</code> of the time of <em>plag hamincha</em>. If the calculation can't be computed such as\r\n     *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n     *         does not set, a null will be returned. See detailed explanation on top of the\r\n     *         {@link AstronomicalCalendar} documentation.\r\n     */\r\n    getPlagHamincha72MinutesZmanis() {\r\n        return this.getPlagHamincha(this.getAlos72Zmanis(), this.getTzais72Zmanis());\r\n    }\r\n    /**\r\n     * This method returns the time of <em>plag hamincha</em> based on the opinion that the day starts at\r\n     * <em>{@link #getAlos16Point1Degrees() alos 16.1&deg;}</em> and ends at\r\n     * <em>{@link #getTzais16Point1Degrees() tzais 16.1&deg;}</em>. This is calculated as 10.75 hours <em>zmaniyos</em>\r\n     * after {@link #getAlos16Point1Degrees() dawn}. The formula used is\r\n     * 10.75 * {@link #getShaahZmanis16Point1Degrees()} after {@link #getAlos16Point1Degrees()}.\r\n     *\r\n     * @return the <code>Date</code> of the time of <em>plag hamincha</em>. If the calculation can't be computed such as\r\n     *         northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle where\r\n     *         the sun may not reach low enough below the horizon for this calculation, a null will be returned. See\r\n     *         detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n     *\r\n     * @see #getShaahZmanis16Point1Degrees()\r\n     */\r\n    getPlagHamincha16Point1Degrees() {\r\n        return this.getPlagHamincha(this.getAlos16Point1Degrees(), this.getTzais16Point1Degrees());\r\n    }\r\n    /**\r\n     * This method returns the time of <em>plag hamincha</em> based on the opinion that the day starts at\r\n     * <em>{@link #getAlos19Point8Degrees() alos 19.8&deg;}</em> and ends at\r\n     * <em>{@link #getTzais19Point8Degrees() tzais 19.8&deg;}</em>. This is calculated as 10.75 hours <em>zmaniyos</em>\r\n     * after {@link #getAlos19Point8Degrees() dawn}. The formula used is\r\n     * 10.75 * {@link #getShaahZmanis19Point8Degrees()} after {@link #getAlos19Point8Degrees()}.\r\n     *\r\n     * @return the <code>Date</code> of the time of <em>plag hamincha</em>. If the calculation can't be computed such as\r\n     *         northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle where\r\n     *         the sun may not reach low enough below the horizon for this calculation, a null will be returned. See\r\n     *         detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n     *\r\n     * @see #getShaahZmanis19Point8Degrees()\r\n     */\r\n    getPlagHamincha19Point8Degrees() {\r\n        return this.getPlagHamincha(this.getAlos19Point8Degrees(), this.getTzais19Point8Degrees());\r\n    }\r\n    /**\r\n     * This method returns the time of <em>plag hamincha</em> based on the opinion that the day starts at\r\n     * <em>{@link #getAlos26Degrees() alos 26&deg;}</em> and ends at <em>{@link #getTzais26Degrees() tzais 26&deg;}</em>\r\n     * . This is calculated as 10.75 hours <em>zmaniyos</em> after {@link #getAlos26Degrees() dawn}. The formula used is\r\n     * 10.75 * {@link #getShaahZmanis26Degrees()} after {@link #getAlos26Degrees()}.\r\n     *\r\n     * @return the <code>Date</code> of the time of <em>plag hamincha</em>. If the calculation can't be computed such as\r\n     *         northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle where\r\n     *         the sun may not reach low enough below the horizon for this calculation, a null will be returned. See\r\n     *         detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n     *\r\n     * @see #getShaahZmanis26Degrees()\r\n     */\r\n    getPlagHamincha26Degrees() {\r\n        return this.getPlagHamincha(this.getAlos26Degrees(), this.getTzais26Degrees());\r\n    }\r\n    /**\r\n     * This method returns the time of <em>plag hamincha</em> based on the opinion that the day starts at\r\n     * <em>{@link #getAlos18Degrees() alos 18&deg;}</em> and ends at <em>{@link #getTzais18Degrees() tzais 18&deg;}</em>\r\n     * . This is calculated as 10.75 hours <em>zmaniyos</em> after {@link #getAlos18Degrees() dawn}. The formula used is\r\n     * 10.75 * {@link #getShaahZmanis18Degrees()} after {@link #getAlos18Degrees()}.\r\n     *\r\n     * @return the <code>Date</code> of the time of <em>plag hamincha</em>. If the calculation can't be computed such as\r\n     *         northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle where\r\n     *         the sun may not reach low enough below the horizon for this calculation, a null will be returned. See\r\n     *         detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n     *\r\n     * @see #getShaahZmanis18Degrees()\r\n     */\r\n    getPlagHamincha18Degrees() {\r\n        return this.getPlagHamincha(this.getAlos18Degrees(), this.getTzais18Degrees());\r\n    }\r\n    /**\r\n     * This method returns the time of <em>plag hamincha</em> based on the opinion that the day starts at\r\n     * <em>{@link #getAlos16Point1Degrees() alos 16.1&deg;}</em> and ends at {@link #getSunset() sunset}. 10.75 shaos\r\n     * zmaniyos are calculated based on this day and added to {@link #getAlos16Point1Degrees() alos} to reach this time.\r\n     * This time is 10.75 <em>shaos zmaniyos</em> (temporal hours) after {@link #getAlos16Point1Degrees() dawn} based on\r\n     * the opinion that the day is calculated from a {@link #getAlos16Point1Degrees() dawn} of 16.1 degrees before\r\n     * sunrise to {@link #getSeaLevelSunset() sea level sunset}. This returns the time of 10.75 * the calculated\r\n     * <em>shaah zmanis</em> after {@link #getAlos16Point1Degrees() dawn}.\r\n     *\r\n     * @return the <code>Date</code> of the plag. If the calculation can't be computed such as northern and southern\r\n     *         locations even south of the Arctic Circle and north of the Antarctic Circle where the sun may not reach\r\n     *         low enough below the horizon for this calculation, a null will be returned. See detailed explanation on\r\n     *         top of the {@link AstronomicalCalendar} documentation.\r\n     *\r\n     * @see #getAlos16Point1Degrees()\r\n     * @see #getSeaLevelSunset()\r\n     */\r\n    getPlagAlosToSunset() {\r\n        return this.getPlagHamincha(this.getAlos16Point1Degrees(), this.getElevationAdjustedSunset());\r\n    }\r\n    /**\r\n     * This method returns the time of <em>plag hamincha</em> based on the opinion that the day starts at\r\n     * <em>{@link #getAlos16Point1Degrees() alos 16.1&deg;}</em> and ends at {@link #getTzaisGeonim7Point083Degrees()\r\n       * tzais}. 10.75 shaos zmaniyos are calculated based on this day and added to {@link #getAlos16Point1Degrees() alos}\r\n     * to reach this time. This time is 10.75 <em>shaos zmaniyos</em> (temporal hours) after\r\n     * {@link #getAlos16Point1Degrees() dawn} based on the opinion that the day is calculated from a\r\n     * {@link #getAlos16Point1Degrees() dawn} of 16.1 degrees before sunrise to\r\n     * {@link #getTzaisGeonim7Point083Degrees() tzais} . This returns the time of 10.75 * the calculated\r\n     * <em>shaah zmanis</em> after {@link #getAlos16Point1Degrees() dawn}.\r\n     *\r\n     * @return the <code>Date</code> of the plag. If the calculation can't be computed such as northern and southern\r\n     *         locations even south of the Arctic Circle and north of the Antarctic Circle where the sun may not reach\r\n     *         low enough below the horizon for this calculation, a null will be returned. See detailed explanation on\r\n     *         top of the {@link AstronomicalCalendar} documentation.\r\n     *\r\n     * @see #getAlos16Point1Degrees()\r\n     * @see #getTzaisGeonim7Point083Degrees()\r\n     */\r\n    getPlagAlos16Point1ToTzaisGeonim7Point083Degrees() {\r\n        return this.getPlagHamincha(this.getAlos16Point1Degrees(), this.getTzaisGeonim7Point083Degrees());\r\n    }\r\n    /**\r\n     * Method to return <em>Bain Hashmashos</em> of <em>Rabbeinu Tam</em> calculated when the sun is\r\n     * {@link #ZENITH_13_POINT_24 13.24&deg;} below the western {@link #GEOMETRIC_ZENITH geometric horizon} (90&deg;)\r\n     * after sunset. This calculation is based on the same calculation of {@link #getBainHasmashosRT58Point5Minutes()\r\n     * Bain Hashmashos Rabbeinu Tam 58.5 minutes} but uses a degree based calculation instead of 58.5 exact minutes. This\r\n     * calculation is based on the position of the sun 58.5 minutes after sunset in Jerusalem during the equinox (on\r\n     * March 16, about 4 days before the astronomical equinox, the day that a solar hour is 60 minutes) which calculates\r\n     * to 13.24&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}.\r\n     * NOTE: As per Yisrael Vehazmanim Vol. III page 1028 No 50, a dip of slightly less than 13&deg; should be used.\r\n     * Calculations show that the proper dip to be 13.2456&deg; (truncated to 13.24 that provides about 1.5 second\r\n     * earlier (<em>lechumra</em>) time) below the horizon at that time. This makes a difference of 1 minute and 10\r\n     * seconds in Jerusalem during the Equinox, and 1 minute 29 seconds during the solstice as compared to the proper\r\n     * 13.24&deg; versus 13&deg;. For NY during the solstice, the difference is 1 minute 56 seconds.\r\n     *\r\n     * @return the <code>Date</code> of the sun being 13.24&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}\r\n     *         (90&deg;). If the calculation can't be computed such as northern and southern locations even south of the\r\n     *         Arctic Circle and north of the Antarctic Circle where the sun may not reach low enough below the horizon\r\n     *         for this calculation, a null will be returned. See detailed explanation on top of the\r\n     *         {@link AstronomicalCalendar} documentation.\r\n     *\r\n     * @see #ZENITH_13_POINT_24\r\n     * @see #getBainHasmashosRT58Point5Minutes()\r\n     */\r\n    getBainHasmashosRT13Point24Degrees() {\r\n        return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_13_POINT_24);\r\n    }\r\n    /**\r\n     * This method returns <em>Bain Hashmashos</em> of <em>Rabbeinu Tam</em> calculated as a 58.5 minute offset after\r\n     * sunset. <em>Bain hashmashos</em> is 3/4 of a <em>Mil</em> before <em>tzais</em> or 3 1/4 <em>Mil</em> after\r\n     * sunset. With a <em>Mil</em> calculated as 18 minutes, 3.25 * 18 = 58.5 minutes.\r\n     *\r\n     * @return the <code>Date</code> of 58.5 minutes after sunset. If the calculation can't be computed such as in the\r\n     *         Arctic Circle where there is at least one day a year where the sun does not rise, and one where it does\r\n     *         not set, a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n     *         documentation.\r\n     *\r\n     */\r\n    getBainHasmashosRT58Point5Minutes() {\r\n        return ComplexZmanimCalendar.getTimeOffset(this.getElevationAdjustedSunset(), 58.5 * ComplexZmanimCalendar.MINUTE_MILLIS);\r\n    }\r\n    /**\r\n     * This method returns the time of <em>bain hashmashos</em> based on the calculation of 13.5 minutes (3/4 of an 18\r\n     * minute <em>Mil</em> before shkiah calculated as {@link #getTzaisGeonim7Point083Degrees() 7.083&deg;}.\r\n     *\r\n     * @return the <code>Date</code> of the <em>bain hashmashos</em> of <em>Rabbeinu Tam</em> in this calculation. If the\r\n     *         calculation can't be computed such as northern and southern locations even south of the Arctic Circle and\r\n     *         north of the Antarctic Circle where the sun may not reach low enough below the horizon for this\r\n     *         calculation, a null will be returnegetBainHasmashosRT2Starsd. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n     *         documentation.\r\n     * @see #getTzaisGeonim7Point083Degrees()\r\n     */\r\n    getBainHasmashosRT13Point5MinutesBefore7Point083Degrees() {\r\n        return ComplexZmanimCalendar.getTimeOffset(this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_7_POINT_083), -13.5 * ComplexZmanimCalendar.MINUTE_MILLIS);\r\n    }\r\n    /**\r\n     * This method returns <em>bain hashmashos</em> of <em>Rabbeinu Tam</em> calculated according to the opinion of the\r\n     * <em>Divrei Yosef</em> (see Yisrael Vehazmanim) calculated 5/18th (27.77%) of the time between <em>alos</em>\r\n     * (calculated as 19.8&deg; before sunrise) and sunrise. This is added to sunset to arrive at the time for\r\n     * <em>bain hashmashos</em> of <em>Rabbeinu Tam</em>).\r\n     *\r\n     * @return the <code>Date</code> of <em>bain hashmashos</em> of <em>Rabbeinu Tam</em> for this calculation. If the\r\n     *         calculation can't be computed such as northern and southern locations even south of the Arctic Circle and\r\n     *         north of the Antarctic Circle where the sun may not reach low enough below the horizon for this\r\n     *         calculation, a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n     *         documentation.\r\n     */\r\n    getBainHasmashosRT2Stars() {\r\n        const alos19Point8 = this.getAlos19Point8Degrees();\r\n        const sunrise = this.getElevationAdjustedSunrise();\r\n        if (alos19Point8 === null || sunrise === null) {\r\n            return null;\r\n        }\r\n        return ComplexZmanimCalendar.getTimeOffset(this.getElevationAdjustedSunset(), (sunrise.valueOf() - alos19Point8.valueOf()) * (5 / 18));\r\n    }\r\n    /**\r\n     * This method returns the <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> calculated at the\r\n     * sun's position at {@link #ZENITH_3_POINT_7 3.7&deg;} below the western horizon.\r\n     *\r\n     * @return the <code>Date</code> representing the time when the sun is 3.7&deg; below sea level.\r\n     * @see #ZENITH_3_POINT_7\r\n     */\r\n    getTzaisGeonim3Point7Degrees() {\r\n        return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_3_POINT_7);\r\n    }\r\n    /**\r\n     * This method returns the <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> calculated at the\r\n     * sun's position at {@link #ZENITH_3_POINT_8 3.8&deg;} below the western horizon.\r\n     *\r\n     * @return the <code>Date</code> representing the time when the sun is 3.8&deg; below sea level.\r\n     * @see #ZENITH_3_POINT_8\r\n     */\r\n    getTzaisGeonim3Point8Degrees() {\r\n        return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_3_POINT_8);\r\n    }\r\n    /**\r\n     * This method returns the <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> calculated at the\r\n     * sun's position at {@link #ZENITH_5_POINT_95 5.95&deg;} below the western horizon.\r\n     *\r\n     * @return the <code>Date</code> representing the time when the sun is 5.95&deg; below sea level. If the calculation\r\n     *         can't be computed such as northern and southern locations even south of the Arctic Circle and north of\r\n     *         the Antarctic Circle where the sun may not reach low enough below the horizon for this calculation, a\r\n     *         null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n     * @see #ZENITH_5_POINT_95\r\n     */\r\n    getTzaisGeonim5Point95Degrees() {\r\n        return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_5_POINT_95);\r\n    }\r\n    /**\r\n     * This method returns the <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> calculated as 3/4\r\n     * of a <a href= \"http://en.wikipedia.org/wiki/Biblical_and_Talmudic_units_of_measurement\" >Mil</a> based on an 18\r\n     * minute Mil, or 13.5 minutes. It is the sun's position at {@link #ZENITH_3_POINT_65 3.65&deg;} below the western\r\n     * horizon. This is a very early <em>zman</em> and should not be relied on without Rabbinical guidance.\r\n     *\r\n     * @return the <code>Date</code> representing the time when the sun is 3.65&deg; below sea level. If the calculation\r\n     *         can't be computed such as northern and southern locations even south of the Arctic Circle and north of\r\n     *         the Antarctic Circle where the sun may not reach low enough below the horizon for this calculation, a\r\n     *         null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n     * @see #ZENITH_3_POINT_65\r\n     */\r\n    getTzaisGeonim3Point65Degrees() {\r\n        return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_3_POINT_65);\r\n    }\r\n    /**\r\n     * This method returns the <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> calculated as 3/4\r\n     * of a <a href= \"http://en.wikipedia.org/wiki/Biblical_and_Talmudic_units_of_measurement\" >Mil</a> based on an 18\r\n     * minute Mil, or 13.5 minutes. It is the sun's position at {@link #ZENITH_3_POINT_676 3.676&deg;} below the western\r\n     * horizon based on the calculations of Stanley Fishkind. This is a very early <em>zman</em> and should not be\r\n     * relied on without Rabbinical guidance.\r\n     *\r\n     * @return the <code>Date</code> representing the time when the sun is 3.676&deg; below sea level. If the\r\n     *         calculation can't be computed such as northern and southern locations even south of the Arctic Circle and\r\n     *         north of the Antarctic Circle where the sun may not reach low enough below the horizon for this\r\n     *         calculation, a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n     *         documentation.\r\n     * @see #ZENITH_3_POINT_676\r\n     */\r\n    getTzaisGeonim3Point676Degrees() {\r\n        return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_3_POINT_676);\r\n    }\r\n    /**\r\n     * This method returns the <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> calculated as 3/4\r\n     * of a <a href= \"http://en.wikipedia.org/wiki/Biblical_and_Talmudic_units_of_measurement\" >Mil</a> based on a 24\r\n     * minute Mil, or 18 minutes. It is the sun's position at {@link #ZENITH_4_POINT_61 4.61&deg;} below the western\r\n     * horizon. This is a very early <em>zman</em> and should not be relied on without Rabbinical guidance.\r\n     *\r\n     * @return the <code>Date</code> representing the time when the sun is 4.61&deg; below sea level. If the calculation\r\n     *         can't be computed such as northern and southern locations even south of the Arctic Circle and north of\r\n     *         the Antarctic Circle where the sun may not reach low enough below the horizon for this calculation, a\r\n     *         null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n     * @see #ZENITH_4_POINT_61\r\n     */\r\n    getTzaisGeonim4Point61Degrees() {\r\n        return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_4_POINT_61);\r\n    }\r\n    /**\r\n     * This method returns the <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> calculated as 3/4\r\n     * of a <a href= \"http://en.wikipedia.org/wiki/Biblical_and_Talmudic_units_of_measurement\" >Mil</a>, based on a 22.5\r\n     * minute Mil, or 16 7/8 minutes. It is the sun's position at {@link #ZENITH_4_POINT_37 4.37&deg;} below the western\r\n     * horizon. This is a very early <em>zman</em> and should not be relied on without Rabbinical guidance.\r\n     *\r\n     * @return the <code>Date</code> representing the time when the sun is 4.37&deg; below sea level. If the calculation\r\n     *         can't be computed such as northern and southern locations even south of the Arctic Circle and north of\r\n     *         the Antarctic Circle where the sun may not reach low enough below the horizon for this calculation, a\r\n     *         null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n     * @see #ZENITH_4_POINT_37\r\n     */\r\n    getTzaisGeonim4Point37Degrees() {\r\n        return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_4_POINT_37);\r\n    }\r\n    /**\r\n     * This method returns the <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> calculated as 3/4\r\n     * of a 24 minute <em><a href= \"http://en.wikipedia.org/wiki/Biblical_and_Talmudic_units_of_measurement\" >Mil</a></em>,\r\n     * based on a <em>Mil</em> being 24 minutes, and is calculated as 18 + 2 + 4 for a total of 24 minutes. It is the\r\n     * sun's position at {@link #ZENITH_5_POINT_88 5.88&deg;} below the western horizon. This is a very early\r\n     * <em>zman</em> and should not be relied on without Rabbinical guidance.\r\n     *\r\n     * @todo Additional detailed documentation needed.\r\n     *\r\n     * @return the <code>Date</code> representing the time when the sun is 5.88&deg; below sea level. If the calculation\r\n     *         can't be computed such as northern and southern locations even south of the Arctic Circle and north of\r\n     *         the Antarctic Circle where the sun may not reach low enough below the horizon for this calculation, a\r\n     *         null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n     * @see #ZENITH_5_POINT_88\r\n     */\r\n    getTzaisGeonim5Point88Degrees() {\r\n        return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_5_POINT_88);\r\n    }\r\n    /**\r\n     * This method returns the <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> calculated as 3/4\r\n     * of a <a href= \"http://en.wikipedia.org/wiki/Biblical_and_Talmudic_units_of_measurement\" >Mil</a> based on the\r\n     * sun's position at {@link #ZENITH_4_POINT_8 4.8&deg;} below the western horizon. This is based on Rabbi Leo Levi's\r\n     * calculations. This is the This is a very early <em>zman</em> and should not be relied on without Rabbinical guidance.\r\n     * @todo Additional documentation needed.\r\n     *\r\n     * @return the <code>Date</code> representing the time when the sun is 4.8&deg; below sea level. If the calculation\r\n     *         can't be computed such as northern and southern locations even south of the Arctic Circle and north of\r\n     *         the Antarctic Circle where the sun may not reach low enough below the horizon for this calculation, a\r\n     *         null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n     * @see #ZENITH_4_POINT_8\r\n     */\r\n    getTzaisGeonim4Point8Degrees() {\r\n        return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_4_POINT_8);\r\n    }\r\n    /**\r\n     * This method returns the <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> as calculated by\r\n     * <a href=\"https://en.wikipedia.org/wiki/Yechiel_Michel_Tucazinsky\">Rabbi Yechiel Michel Tucazinsky</a>. It is\r\n     * based on of the position of the sun no later than {@link #getTzaisGeonim6Point45Degrees() 31 minutes} after sunset\r\n     * in Jerusalem, and at the height of the summer solstice, this zman is 28 minutes after <em>shkiah</em>. This\r\n     * computes to 6.45&deg; below the western horizon.\r\n     * @todo Additional documentation details needed.\r\n     *\r\n     * @return the <code>Date</code> representing the time when the sun is 6.45&deg; below sea level. If the\r\n     *         calculation can't be computed such as northern and southern locations even south of the Arctic Circle and\r\n     *         north of the Antarctic Circle where the sun may not reach low enough below the horizon for this\r\n     *         calculation, a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n     *         documentation.\r\n     * @see #ZENITH_6_POINT_45\r\n     */\r\n    getTzaisGeonim6Point45Degrees() {\r\n        return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_6_POINT_45);\r\n    }\r\n    /**\r\n     * This method returns the <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> calculated as 30\r\n     * minutes after sunset during the equinox (on March 16, about 4 days before the astronomical equinox, the day that\r\n     * a solar hour is 60 minutes) in Yerushalayim. The sun's position at this time computes to\r\n     * {@link #ZENITH_7_POINT_083 7.083&deg; (or 7&deg; 5\\u2032} below the western horizon. Note that this is a common\r\n     * and rounded number. Computation shows the accurate number is 7.2&deg;\r\n     *\r\n     * @return the <code>Date</code> representing the time when the sun is 7.083&deg; below sea level. If the\r\n     *         calculation can't be computed such as northern and southern locations even south of the Arctic Circle and\r\n     *         north of the Antarctic Circle where the sun may not reach low enough below the horizon for this\r\n     *         calculation, a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n     *         documentation.\r\n     * @see #ZENITH_7_POINT_083\r\n     */\r\n    getTzaisGeonim7Point083Degrees() {\r\n        return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_7_POINT_083);\r\n    }\r\n    /**\r\n     * This method returns <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> calculated as 45 minutes\r\n     * after sunset during the summer solstice in New York, when the <em>neshef</em> (twilight) is the longest. The sun's\r\n     * position at this time computes to {@link #ZENITH_7_POINT_67 7.75&deg;} below the western horizon. See <a href=\r\n     * \"http://www.hebrewbooks.org/pdfpager.aspx?req=921&amp;pgnum=149\">Igros Moshe Even Haezer 4, Ch. 4</a> (regarding\r\n     * tzais for <em>krias Shema</em>). It is also mentioned in Rabbi Heber's <a href=\r\n     * \"http://www.hebrewbooks.org/53000\">Shaarei Zmanim</a> on in\r\n     * <a href=\"http://www.hebrewbooks.org/pdfpager.aspx?req=53055&amp;pgnum=101\">chapter 10 (page 87)</a> and\r\n     * <a href=\"http://www.hebrewbooks.org/pdfpager.aspx?req=53055&amp;pgnum=122\">chapter 12 (page 108)</a>. Also see the\r\n     * time of 45 minutes in <a href=\"https://en.wikipedia.org/wiki/Simcha_Bunim_Cohen\">Rabbi Simcha Bunim Cohen's</a> <a\r\n     * href=\"https://www.worldcat.org/oclc/179728985\">The radiance of Shabbos</a> as the earliest zman for New York. This\r\n     * zman is also listed in the <a href=\"http://www.hebrewbooks.org/pdfpager.aspx?req=1927&amp;pgnum=90\">Divrei Shalom\r\n     * Vol. III, chapter 75</a>, and <a href=\"http://www.hebrewbooks.org/pdfpager.aspx?req=892&amp;pgnum=431\">Bais Av\"i Vol.\r\n     * III, chapter 117</a>. This zman is also listed in the Divrei Shalom etc. chapter 177. Since this\r\n     * zman depends on the level of light, Rabbi Yaakov Shakow presented this degree based calculation to Rabbi <a href=\r\n     * \"https://en.wikipedia.org/wiki/Shmuel_Kamenetsky\">Rabbi Shmuel Kamenetsky</a> who agreed to it.\r\n     * @todo add hyperlinks to source of Divrei Shalom.\r\n     *\r\n     * @return the <code>Date</code> representing the time when the sun is 7.67&deg; below sea level. If the\r\n     *         calculation can't be computed such as northern and southern locations even south of the Arctic Circle and\r\n     *         north of the Antarctic Circle where the sun may not reach low enough below the horizon for this\r\n     *         calculation, a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n     *         documentation.\r\n     * @see #ZENITH_7_POINT_67\r\n     */\r\n    getTzaisGeonim7Point67Degrees() {\r\n        return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_7_POINT_67);\r\n    }\r\n    /**\r\n     * This method returns the <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> calculated at the\r\n     * sun's position at {@link #ZENITH_8_POINT_5 8.5&deg;} below the western horizon.\r\n     *\r\n     * @return the <code>Date</code> representing the time when the sun is 8.5&deg; below sea level. If the calculation\r\n     *         can't be computed such as northern and southern locations even south of the Arctic Circle and north of\r\n     *         the Antarctic Circle where the sun may not reach low enough below the horizon for this calculation, a\r\n     *         null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n     * @see #ZENITH_8_POINT_5\r\n     */\r\n    getTzaisGeonim8Point5Degrees() {\r\n        return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_8_POINT_5);\r\n    }\r\n    /**\r\n     * This method returns the <em>tzais</em> (nightfall) based on the calculations used in the <a href=\r\n     * \"http://www.worldcat.org/oclc/243303103\">Luach Itim Lebinah</a> as the stringent time for tzais.  It is calculated\r\n     * at the sun's position at {@link #ZENITH_9_POINT_3 9.3&deg;} below the western horizon.\r\n     *\r\n     * @return the <code>Date</code> representing the time when the sun is 9.3&deg; below sea level. If the calculation\r\n     *         can't be computed such as northern and southern locations even south of the Arctic Circle and north of\r\n     *         the Antarctic Circle where the sun may not reach low enough below the horizon for this calculation, a\r\n     *         null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n     */\r\n    getTzaisGeonim9Point3Degrees() {\r\n        return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_9_POINT_3);\r\n    }\r\n    /**\r\n     * This method returns the <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> calculated as 60\r\n     * minutes after sunset during the equinox (on March 16, about 4 days before the astronomical equinox, the day that\r\n     * a solar hour is 60 minutes) in New York. The sun's position at this time computes to\r\n     * {@link #ZENITH_9_POINT_75 9.75&deg;} below the western horizon. This is the opinion of <a href=\r\n     * \"https://en.wikipedia.org/wiki/Yosef_Eliyahu_Henkin\">Rabbi Eliyahu Henkin</a>.  This also follows the opinion of\r\n     * <a href=\"https://en.wikipedia.org/wiki/Shmuel_Kamenetsky\">Rabbi Shmuel Kamenetsky</a>. Rabbi Yaakov Shakow presented\r\n     * these degree based times to Rabbi Shmuel Kamenetsky who agreed to them.\r\n     *\r\n     * @return the <code>Date</code> representing the time when the sun is 9.75&deg; below sea level. If the calculation\r\n     *         can't be computed such as northern and southern locations even south of the Arctic Circle and north of\r\n     *         the Antarctic Circle where the sun may not reach low enough below the horizon for this calculation, a\r\n     *         null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n     *\r\n     * @see #getTzais60()\r\n     */\r\n    getTzaisGeonim9Point75Degrees() {\r\n        return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_9_POINT_75);\r\n    }\r\n    /**\r\n     * This method returns the <em>tzais</em> (nightfall) based on the opinion of the <em><a href=\r\n     * \"https://en.wikipedia.org/wiki/Yair_Bacharach\">Chavas Yair</a></em> and <em>Divrei Malkiel</em> that the time\r\n     * to walk the distance of a <em>Mil</em> is 15 minutes for a total of 60 minutes for 4 <em>Mil</em> after\r\n     * {@link #getSeaLevelSunset() sea level sunset}.\r\n     *\r\n     * @return the <code>Date</code> representing 60 minutes after sea level sunset. If the calculation can't be\r\n     *         computed such as in the Arctic Circle where there is at least one day a year where the sun does not rise,\r\n     *         and one where it does not set, a null will be returned. See detailed explanation on top of the\r\n     *         {@link AstronomicalCalendar} documentation.\r\n     * @see #getAlos60()\r\n     */\r\n    getTzais60() {\r\n        return ComplexZmanimCalendar.getTimeOffset(this.getElevationAdjustedSunset(), 60 * ComplexZmanimCalendar.MINUTE_MILLIS);\r\n    }\r\n    /**\r\n     * This method returns <em>tzais</em> usually calculated as 40 minutes (configurable to any offset via\r\n     * {@link #setAteretTorahSunsetOffset(double)}) after sunset. Please note that <em>Chacham Yosef Harari-Raful</em>\r\n     * of <em>Yeshivat Ateret Torah</em> who uses this time, does so only for calculating various other\r\n     * <em>zmanai hayom</em> such as <em>Sof Zman Krias Shema</em> and <em>Plag Hamincha</em>. His calendars do not\r\n     * publish a <em>zman</em> for <em>Tzais</em>. It should also be noted that <em>Chacham Harari-Raful</em> provided a\r\n     * 25 minute <em>zman</em> for Israel. This API uses 40 minutes year round in any place on the globe by default.\r\n     * This offset can be changed by calling {@link #setAteretTorahSunsetOffset(double)}.\r\n     *\r\n     * @return the <code>Date</code> representing 40 minutes (configurable via {@link #setAteretTorahSunsetOffset})\r\n     *         after sea level sunset. If the calculation can't be computed such as in the Arctic Circle where there is\r\n     *         at least one day a year where the sun does not rise, and one where it does not set, a null will be\r\n     *         returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n     * @see #getAteretTorahSunsetOffset()\r\n     * @see #setAteretTorahSunsetOffset(double)\r\n     */\r\n    getTzaisAteretTorah() {\r\n        return ComplexZmanimCalendar.getTimeOffset(this.getElevationAdjustedSunset(), this.getAteretTorahSunsetOffset() * ComplexZmanimCalendar.MINUTE_MILLIS);\r\n    }\r\n    /**\r\n     * Returns the offset in minutes after sunset used to calculate sunset for the Ateret Torah zmanim. The default\r\n     * value is 40 minutes. This affects most zmanim, since almost all zmanim use sunset as part of their calculation.\r\n     *\r\n     * @return the number of minutes after sunset for <em>Tzait</em>.\r\n     * @see #setAteretTorahSunsetOffset(double)\r\n     */\r\n    getAteretTorahSunsetOffset() {\r\n        return this.ateretTorahSunsetOffset;\r\n    }\r\n    /**\r\n     * Allows setting the offset in minutes after sunset for the Ateret Torah zmanim. The default if unset is 40\r\n     * minutes. Chacham Yosef Harari-Raful of Yeshivat Ateret Torah uses 40 minutes globally with the exception of\r\n     * Israel where a 25 minute offset is used. This 40 minute (or any other) offset can be overridden by this method.\r\n     * This offset impacts all Ateret Torah zmanim.\r\n     *\r\n     * @param ateretTorahSunsetOffset\r\n     *            the number of minutes after sunset to use as an offset for the Ateret Torah <em>tzais</em>\r\n     * @see #getAteretTorahSunsetOffset()\r\n     */\r\n    setAteretTorahSunsetOffset(ateretTorahSunsetOffset) {\r\n        this.ateretTorahSunsetOffset = ateretTorahSunsetOffset;\r\n    }\r\n    /**\r\n     * This method returns the latest <em>zman krias shema</em> (time to recite Shema in the morning) based on the\r\n     * calculation of Chacham Yosef Harari-Raful of Yeshivat Ateret Torah, that the day starts\r\n     * {@link #getAlos72Zmanis() 1/10th of the day} before sunrise and is usually calculated as ending\r\n     * {@link #getTzaisAteretTorah() 40 minutes after sunset} (configurable to any offset via\r\n     * {@link #setAteretTorahSunsetOffset(double)}). <em>shaos zmaniyos</em> are calculated based on this day and added\r\n     * to {@link #getAlos72Zmanis() alos} to reach this time. This time is 3\r\n     * <em> {@link #getShaahZmanisAteretTorah() shaos zmaniyos}</em> (temporal hours) after\r\n     * <em>{@link #getAlos72Zmanis()\r\n       * alos 72 zmaniyos}</em>. <b>Note: </b> Based on this calculation <em>chatzos</em> will not be at midday.\r\n     *\r\n     * @return the <code>Date</code> of the latest <em>zman krias shema</em> based on this calculation. If the\r\n     *         calculation can't be computed such as in the Arctic Circle where there is at least one day a year where\r\n     *         the sun does not rise, and one where it does not set, a null will be returned. See detailed explanation\r\n     *         on top of the {@link AstronomicalCalendar} documentation.\r\n     * @see #getAlos72Zmanis()\r\n     * @see #getTzaisAteretTorah()\r\n     * @see #getAteretTorahSunsetOffset()\r\n     * @see #setAteretTorahSunsetOffset(double)\r\n     * @see #getShaahZmanisAteretTorah()\r\n     */\r\n    getSofZmanShmaAteretTorah() {\r\n        return this.getSofZmanShma(this.getAlos72Zmanis(), this.getTzaisAteretTorah());\r\n    }\r\n    /**\r\n     * This method returns the latest <em>zman tfila</em> (time to recite the morning prayers) based on the calculation\r\n     * of Chacham Yosef Harari-Raful of Yeshivat Ateret Torah, that the day starts {@link #getAlos72Zmanis() 1/10th of\r\n       * the day} before sunrise and is usually calculated as ending {@link #getTzaisAteretTorah() 40 minutes after\r\n       * sunset} (configurable to any offset via {@link #setAteretTorahSunsetOffset(double)}). <em>shaos zmaniyos</em> are\r\n     * calculated based on this day and added to {@link #getAlos72Zmanis() alos} to reach this time. This time is 4 *\r\n     * <em>{@link #getShaahZmanisAteretTorah() shaos zmaniyos}</em> (temporal hours) after\r\n     * <em>{@link #getAlos72Zmanis() alos 72 zmaniyos}</em>.\r\n     * <b>Note: </b> Based on this calculation <em>chatzos</em> will not be at midday.\r\n     *\r\n     * @return the <code>Date</code> of the latest <em>zman krias shema</em> based on this calculation. If the\r\n     *         calculation can't be computed such as in the Arctic Circle where there is at least one day a year where\r\n     *         the sun does not rise, and one where it does not set, a null will be returned. See detailed explanation\r\n     *         on top of the {@link AstronomicalCalendar} documentation.\r\n     * @see #getAlos72Zmanis()\r\n     * @see #getTzaisAteretTorah()\r\n     * @see #getShaahZmanisAteretTorah()\r\n     * @see #setAteretTorahSunsetOffset(double)\r\n     */\r\n    getSofZmanTfilahAteretTorah() {\r\n        return this.getSofZmanTfila(this.getAlos72Zmanis(), this.getTzaisAteretTorah());\r\n    }\r\n    /**\r\n     * This method returns the time of <em>mincha gedola</em> based on the calculation of <em>Chacham Yosef\r\n     * Harari-Raful</em> of <em>Yeshivat Ateret Torah</em>, that the day starts {@link #getAlos72Zmanis()\r\n       * 1/10th of the day} before sunrise and is usually calculated as ending\r\n     * {@link #getTzaisAteretTorah() 40 minutes after sunset} (configurable to any offset via\r\n     * {@link #setAteretTorahSunsetOffset(double)}). This is the preferred earliest time to pray <em>mincha</em>\r\n     * according to the opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Maimonides\">Rambam</a></em> and others.\r\n     * For more information on this see the documentation on <em>{@link #getMinchaGedola() mincha gedola}</em>. This is\r\n     * calculated as 6.5 {@link #getShaahZmanisAteretTorah()  solar hours} after alos. The calculation used is 6.5 *\r\n     * {@link #getShaahZmanisAteretTorah()} after <em>{@link #getAlos72Zmanis() alos}</em>.\r\n     *\r\n     * @see #getAlos72Zmanis()\r\n     * @see #getTzaisAteretTorah()\r\n     * @see #getShaahZmanisAteretTorah()\r\n     * @see #getMinchaGedola()\r\n     * @see #getMinchaKetanaAteretTorah()\r\n     * @see ZmanimCalendar#getMinchaGedola()\r\n     * @see #getAteretTorahSunsetOffset()\r\n     * @see #setAteretTorahSunsetOffset(double)\r\n     *\r\n     * @return the <code>Date</code> of the time of mincha gedola. If the calculation can't be computed such as in the\r\n     *         Arctic Circle where there is at least one day a year where the sun does not rise, and one where it does\r\n     *         not set, a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n     *         documentation.\r\n     */\r\n    getMinchaGedolaAteretTorah() {\r\n        return this.getMinchaGedola(this.getAlos72Zmanis(), this.getTzaisAteretTorah());\r\n    }\r\n    /**\r\n     * This method returns the time of <em>mincha ketana</em> based on the calculation of\r\n     * <em>Chacham Yosef Harari-Raful</em> of <em>Yeshivat Ateret Torah</em>, that the day starts\r\n     * {@link #getAlos72Zmanis() 1/10th of the day} before sunrise and is usually calculated as ending\r\n     * {@link #getTzaisAteretTorah() 40 minutes after sunset} (configurable to any offset via\r\n     * {@link #setAteretTorahSunsetOffset(double)}). This is the preferred earliest time to pray <em>mincha</em>\r\n     * according to the opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Maimonides\">Rambam</a></em> and others.\r\n     * For more information on this see the documentation on <em>{@link #getMinchaGedola() mincha gedola}</em>. This is\r\n     * calculated as 9.5 {@link #getShaahZmanisAteretTorah() solar hours} after {@link #getAlos72Zmanis() alos}. The\r\n     * calculation used is 9.5 * {@link #getShaahZmanisAteretTorah()} after {@link #getAlos72Zmanis() alos}.\r\n     *\r\n     * @see #getAlos72Zmanis()\r\n     * @see #getTzaisAteretTorah()\r\n     * @see #getShaahZmanisAteretTorah()\r\n     * @see #getAteretTorahSunsetOffset()\r\n     * @see #setAteretTorahSunsetOffset(double)\r\n     * @see #getMinchaGedola()\r\n     * @see #getMinchaKetana()\r\n     * @return the <code>Date</code> of the time of mincha ketana. If the calculation can't be computed such as in the\r\n     *         Arctic Circle where there is at least one day a year where the sun does not rise, and one where it does\r\n     *         not set, a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n     *         documentation.\r\n     */\r\n    getMinchaKetanaAteretTorah() {\r\n        return this.getMinchaKetana(this.getAlos72Zmanis(), this.getTzaisAteretTorah());\r\n    }\r\n    /**\r\n     * This method returns the time of <em>plag hamincha</em> based on the calculation of Chacham Yosef Harari-Raful of\r\n     * Yeshivat Ateret Torah, that the day starts {@link #getAlos72Zmanis() 1/10th of the day} before sunrise and is\r\n     * usually calculated as ending {@link #getTzaisAteretTorah() 40 minutes after sunset} (configurable to any offset\r\n     * via {@link #setAteretTorahSunsetOffset(double)}). <em>shaos zmaniyos</em> are calculated based on this day and\r\n     * added to {@link #getAlos72Zmanis() alos} to reach this time. This time is 10.75\r\n     * <em>{@link #getShaahZmanisAteretTorah() shaos zmaniyos}</em> (temporal hours) after {@link #getAlos72Zmanis()\r\n       * dawn}.\r\n     *\r\n     * @return the <code>Date</code> of the plag. If the calculation can't be computed such as in the Arctic Circle\r\n     *         where there is at least one day a year where the sun does not rise, and one where it does not set, a null\r\n     *         will be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n     * @see #getAlos72Zmanis()\r\n     * @see #getTzaisAteretTorah()\r\n     * @see #getShaahZmanisAteretTorah()\r\n     * @see #setAteretTorahSunsetOffset(double)\r\n     * @see #getAteretTorahSunsetOffset()\r\n     */\r\n    getPlagHaminchaAteretTorah() {\r\n        return this.getPlagHamincha(this.getAlos72Zmanis(), this.getTzaisAteretTorah());\r\n    }\r\n    /**\r\n     * This method returns the time of <em>misheyakir</em> based on the common calculation of the Syrian community in NY\r\n     * that the <em>alos</em> is a fixed minute offset from day starting {@link #getAlos72Zmanis() 1/10th of the day}\r\n     * before sunrise. The common offsets are 6 minutes (based on the <em>Pri Megadim</em>, but not linked to the\r\n     * calculation of <em>Alos</em> as 1/10th of the day), 8 and 18 minutes (possibly attributed to\r\n     * <em>Chacham Baruch Ben Haim</em>). Since there is no universal accepted offset, the user of this API will have to\r\n     * <em><a href=\"https://en.wikipedia.org/wiki/Baruch_Ben_Haim\">Chacham Baruch Ben Haim</a></em>). Since there is no\r\n     * universal accepted offset, the user of this API will have to specify one. <em>Chacham Yosef Harari-Raful</em> of\r\n     * <em>Yeshivat Ateret Torah</em> does not supply any <em>zman</em> for <em>misheyakir</em> and does not endorse any\r\n     * specific calculation for <em>misheyakir</em>. For that reason, this method is not a public method.\r\n     *\r\n     * @param minutes\r\n     *            the number of minutes after <em>alos</em> calculated as {@link #getAlos72Zmanis() 1/10th of the day}\r\n     * @return the <code>Date</code> of <em>misheyakir</em>. If the calculation can't be computed such as in the Arctic\r\n     *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\r\n     *         a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n     *         documentation.\r\n     * @see #getAlos72Zmanis()\r\n     */\r\n    // private Date getMesheyakirAteretTorah(double minutes) {\r\n    // return getTimeOffset(getAlos72Zmanis(), minutes * MINUTE_MILLIS);\r\n    // }\r\n    /**\r\n     * Method to return <em>tzais</em> (dusk) calculated as 72 minutes zmaniyos, or 1/10th of the day after\r\n     * {@link #getSeaLevelSunset() sea level sunset}.\r\n     *\r\n     * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\r\n     *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\r\n     *         a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n     *         documentation.\r\n     * @see #getAlos72Zmanis()\r\n     */\r\n    getTzais72Zmanis() {\r\n        const shaahZmanis = this.getShaahZmanisGra();\r\n        if (shaahZmanis === Long_MIN_VALUE) {\r\n            return null;\r\n        }\r\n        return ComplexZmanimCalendar.getTimeOffset(this.getElevationAdjustedSunset(), shaahZmanis * 1.2);\r\n    }\r\n    /**\r\n     * Method to return <em>tzais</em> (dusk) calculated using 90 minutes zmaniyos after {@link #getSeaLevelSunset() sea level sunset}.\r\n     *\r\n     * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\r\n     *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\r\n     *         a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n     *         documentation.\r\n     * @see #getAlos90Zmanis()\r\n     */\r\n    getTzais90Zmanis() {\r\n        const shaahZmanis = this.getShaahZmanisGra();\r\n        if (shaahZmanis === Long_MIN_VALUE) {\r\n            return null;\r\n        }\r\n        return ComplexZmanimCalendar.getTimeOffset(this.getElevationAdjustedSunset(), shaahZmanis * 1.5);\r\n    }\r\n    /**\r\n     * Method to return <em>tzais</em> (dusk) calculated using 96 minutes zmaniyos after {@link #getSeaLevelSunset() sea level sunset}.\r\n     *\r\n     * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\r\n     *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\r\n     *         a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n     *         documentation.\r\n     * @see #getAlos96Zmanis()\r\n     */\r\n    getTzais96Zmanis() {\r\n        const shaahZmanis = this.getShaahZmanisGra();\r\n        if (shaahZmanis === Long_MIN_VALUE) {\r\n            return null;\r\n        }\r\n        return ComplexZmanimCalendar.getTimeOffset(this.getElevationAdjustedSunset(), shaahZmanis * 1.6);\r\n    }\r\n    /**\r\n     * Method to return <em>tzais</em> (dusk) calculated as 90 minutes after sea level sunset. This method returns\r\n     * <em>tzais</em> (nightfall) based on the opinion of the Magen Avraham that the time to walk the distance of a\r\n     * <em>Mil</em> according to the <em><a href=\"https://en.wikipedia.org/wiki/Maimonides\">Rambam</a></em>'s opinion\r\n     * is 18 minutes for a total of 90 minutes based on the opinion of <em>Ula</em> who calculated <em>tzais</em> as 5\r\n     * <em>Mil</em> after sea level shkiah (sunset). A similar calculation {@link #getTzais19Point8Degrees()}uses solar\r\n     * position calculations based on this time.\r\n     *\r\n     * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\r\n     *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\r\n     *         a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n     *         documentation.\r\n     * @see #getTzais19Point8Degrees()\r\n     * @see #getAlos90()\r\n     */\r\n    getTzais90() {\r\n        return ComplexZmanimCalendar.getTimeOffset(this.getElevationAdjustedSunset(), 90 * ComplexZmanimCalendar.MINUTE_MILLIS);\r\n    }\r\n    /**\r\n     * This method returns <em>tzais</em> (nightfall) based on the opinion of the <em>Magen Avraham</em> that the time\r\n     * to walk the distance of a <em>Mil</em> according to the <em><a href=\"https://en.wikipedia.org/wiki/Maimonides\"\r\n     * >Rambam</a></em>'s opinion is 2/5 of an hour (24 minutes) for a total of 120 minutes based on the opinion of\r\n     * <em>Ula</em> who calculated <em>tzais</em> as 5 <em>Mil</em> after sea level <em>shkiah</em> (sunset). A similar\r\n     * calculation {@link #getTzais26Degrees()} uses temporal calculations based on this time.\r\n     *\r\n     * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\r\n     *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\r\n     *         a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n     *         documentation.\r\n     * @see #getTzais26Degrees()\r\n     * @see #getAlos120()\r\n     */\r\n    getTzais120() {\r\n        return ComplexZmanimCalendar.getTimeOffset(this.getElevationAdjustedSunset(), 120 * ComplexZmanimCalendar.MINUTE_MILLIS);\r\n    }\r\n    /**\r\n     * Method to return <em>tzais</em> (dusk) calculated using 120 minutes zmaniyos after {@link #getSeaLevelSunset() sea level sunset}.\r\n     *\r\n     * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\r\n     *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\r\n     *         a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n     *         documentation.\r\n     * @see #getAlos120Zmanis()\r\n     */\r\n    getTzais120Zmanis() {\r\n        const shaahZmanis = this.getShaahZmanisGra();\r\n        if (shaahZmanis === Long_MIN_VALUE) {\r\n            return null;\r\n        }\r\n        return ComplexZmanimCalendar.getTimeOffset(this.getElevationAdjustedSunset(), shaahZmanis * 2);\r\n    }\r\n    /**\r\n     * For information on how this is calculated see the comments on {@link #getAlos16Point1Degrees()}\r\n     *\r\n     * @return the <code>Date</code> representing the time. If the calculation can't be computed such as northern and\r\n     *         southern locations even south of the Arctic Circle and north of the Antarctic Circle where the sun may\r\n     *         not reach low enough below the horizon for this calculation, a null will be returned. See detailed\r\n     *         explanation on top of the {@link AstronomicalCalendar} documentation.\r\n     * @see #getTzais72()\r\n     * @see #getAlos16Point1Degrees() for more information on this calculation.\r\n     */\r\n    getTzais16Point1Degrees() {\r\n        return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_16_POINT_1);\r\n    }\r\n    /**\r\n     * For information on how this is calculated see the comments on {@link #getAlos26Degrees()}\r\n     *\r\n     * @return the <code>Date</code> representing the time. If the calculation can't be computed such as northern and\r\n     *         southern locations even south of the Arctic Circle and north of the Antarctic Circle where the sun may\r\n     *         not reach low enough below the horizon for this calculation, a null will be returned. See detailed\r\n     *         explanation on top of the {@link AstronomicalCalendar} documentation.\r\n     * @see #getTzais120()\r\n     * @see #getAlos26Degrees()\r\n     */\r\n    getTzais26Degrees() {\r\n        return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_26_DEGREES);\r\n    }\r\n    /**\r\n     * For information on how this is calculated see the comments on {@link #getAlos18Degrees()}\r\n     *\r\n     * @return the <code>Date</code> representing the time. If the calculation can't be computed such as northern and\r\n     *         southern locations even south of the Arctic Circle and north of the Antarctic Circle where the sun may\r\n     *         not reach low enough below the horizon for this calculation, a null will be returned. See detailed\r\n     *         explanation on top of the {@link AstronomicalCalendar} documentation.\r\n     * @see #getAlos18Degrees()\r\n     */\r\n    getTzais18Degrees() {\r\n        return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ASTRONOMICAL_ZENITH);\r\n    }\r\n    /**\r\n     * For information on how this is calculated see the comments on {@link #getAlos19Point8Degrees()}\r\n     *\r\n     * @return the <code>Date</code> representing the time. If the calculation can't be computed such as northern and\r\n     *         southern locations even south of the Arctic Circle and north of the Antarctic Circle where the sun may\r\n     *         not reach low enough below the horizon for this calculation, a null will be returned. See detailed\r\n     *         explanation on top of the {@link AstronomicalCalendar} documentation.\r\n     * @see #getTzais90()\r\n     * @see #getAlos19Point8Degrees()\r\n     */\r\n    getTzais19Point8Degrees() {\r\n        return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_19_POINT_8);\r\n    }\r\n    /**\r\n     * A method to return <em>tzais</em> (dusk) calculated as 96 minutes after sea level sunset. For information on how\r\n     * this is calculated see the comments on {@link #getAlos96()}.\r\n     *\r\n     * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\r\n     *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\r\n     *         a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n     *         documentation.\r\n     * @see #getAlos96()\r\n     */\r\n    getTzais96() {\r\n        return ComplexZmanimCalendar.getTimeOffset(this.getElevationAdjustedSunset(), 96 * ComplexZmanimCalendar.MINUTE_MILLIS);\r\n    }\r\n    /**\r\n     * A method that returns the local time for fixed <em>chatzos</em>. This time is noon and midnight adjusted from\r\n     * standard time to account for the local latitude. The 360&deg; of the globe divided by 24 calculates to 15&deg;\r\n     * per hour with 4 minutes per degree, so at a longitude of 0 , 15, 30 etc... <em>Chatzos</em> in 12:00 noon.\r\n     * Lakewood, N.J., whose longitude is -74.2094, is 0.7906 away from the closest multiple of 15 at -75&deg;. This is\r\n     * multiplied by 4 to yield 3 minutes and 10 seconds for a <em>chatzos</em> of 11:56:50. This method is not tied to\r\n     * the theoretical 15&deg; timezones, but will adjust to the actual timezone and <a\r\n     * href=\"http://en.wikipedia.org/wiki/Daylight_saving_time\">Daylight saving time</a>.\r\n     *\r\n     * @return the Date representing the local <em>chatzos</em>\r\n     * @see GeoLocation#getLocalMeanTimeOffset()\r\n     */\r\n    getFixedLocalChatzos() {\r\n        const geoLocation = this.getGeoLocation();\r\n        const rawOffsetHours = TimeZone.getRawOffset(geoLocation.getTimeZone()) / ComplexZmanimCalendar.HOUR_MILLIS;\r\n        return ComplexZmanimCalendar.getTimeOffset(this.getDateFromTime(12 - rawOffsetHours, true), -geoLocation.getLocalMeanTimeOffset());\r\n    }\r\n    /**\r\n     * A method that returns the latest <em>zman krias shema</em> (time to recite Shema in the morning) calculated as 3\r\n     * hours before {@link #getFixedLocalChatzos()}.\r\n     *\r\n     * @return the <code>Date</code> of the latest <em>zman krias shema</em> calculated as 3 hours before\r\n     *         {@link #getFixedLocalChatzos()}..\r\n     * @see #getFixedLocalChatzos()\r\n     * @see #getSofZmanTfilaFixedLocal()\r\n     */\r\n    getSofZmanShmaFixedLocal() {\r\n        return ComplexZmanimCalendar.getTimeOffset(this.getFixedLocalChatzos(), -180 * ComplexZmanimCalendar.MINUTE_MILLIS);\r\n    }\r\n    /**\r\n     * This method returns the latest <em>zman tfila</em> (time to recite the morning prayers) calculated as 2 hours\r\n     * before {@link #getFixedLocalChatzos()}.\r\n     *\r\n     * @return the <code>Date</code> of the latest <em>zman tfila</em>.\r\n     * @see #getFixedLocalChatzos()\r\n     * @see #getSofZmanShmaFixedLocal()\r\n     */\r\n    getSofZmanTfilaFixedLocal() {\r\n        return ComplexZmanimCalendar.getTimeOffset(this.getFixedLocalChatzos(), -120 * ComplexZmanimCalendar.MINUTE_MILLIS);\r\n    }\r\n    /**\r\n     * Returns the Date of the molad based time if it occurs on the current date.Since Kiddush Levana can only be said\r\n     * during the day, there are parameters to limit it to between <em>alos</em> and <em>tzais</em>. If the time occurs\r\n     * between alos and tzais, tzais will be returned\r\n     *\r\n     * @param moladBasedTime\r\n     *            the molad based time such as molad, tchilas and sof zman Kiddush Levana\r\n     * @param alos\r\n     *            optional start of day to limit molad times to the end of the night before or beginning of the next night. Ignored if\r\n     *            either this or tzais are null.\r\n     * @param tzais\r\n     *            optional end of day to limit molad times to the end of the night before or beginning of the next night. Ignored if\r\n     *            either this or alos are null\r\n     * @param techila\r\n     *            is it the start of Kiddush Levana time or the end? If it is start roll it to the next <em>tzais</em>, and and if it\r\n     *            is the end, return the end of the previous night (alos passed in). Ignored if either alos or tzais are null.\r\n     * @return the molad based time. If the zman does not occur during the current date, null will be returned.\r\n     */\r\n    getMoladBasedTime(moladBasedTime, alos, tzais, techila) {\r\n        const lastMidnight = this.getMidnightLastNight();\r\n        const midnightTonight = this.getMidnightTonight();\r\n        if (!(moladBasedTime < lastMidnight) || (moladBasedTime > midnightTonight)) {\r\n            if (alos !== null || tzais !== null) {\r\n                return techila && !(moladBasedTime < tzais || moladBasedTime > alos)\r\n                    ? tzais\r\n                    : alos;\r\n            }\r\n            return moladBasedTime;\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Returns the latest time of Kiddush Levana according to the <a\r\n     * href=\"http://en.wikipedia.org/wiki/Yaakov_ben_Moshe_Levi_Moelin\">Maharil's</a> opinion that it is calculated as\r\n     * halfway between molad and molad. This adds half the 29 days, 12 hours and 793 chalakim time between molad and\r\n     * molad (14 days, 18 hours, 22 minutes and 666 milliseconds) to the month's molad. The sof zman Kiddush Levana\r\n     * will be returned even if it occurs during the day. To limit the time to between <em>tzais</em> and <em>alos</em>,\r\n     * see {@link #getSofZmanKidushLevanaBetweenMoldos(Date, Date)}.\r\n     * This method is available in the current release of the API but may change or be removed in the future since it depends\r\n     * on the still changing {@link JewishCalendar} and related classes, and adds a dependency to the hebrewcalendar package.\r\n     *\r\n     * @param alos\r\n     *            the beginning of the Jewish day. If Kidush Levana occurs during the day (starting at alos and ending\r\n     *            at tzais), the time returned will be alos. If either the alos or tzais parameters are null, no daytime\r\n     *            adjustment will be made.\r\n     * @param tzais\r\n     *            the end of the Jewish day. If Kidush Levana occurs during the day (starting at alos and ending at\r\n     *            tzais), the time returned will be alos. If either the alos or tzais parameters are null, no daytime\r\n     *            adjustment will be made.\r\n     * @return the Date representing the moment halfway between molad and molad. If the time occurs between\r\n     *         <em>alos</em> and <em>tzais</em>, <em>alos</em> will be returned\r\n     * @see #getSofZmanKidushLevanaBetweenMoldos()\r\n     * @see #getSofZmanKidushLevana15Days(Date, Date)\r\n     * @see JewishCalendar#getSofZmanKidushLevanaBetweenMoldos()\r\n     */\r\n    getSofZmanKidushLevanaBetweenMoldos(alos = null, tzais = null) {\r\n        const jewishCalendar = new JewishCalendar(this.getDate());\r\n        // Do not calculate for impossible dates, but account for extreme cases. In the extreme case of Rapa Iti in French\r\n        // Polynesia on Dec 2027 when kiddush Levana 3 days can be said on <em>Rosh Chodesh</em>, the sof zman Kiddush Levana\r\n        // will be on the 12th of the Teves. In the case of Anadyr, Russia on Jan, 2071, sof zman Kiddush Levana between the\r\n        // moldos will occur is on the night of 17th of Shevat. See Rabbi Dovid Heber's Shaarei Zmanim chapter 4 (pages 28 and 32).\r\n        if (jewishCalendar.getJewishDayOfMonth() < 11 || jewishCalendar.getJewishDayOfMonth() > 16) {\r\n            return null;\r\n        }\r\n        return this.getMoladBasedTime(jewishCalendar.getSofZmanKidushLevanaBetweenMoldos(), alos, tzais, false);\r\n    }\r\n    /**\r\n     * Returns the latest time of Kiddush Levana according to the <a\r\n     * href=\"http://en.wikipedia.org/wiki/Yaakov_ben_Moshe_Levi_Moelin\">Maharil's</a> opinion that it is calculated as\r\n     * halfway between molad and molad. This adds half the 29 days, 12 hours and 793 chalakim time between\r\n     * <em>molad</em> and <em>molad</em> (14 days, 18 hours, 22 minutes and 666 milliseconds) to the month's molad. If\r\n     * the time of <em>sof zman Kiddush Levana</em> occurs during the day (between\r\n     * <em>{@link ZmanimCalendar#getAlos72() Alos}</em> and <em>{@link ZmanimCalendar#getTzais72() tzais}</em>) it\r\n     * return the <em>alos</em> prior to the calculated <em>sof zman Kiddush Levana</em>. This method is available in\r\n     * the 1.3 release of the API but may change or be removed in the future since it depends on the still changing\r\n     * {@link JewishCalendar} and related classes.\r\n     *\r\n     * @return the Date representing the moment halfway between molad and molad. If the time occurs between\r\n     *         <em>alos</em> and <em>tzais</em>, <em>alos</em> will be returned\r\n     * @see #getSofZmanKidushLevanaBetweenMoldos(Date, Date)\r\n     * @see #getSofZmanKidushLevana15Days()\r\n     * @see JewishCalendar#getSofZmanKidushLevanaBetweenMoldos()\r\n     */\r\n    /*\r\n      public getSofZmanKidushLevanaBetweenMoldos(): Date {\r\n          return this.getSofZmanKidushLevanaBetweenMoldos(this.getAlos72(), this.getTzais72());\r\n      }\r\n  */\r\n    /**\r\n     * Returns the latest time of <em>Kiddush Levana</em> calculated as 15 days after the <em>molad</em>. This is the\r\n     * opinion brought down in the Shulchan Aruch (Orach Chaim 426). It should be noted that some opinions hold that the\r\n     * <a href=\"http://en.wikipedia.org/wiki/Moses_Isserles\">Rema</a> who brings down the opinion of the <a\r\n     * href=\"http://en.wikipedia.org/wiki/Yaakov_ben_Moshe_Levi_Moelin\">Maharil's</a> of calculating\r\n     * {@link #getSofZmanKidushLevanaBetweenMoldos(Date, Date) half way between molad and mold} is of the opinion that\r\n     * Mechaber agrees to his opinion. Also see the Aruch Hashulchan. For additional details on the subject, See Rabbi\r\n     * Dovid Heber's very detailed write-up in Siman Daled (chapter 4) of <a href=\"http://www.hebrewbooks.org/53000\">Shaarei\r\n     * Zmanim</a>. If the time of <em>sof zman Kiddush Levana</em> occurs during the day (between the <em>alos</em> and\r\n     * <em>tzais</em> passed in as parameters), it returns the <em>alos</em> passed in. If a null alos or tzais are\r\n     * passed to this method, the non-daytime adjusted time will be returned.\r\n     * This method is available in the 1.3 release of the API but may change or be removed in the future since\r\n     * it depends on the still changing {@link JewishCalendar} and related classes.\r\n     * @todo Add hyperlinks to documentation.\r\n     *\r\n     * @param alos\r\n     *            the beginning of the Jewish day. If Kidush Levana occurs during the day (starting at alos and ending\r\n     *            at tzais), the time returned will be alos. If either the alos or tzais parameters are null, no daytime\r\n     *            adjustment will be made.\r\n     * @param tzais\r\n     *            the end of the Jewish day. If Kidush Levana occurs during the day (starting at alos and ending at\r\n     *            tzais), the time returned will be alos. If either the alos or tzais parameters are null, no daytime\r\n     *            adjustment will be made.\r\n     * @return the Date representing the moment 15 days after the molad. If the time occurs between <em>alos</em> and\r\n     *         <em>tzais</em>, <em>alos</em> will be returned\r\n     *\r\n     * @see #getSofZmanKidushLevanaBetweenMoldos(Date, Date)\r\n     * @see JewishCalendar#getSofZmanKidushLevana15Days()\r\n     */\r\n    getSofZmanKidushLevana15Days(alos = null, tzais = null) {\r\n        const jewishCalendar = new JewishCalendar(this.getDate());\r\n        // Do not calculate for impossible dates, but account for extreme cases. In the extreme case of Rapa Iti in\r\n        // French Polynesia on Dec 2027 when kiddush Levana 3 days can be said on <em>Rosh Chodesh</em>, the sof zman Kiddush\r\n        // Levana will be on the 12th of the Teves. in the case of Anadyr, Russia on Jan, 2071, sof zman kiddush levana will\r\n        // occur after midnight on the 17th of Shevat. See Rabbi Dovid Heber's Shaarei Zmanim chapter 4 (pages 28 and 32).\r\n        if (jewishCalendar.getJewishDayOfMonth() < 11 || jewishCalendar.getJewishDayOfMonth() > 17) {\r\n            return null;\r\n        }\r\n        return this.getMoladBasedTime(jewishCalendar.getSofZmanKidushLevana15Days(), alos, tzais, false);\r\n    }\r\n    /**\r\n     * Returns the latest time of Kiddush Levana calculated as 15 days after the molad. This is the opinion brought down\r\n     * in the Shulchan Aruch (Orach Chaim 426). It should be noted that some opinions hold that the\r\n     * <a href=\"http://en.wikipedia.org/wiki/Moses_Isserles\">Rema</a> who brings down the opinion of the <a\r\n     * href=\"http://en.wikipedia.org/wiki/Yaakov_ben_Moshe_Levi_Moelin\">Maharil's</a> of calculating\r\n     * {@link #getSofZmanKidushLevanaBetweenMoldos(Date, Date) half way between molad and mold} is of the opinion that\r\n     * Mechaber agrees to his opinion. Also see the Aruch Hashulchan. For additional details on the subject, See Rabbi\r\n     * Dovid Heber's very detailed write-up in Siman Daled (chapter 4) of <a href=\"http://www.hebrewbooks.org/53000\">Shaarei\r\n     * Zmanim</a>. The sof zman Kiddush Levana will be returned even if it occurs during the day. To limit the time to\r\n     * between <em>tzais</em> and <em>alos</em>, see {@link #getSofZmanKidushLevana15Days(Date, Date)}.\r\n     * This method is available in the current release of the API but may change or be removed in the future since it depends\r\n     * on the still changing {@link JewishCalendar} and related classes.\r\n     *\r\n     * @return the Date representing the moment 15 days after the <em>molad</em>. If the time occurs between\r\n     *         <em>alos</em> and <em>tzais</em>, <em>alos</em> will be returned\r\n     *\r\n     * @see #getSofZmanKidushLevana15Days(Date, Date)\r\n     * @see #getSofZmanKidushLevanaBetweenMoldos()\r\n     * @see JewishCalendar#getSofZmanKidushLevana15Days()\r\n     */\r\n    /*\r\n      public getSofZmanKidushLevana15Days(): Date {\r\n          return this.getSofZmanKidushLevana15Days(this.getAlos72(), this.getTzais72());\r\n      }\r\n  */\r\n    /**\r\n     * Returns the earliest time of <em>Kiddush Levana</em> according to <em>Rabbeinu Yonah</em>'s opinion that it can\r\n     * be said 3 days after the molad.If the time of <em>tchilas zman Kiddush Levana</em> occurs during the day (between\r\n     * <em>{@link ZmanimCalendar#getAlos72() Alos}</em> and <em>{@link ZmanimCalendar#getTzais72() tzais}</em>) it\r\n     * return the next <em>tzais</em>. This method is available in the 1.3 release of the API but may change or be\r\n     * removed in the future since it depends on the still changing {@link JewishCalendar} and related classes.\r\n     *\r\n     * @param alos\r\n     *            the beginning of the Jewish day. If Kidush Levana occurs during the day (starting at alos and ending\r\n     *            at tzais), the time returned will be tzais. If either the alos or tzais parameters are null, no daytime\r\n     *            adjustment will be made.\r\n     * @param tzais\r\n     *           the end of the Jewish day. If Kidush Levana occurs during the day (starting at alos and ending at\r\n     *            tzais), the time returned will be tzais. If either the alos or tzais parameters are null, no daytime\r\n     *            adjustment will be made.\r\n     * @return the Date representing the moment 3 days after the molad. If the time occurs between <em>alos</em> and\r\n     *         <em>tzais</em>, <em>tzais</em> will be returned\r\n     * @see #getTchilasZmanKidushLevana3Days()\r\n     * @see #getTchilasZmanKidushLevana7Days(Date, Date)\r\n     * @see JewishCalendar#getTchilasZmanKidushLevana3Days()\r\n     */\r\n    getTchilasZmanKidushLevana3Days(alos = null, tzais = null) {\r\n        const jewishCalendar = new JewishCalendar();\r\n        jewishCalendar.setGregorianDate(this.getDate().year, this.getDate().month - 1, this.getDate().day);\r\n        // Do not calculate for impossible dates, but account for extreme cases. Tchilas zman kiddush Levana 3 days for\r\n        // the extreme case of Rapa Iti in French Polynesia on Dec 2027 when kiddush Levana 3 days can be said on the evening\r\n        // of the 30th, the second night of Rosh Chodesh. The 3rd day after the <em>molad</em> will be on the 4th of the month.\r\n        // In the case of Anadyr, Russia on Jan, 2071, when sof zman kiddush levana is on the 17th of the month, the 3rd day\r\n        // from the molad will be on the 5th day of Shevat. See Rabbi Dovid Heber's Shaarei Zmanim chapter 4 (pages 28 and 32).\r\n        if (jewishCalendar.getJewishDayOfMonth() > 5 && jewishCalendar.getJewishDayOfMonth() < 30) {\r\n            return null;\r\n        }\r\n        let zman = this.getMoladBasedTime(jewishCalendar.getTchilasZmanKidushLevana3Days(), alos, tzais, true);\r\n        // Get the following month's zman kiddush Levana for the extreme case of Rapa Iti in French Polynesia on Dec 2027 when\r\n        // kiddush Levana can be said on Rosh Chodesh (the evening of the 30th). See Rabbi Dovid Heber's Shaarei Zmanim chapter 4 (page 32)\r\n        if (zman === null && jewishCalendar.getJewishDayOfMonth() === 30) {\r\n            jewishCalendar.forward(Calendar.MONTH, 1);\r\n            zman = this.getMoladBasedTime(jewishCalendar.getTchilasZmanKidushLevana3Days(), null, null, true);\r\n        }\r\n        return zman;\r\n    }\r\n    /**\r\n     * Returns the earliest time of <em>Kiddush Levana</em> according to <em>Rabbeinu Yonah</em>'s opinion that it can\r\n     * be said 3 days after the molad.If the time of <em>tchilas zman Kiddush Levana</em> occurs during the day (between\r\n     * <em>{@link ZmanimCalendar#getAlos72() Alos}</em> and <em>{@link ZmanimCalendar#getTzais72() tzais}</em>) it\r\n     * return the next <em>tzais</em>. This method is available in the 1.3 release of the API but may change or be\r\n     * removed in the future since it depends on the still changing {@link JewishCalendar} and related classes.\r\n     *\r\n     * @return the Date representing the moment 3 days after the molad. If the time occurs between <em>alos</em> and\r\n     *         <em>tzais</em>, <em>tzais</em> will be returned\r\n     * @see #getTchilasZmanKidushLevana3Days(Date, Date)\r\n     * @see #getTchilasZmanKidushLevana7Days()\r\n     * @see JewishCalendar#getTchilasZmanKidushLevana3Days()\r\n     */\r\n    /*\r\n      public getTchilasZmanKidushLevana3Days(): Date {\r\n          return this.getTchilasZmanKidushLevana3Days(this.getAlos72(), this.getTzais72());\r\n      }\r\n  */\r\n    /**\r\n     * Returns the point in time of <em>Molad</em> as a <code>Date</code> Object. For the traditional day of week, hour,\r\n     * minute and chalakim, {@link JewishCalendar#getMoladAsDate()} and the not yet completed\r\n     * {@link net.sourceforge.zmanim.hebrewcalendar.HebrewDateFormatter} that will have formatting for this.\r\n     *\r\n     * @return the Date representing the moment of the molad. If the molad does not occur on this day, a null will be returned.\r\n     *\r\n     * @see #getTchilasZmanKidushLevana3Days()\r\n     * see #getTchilasZmanKidushLevana7Days(Date, Date)\r\n     * @see JewishCalendar#getMoladAsDate()\r\n     */\r\n    getZmanMolad() {\r\n        const jewishCalendar = new JewishCalendar();\r\n        jewishCalendar.setGregorianDate(this.getDate().year, this.getDate().month - 1, this.getDate().day);\r\n        // Optimize to not calculate for impossible dates, but account for extreme cases. The molad in the extreme case of Rapa\r\n        // Iti in French Polynesia on Dec 2027 occurs on the night of the 27th of Kislev. In the case of Anadyr, Russia on\r\n        // Jan 2071, the molad will be on the 2nd day of Shevat. See Rabbi Dovid Heber's Shaarei Zmanim chapter 4 (pages 28 and 32).\r\n        if (jewishCalendar.getJewishDayOfMonth() > 2 && jewishCalendar.getJewishDayOfMonth() < 27) {\r\n            return null;\r\n        }\r\n        let molad = this.getMoladBasedTime(jewishCalendar.getMoladAsDate(), null, null, true);\r\n        // deal with molad that happens on the end of the previous month\r\n        if (molad === null && jewishCalendar.getJewishDayOfMonth() > 26) {\r\n            jewishCalendar.forward(Calendar.MONTH, 1);\r\n            molad = this.getMoladBasedTime(jewishCalendar.getMoladAsDate(), null, null, true);\r\n        }\r\n        return molad;\r\n    }\r\n    /**\r\n     * Used by Molad based zmanim to determine if zmanim occur during the current day.\r\n     * @see #getMoladBasedTime(Date, Date, Date, boolean)\r\n     * @return previous midnight\r\n     */\r\n    getMidnightLastNight() {\r\n        // reset hour, minutes, seconds and millis\r\n        return this.getDate().set({\r\n            hour: 0,\r\n            minute: 0,\r\n            second: 0,\r\n            millisecond: 0,\r\n        });\r\n    }\r\n    /**\r\n     * Used by Molad based zmanim to determine if zmanim occur during the current day.\r\n     * @see #getMoladBasedTime(Date, Date, Date, boolean)\r\n     * @return following midnight\r\n     */\r\n    getMidnightTonight() {\r\n        return this.getDate()\r\n            .plus({ days: 1 })\r\n            .set({\r\n            hour: 0,\r\n            minute: 0,\r\n            second: 0,\r\n            millisecond: 0,\r\n        });\r\n    }\r\n    /**\r\n     * Returns the earliest time of <em>Kiddush Levana</em> according to the opinions that it should not be said until 7\r\n     * days after the molad. If the time of <em>tchilas zman Kiddush Levana</em> occurs during the day (between\r\n     * <em>{@link ZmanimCalendar#getAlos72() Alos}</em> and <em>{@link ZmanimCalendar#getTzais72() tzais}</em>) it\r\n     * return the next <em>tzais</em>. This method is available in the current release of the API but may change or be\r\n     * removed in the future since it depends on the still changing {@link JewishCalendar} and related classes.\r\n     *\r\n     * @param alos\r\n     *            the beginning of the Jewish day. If Kidush Levana occurs during the day (starting at alos and ending\r\n     *            at tzais), the time returned will be tzais. If either the alos or tzais parameters are null, no daytime\r\n     *            adjustment will be made.\r\n     * @param tzais\r\n     *            the end of the Jewish day. If Kidush Levana occurs during the day (starting at alos and ending at\r\n     *            tzais), the time returned will be tzais. If either the alos or tzais parameters are null, no daytime\r\n     *            adjustment will be made.\r\n     * @return the Date representing the moment 7 days after the molad. If the time occurs between <em>alos</em> and\r\n     *         <em>tzais</em>, <em>tzais</em> will be returned\r\n     * @see #getTchilasZmanKidushLevana3Days(Date, Date)\r\n     * @see #getTchilasZmanKidushLevana7Days()\r\n     * @see JewishCalendar#getTchilasZmanKidushLevana7Days()\r\n     */\r\n    getTchilasZmanKidushLevana7Days(alos = null, tzais = null) {\r\n        const jewishCalendar = new JewishCalendar(this.getDate());\r\n        // Optimize to not calculate for impossible dates, but account for extreme cases. Tchilas zman kiddush Levana 7 days for\r\n        // the extreme case of Rapa Iti in French Polynesia on Jan 2028 (when kiddush Levana 3 days can be said on the evening\r\n        // of the 30th, the second night of Rosh Chodesh), the 7th day after the molad will be on the 4th of the month.\r\n        // In the case of Anadyr, Russia on Jan, 2071, when sof zman kiddush levana is on the 17th of the month, the 7th day\r\n        // from the molad will be on the 9th day of Shevat. See Rabbi Dovid Heber's Shaarei Zmanim chapter 4 (pages 28 and 32).\r\n        if (jewishCalendar.getJewishDayOfMonth() < 4 || jewishCalendar.getJewishDayOfMonth() > 9) {\r\n            return null;\r\n        }\r\n        return this.getMoladBasedTime(jewishCalendar.getTchilasZmanKidushLevana7Days(), alos, tzais, true);\r\n    }\r\n    /**\r\n     * Returns the earliest time of <em>Kiddush Levana</em> according to the opinions that it should not be said until 7\r\n     * days after the molad. If the time of <em>tchilas zman Kiddush Levana</em> occurs during the day (between\r\n     * <em>{@link ZmanimCalendar#getAlos72() Alos}</em> and <em>{@link ZmanimCalendar#getTzais72() tzais}</em>) it\r\n     * return the next <em>tzais</em>. This method is available in the 1.3 release of the API but may change or be\r\n     * removed in the future since it depends on the still changing {@link JewishCalendar} and related classes.\r\n     *\r\n     * @return the Date representing the moment 7 days after the molad. If the time occurs between <em>alos</em> and\r\n     *         <em>tzais</em>, <em>tzais</em> will be returned\r\n     * @see #getTchilasZmanKidushLevana7Days(Date, Date)\r\n     * @see #getTchilasZmanKidushLevana3Days()\r\n     * @see JewishCalendar#getTchilasZmanKidushLevana7Days()\r\n     */\r\n    /*\r\n      public getTchilasZmanKidushLevana7Days(): Date {\r\n          return this.getTchilasZmanKidushLevana7Days(this.getAlos72(), this.getTzais72());\r\n      }\r\n  */\r\n    /**\r\n     * This method returns the latest time one is allowed eating chametz on Erev Pesach according to the opinion of the\r\n     * <em><a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a></em>. This time is identical to the {@link\r\n      * #getSofZmanTfilaGRA() Sof zman tfilah GRA} and is provided as a convenience method for those who are unaware how\r\n     * this zman is calculated. This time is 4 hours into the day based on the opinion of the <em><a href=\r\n     * \"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a></em> that the day is calculated from sunrise to sunset. This\r\n     * returns the time 4 * {@link #getShaahZmanisGra()} after {@link #getSeaLevelSunrise() sea level sunrise}.\r\n     *\r\n     * @see ZmanimCalendar#getShaahZmanisGra()\r\n     * @see ZmanimCalendar#getSofZmanTfilaGRA()\r\n     * @return the <code>Date</code> one is allowed eating chametz on Erev Pesach. If the calculation can't be computed\r\n     *         such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\r\n     *         where it does not set, a null will be returned. See detailed explanation on top of the\r\n     *         {@link AstronomicalCalendar} documentation.\r\n     */\r\n    getSofZmanAchilasChametzGRA() {\r\n        return this.getSofZmanTfilaGRA();\r\n    }\r\n    /**\r\n     * This method returns the latest time one is allowed eating chametz on Erev Pesach according to the opinion of the\r\n     * <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> based on <em>alos</em> being {@link #getAlos72() 72} minutes before {@link #getSunrise() sunrise}.\r\n     * This time is identical to the {@link #getSofZmanTfilaMGA72Minutes() Sof zman tfilah MGA 72 minutes}. This time\r\n     * is 4 <em>{@link #getShaahZmanisMGA() shaos zmaniyos}</em> (temporal hours) after {@link #getAlos72() dawn} based\r\n     * on the opinion of the <em>MGA</em> that the day is calculated from a {@link #getAlos72() dawn} of 72 minutes\r\n     * before sunrise to {@link #getTzais72() nightfall} of 72 minutes after sunset. This returns the time of 4 *\r\n     * {@link #getShaahZmanisMGA()} after {@link #getAlos72() dawn}.\r\n     *\r\n     * @return the <code>Date</code> of the latest time of eating chametz. If the calculation can't be computed such as\r\n     *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n     *         does not set), a null will be returned. See detailed explanation on top of the\r\n     *         {@link AstronomicalCalendar} documentation.\r\n     * @see #getShaahZmanisMGA()\r\n     * @see #getAlos72()\r\n     * @see #getSofZmanTfilaMGA72Minutes()\r\n     */\r\n    getSofZmanAchilasChametzMGA72Minutes() {\r\n        return this.getSofZmanTfilaMGA72Minutes();\r\n    }\r\n    /**\r\n     * This method returns the latest time one is allowed eating chametz on Erev Pesach according to the opinion of the\r\n     * of the <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> based on <em>alos</em> being {@link #getAlos16Point1Degrees() 16.1&deg;} before\r\n     * {@link #getSunrise() sunrise}. This time is 4 <em>{@link #getShaahZmanis16Point1Degrees() shaos zmaniyos}</em>\r\n     * (solar hours) after {@link #getAlos16Point1Degrees() dawn} based on the opinion of the <em>MGA</em> that the day\r\n     * is calculated from dawn to nightfall with both being 16.1&deg; below sunrise or sunset. This returns the time of\r\n     * 4 {@link #getShaahZmanis16Point1Degrees()} after {@link #getAlos16Point1Degrees() dawn}.\r\n     *\r\n     * @return the <code>Date</code> of the latest time of eating chametz. If the calculation can't be computed such as\r\n     *         northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle where\r\n     *         the sun may not reach low enough below the horizon for this calculation, a null will be returned. See\r\n     *         detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n     *\r\n     * @see #getShaahZmanis16Point1Degrees()\r\n     * @see #getAlos16Point1Degrees()\r\n     * @see #getSofZmanTfilaMGA16Point1Degrees()\r\n     */\r\n    getSofZmanAchilasChametzMGA16Point1Degrees() {\r\n        return this.getSofZmanTfilaMGA16Point1Degrees();\r\n    }\r\n    /**\r\n     * This method returns the latest time for burning chametz on Erev Pesach according to the opinion of the\r\n     * <em><a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a></em> This time is 5 hours into the day based on the opinion of the\r\n     * <em><a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a></em> that the day is calculated from sunrise to sunset. This returns the\r\n     * time 5 * {@link #getShaahZmanisGra()} after {@link #getSeaLevelSunrise() sea level sunrise}.\r\n     *\r\n     * @see ZmanimCalendar#getShaahZmanisGra()\r\n     * @return the <code>Date</code> of the latest time for burning chametz on Erev Pesach. If the calculation can't be\r\n     *         computed such as in the Arctic Circle where there is at least one day a year where the sun does not rise,\r\n     *         and one where it does not set, a null will be returned. See detailed explanation on top of the\r\n     *         {@link AstronomicalCalendar} documentation.\r\n     */\r\n    getSofZmanBiurChametzGRA() {\r\n        return ComplexZmanimCalendar.getTimeOffset(this.getElevationAdjustedSunrise(), this.getShaahZmanisGra() * 5);\r\n    }\r\n    /**\r\n     * This method returns the latest time for burning chametz on Erev Pesach according to the opinion of the\r\n     * <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> based on <em>alos</em> being {@link #getAlos72() 72} minutes before {@link #getSunrise() sunrise}.\r\n     * This time is 5 <em>{@link #getShaahZmanisMGA() shaos zmaniyos}</em> (temporal hours) after {@link #getAlos72()\r\n       * dawn} based on the opinion of the <em>MGA</em> that the day is calculated from a {@link #getAlos72() dawn} of 72\r\n     * minutes before sunrise to {@link #getTzais72() nightfall} of 72 minutes after sunset. This returns the time of 5\r\n     * * {@link #getShaahZmanisMGA()} after {@link #getAlos72() dawn}.\r\n     *\r\n     * @return the <code>Date</code> of the latest time for burning chametz on Erev Pesach. If the calculation can't be\r\n     *         computed such as in the Arctic Circle where there is at least one day a year where the sun does not rise,\r\n     *         and one where it does not set), a null will be returned. See detailed explanation on top of the\r\n     *         {@link AstronomicalCalendar} documentation.\r\n     * @see #getShaahZmanisMGA()\r\n     * @see #getAlos72()\r\n     */\r\n    getSofZmanBiurChametzMGA72Minutes() {\r\n        return ComplexZmanimCalendar.getTimeOffset(this.getAlos72(), this.getShaahZmanisMGA() * 5);\r\n    }\r\n    /**\r\n     * This method returns the latest time for burning <em>chametz</em> on <em>Erev Pesach</em> according to the opinion of the\r\n     * <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> based on <em>alos</em> being {@link #getAlos16Point1Degrees() 16.1&deg;} before\r\n     * {@link #getSunrise() sunrise}. This time is 5 <em>{@link #getShaahZmanis16Point1Degrees() shaos zmaniyos}</em>\r\n     * (solar hours) after {@link #getAlos16Point1Degrees() dawn} based on the opinion of the <em>MGA</em> that the day\r\n     * is calculated from dawn to nightfall with both being 16.1&deg; below sunrise or sunset. This returns the time of\r\n     * 5 {@link #getShaahZmanis16Point1Degrees()} after {@link #getAlos16Point1Degrees() dawn}.\r\n     *\r\n     * @return the <code>Date</code> of the latest time for burning chametz on Erev Pesach. If the calculation can't be\r\n     *         computed such as northern and southern locations even south of the Arctic Circle and north of the\r\n     *         Antarctic Circle where the sun may not reach low enough below the horizon for this calculation, a null\r\n     *         will be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n     *\r\n     * @see #getShaahZmanis16Point1Degrees()\r\n     * @see #getAlos16Point1Degrees()\r\n     */\r\n    getSofZmanBiurChametzMGA16Point1Degrees() {\r\n        return ComplexZmanimCalendar.getTimeOffset(this.getAlos16Point1Degrees(), this.getShaahZmanis16Point1Degrees() * 5);\r\n    }\r\n    /**\r\n     * A method that returns \"solar\" midnight, or the time when the sun is at its <a\r\n     * href=\"http://en.wikipedia.org/wiki/Nadir\">nadir</a>.\r\n     * <b>Note:</b> this method is experimental and might be removed.\r\n     *\r\n     * @return the <code>Date</code> of Solar Midnight (chatzos layla). If the calculation can't be computed such as in\r\n     *         the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n     *         does not set, a null will be returned. See detailed explanation on top of the\r\n     *         {@link AstronomicalCalendar} documentation.\r\n     */\r\n    getSolarMidnight() {\r\n        const clonedCal = this.clone();\r\n        clonedCal.setDate(clonedCal.getDate().plus({ days: 1 }));\r\n        const sunset = this.getSeaLevelSunset();\r\n        const sunrise = clonedCal.getSeaLevelSunrise();\r\n        return ComplexZmanimCalendar.getTimeOffset(sunset, this.getTemporalHour(sunset, sunrise) * 6);\r\n    }\r\n    /**\r\n     * A method that returns the <em><a href=\"https://en.wikipedia.org/wiki/Shneur_Zalman_of_Liadi\">Baal Hatanya</a></em>'s\r\n     * <em>netz amiti</em> (sunrise) without {@link AstronomicalCalculator#getElevationAdjustment(double)\r\n       * elevation adjustment}. This forms the base for the <em>Baal Hatanya</em>'s dawn based calculations that are\r\n     * calculated as a dip below the horizon before sunrise.\r\n     *\r\n     * According to the <em>Baal Hatanya</em>, <em>netz amiti</em>, or true (halachic) sunrise, is when the top of the sun's\r\n     * disk is visible at an elevation similar to the mountains of Eretz Yisrael. The time is calculated as the point at which\r\n     * the center of the sun's disk is 1.583&deg; below the horizon. This degree based calculation can be found in Rabbi Shalom\r\n     * DovBer Levine's commentary on The <a href=\"http://www.chabadlibrary.org/books/pdf/Seder-Hachnosas-Shabbos.pdf\">Baal\r\n     * Hatanya's Seder Hachnasas Shabbos</a>. From an elevation of 546 meters, the top of <a href=\r\n     * \"https://en.wikipedia.org/wiki/Mount_Carmel\">Har Hacarmel</a>, the sun disappears when it is 1&deg; 35' or 1.583&deg;\r\n     * below the sea level horizon. This in turn is based on the Gemara <a href=\r\n     * \"http://www.hebrewbooks.org/shas.aspx?mesechta=2&amp;daf=35\">Shabbos 35a</a>. There are other opinions brought down by\r\n     * Rabbi Levine, including Rabbi Yosef Yitzchok\r\n     * Feigelstock who calculates it as the degrees below the horizon 4 minutes after sunset in Yerushalaym (on the equinox). That\r\n     * is brought down as 1.583&deg;. This is identical to the 1&deg; 35' zman and is probably a typo and should be 1.683&deg;.\r\n     * These calculations are used by most <a href=\"https://en.wikipedia.org/wiki/Chabad\">Chabad</a> calendars that use the\r\n     * <em>Baal Hatanya</em>'s Zmanim. See\r\n     * <a href=\"https://www.chabad.org/library/article_cdo/aid/3209349/jewish/About-Our-Zmanim-Calculations.htm\">About Our Zmanim\r\n     * Calculations @ Chabad.org</a>.\r\n     *\r\n     * Note: <em>netz amiti</em> is used only for calculating certain zmanim, and is intentionally unpublished. For practical purposes,\r\n     * daytime mitzvos like shofar and lulav should not be done until after the published time for netz-sunrise.\r\n     *\r\n     * @return the <code>Date</code> representing the exact sea-level <em>netz amiti</em> (sunrise) time. If the calculation can't be\r\n     *         computed such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\r\n     *         where it does not set, a null will be returned. See detailed explanation on top of the page.\r\n     *\r\n     * @see #getSunrise()\r\n     * @see #getSeaLevelSunrise()\r\n     * @see #getSunsetBaalHatanya()\r\n     * @see #ZENITH_1_POINT_583\r\n     */\r\n    getSunriseBaalHatanya() {\r\n        return this.getSunriseOffsetByDegrees(ComplexZmanimCalendar.ZENITH_1_POINT_583);\r\n    }\r\n    /**\r\n     * A method that returns the <em><a href=\"https://en.wikipedia.org/wiki/Shneur_Zalman_of_Liadi\">Baal Hatanya</a></em>'s\r\n     * <em>shkiah amiti</em> (sunset) without {@link AstronomicalCalculator#getElevationAdjustment(double)\r\n       * elevation adjustment}. This forms the base for the <em>Baal Hatanya</em>'s  dusk based calculations that are calculated\r\n     * as a dip below the horizon after sunset.\r\n     *\r\n     * According to the <em>Baal Hatanya</em>, <em>shkiah amiti</em>, true (halachic) sunset, is when the top of the\r\n     * sun's disk disappears from view at an elevation similar to the mountains of Eretz Yisrael.\r\n     * This time is calculated as the point at which the center of the sun's disk is 1.583 degrees below the horizon.\r\n     *\r\n     * Note: <em>shkiah amiti</em> is used only for calculating certain zmanim, and is intentionally unpublished. For practical\r\n     * purposes, all daytime mitzvos should be completed before the published time for shkiah-sunset.\r\n     *\r\n     * For further explanation of the calculations used for the <em>Baal Hatanya</em>'s Zmanim in this library, see\r\n     * <a href=\"https://www.chabad.org/library/article_cdo/aid/3209349/jewish/About-Our-Zmanim-Calculations.htm\">About Our Zmanim\r\n     * Calculations @ Chabad.org</a>.\r\n     *\r\n     * @return the <code>Date</code> representing the exact sea-level <em>shkiah amiti</em> (sunset) time. If the calculation\r\n     *         can't be computed such as in the Arctic Circle where there is at least one day a year where the sun does not\r\n     *         rise, and one where it does not set, a null will be returned. See detailed explanation on top of the\r\n     *         {@link AstronomicalCalendar} documentation.\r\n     *\r\n     * @see #getSunset()\r\n     * @see #getSeaLevelSunset()\r\n     * @see #getSunriseBaalHatanya()\r\n     * @see #ZENITH_1_POINT_583\r\n     */\r\n    getSunsetBaalHatanya() {\r\n        return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_1_POINT_583);\r\n    }\r\n    /**\r\n     * A method that returns the <em><a href=\"https://en.wikipedia.org/wiki/Shneur_Zalman_of_Liadi\">Baal Hatanya</a></em>'s\r\n     * a <em>shaah zmanis</em> ({@link #getTemporalHour(Date, Date) temporal hour}). This forms the base for the\r\n     * <em>Baal Hatanya</em>'s  day  based calculations that are calculated\r\n     * as a 1.583&deg; dip below the horizon after sunset.\r\n     *\r\n     * According to the <em>Baal Hatanya</em>, <em>shkiah amiti</em>, true (halachic) sunset, is when the top of the\r\n     * sun's disk disappears from view at an elevation similar to the mountains of Eretz Yisrael.\r\n     * This time is calculated as the point at which the center of the sun's disk is 1.583 degrees below the horizon.\r\n     *\r\n     * A method that returns a <em>shaah zmanis</em> ( {@link #getTemporalHour(Date, Date) temporal hour}) calculated\r\n     * based on the <em><a href=\"https://en.wikipedia.org/wiki/Shneur_Zalman_of_Liadi\">Baal Hatanya</a></em>'s <em>netz\r\n     * amiti</em> and <em>shkiah amiti</em> using a dip of 1.583&deg; below the sea level horizon. This calculation divides\r\n     * the day based on the opinion of the <em>Baal Hatanya</em> that the day runs from {@link #getSunriseBaalHatanya()\r\n       * netz amiti} to {@link #getSunsetBaalHatanya() shkiah amiti}. The calculations are based on a day from {@link\r\n      * #getSunriseBaalHatanya() sea level netz amiti} to {@link #getSunsetBaalHatanya() sea level shkiah amiti}. The day\r\n     * is split into 12 equal parts with each one being a <em>shaah zmanis</em>. This method is similar to {@link\r\n      * #getTemporalHour}, but all calculations are based on a sea level sunrise and sunset.\r\n     * @todo Copy sunrise and sunset comments here as applicable.\r\n     *\r\n     * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em> calculated from\r\n     *         {@link #getSunriseBaalHatanya() <em>netz amiti</em> (sunrise)} to {@link #getSunsetBaalHatanya() <em>shkiah amiti</em>\r\n       *         (\"real\" sunset)}. If the calculation can't be computed such as in the Arctic Circle where there is at least one day a\r\n     *         year where the sun does not rise, and one where it does not set, {@link Long#MIN_VALUE} will be returned. See\r\n     *         detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n     *\r\n     * @see #getTemporalHour(Date, Date)\r\n     * @see #getSunriseBaalHatanya()\r\n     * @see #getSunsetBaalHatanya()\r\n     * @see #ZENITH_1_POINT_583\r\n     */\r\n    getShaahZmanisBaalHatanya() {\r\n        return this.getTemporalHour(this.getSunriseBaalHatanya(), this.getSunsetBaalHatanya());\r\n    }\r\n    /**\r\n     * Returns the <em><a href=\"https://en.wikipedia.org/wiki/Shneur_Zalman_of_Liadi\">Baal Hatanya</a></em>'s <em>alos</em> (dawn)\r\n     * calculated as the time when the sun is 16.9&deg; below the eastern\r\n     * {@link #GEOMETRIC_ZENITH geometric horizon} before {@link #getSunrise sunrise}. For more information the source\r\n     * of 16.9&deg; see {@link #ZENITH_16_POINT_9}.\r\n     *\r\n     * @see #ZENITH_16_POINT_9\r\n     * @return The <code>Date</code> of dawn. If the calculation can't be computed such as northern and southern\r\n     *         locations even south of the Arctic Circle and north of the Antarctic Circle where the sun may not reach\r\n     *         low enough below the horizon for this calculation, a null will be returned. See detailed explanation on\r\n     *         top of the {@link AstronomicalCalendar} documentation.\r\n     */\r\n    getAlosBaalHatanya() {\r\n        return this.getSunriseOffsetByDegrees(ComplexZmanimCalendar.ZENITH_16_POINT_9);\r\n    }\r\n    /**\r\n     * This method returns the latest <em>zman krias shema</em> (time to recite Shema in the morning). This time is 3\r\n     * <em>{@link #getShaahZmanisBaalHatanya() shaos zmaniyos}</em> (solar hours) after {@link #getSunriseBaalHatanya()\r\n   * <em>netz amiti</em> (sunrise)} based on the opinion of the <em>Baal Hatanya</em> that the day is calculated from\r\n     * sunrise to sunset. This returns the time 3 * {@link #getShaahZmanisBaalHatanya()} after {@link #getSunriseBaalHatanya()\r\n   * <em>netz amiti</em> (sunrise)}.\r\n     *\r\n     * @see ZmanimCalendar#getSofZmanShma(Date, Date)\r\n     * @see #getShaahZmanisBaalHatanya()\r\n     * @return the <code>Date</code> of the latest zman shema according to the Baal Hatanya. If the calculation\r\n     *         can't be computed such as in the Arctic Circle where there is at least one day a year where the sun does\r\n     *         not rise, and one where it does not set, a null will be returned. See detailed explanation on top of the\r\n     *         {@link AstronomicalCalendar} documentation.\r\n     */\r\n    getSofZmanShmaBaalHatanya() {\r\n        return this.getSofZmanShma(this.getSunriseBaalHatanya(), this.getSunsetBaalHatanya());\r\n    }\r\n    /**\r\n     * This method returns the latest <em>zman tefilah</em> (time to recite the morning prayers). This time is 4\r\n     * hours into the day based on the opinion of the <em>Baal Hatanya</em> that the day is\r\n     * calculated from sunrise to sunset. This returns the time 4 * {@link #getShaahZmanisBaalHatanya()} after\r\n     * {@link #getSunriseBaalHatanya() <em>netz amiti</em> (sunrise)}.\r\n     *\r\n     * @see ZmanimCalendar#getSofZmanTfila(Date, Date)\r\n     * @see #getShaahZmanisBaalHatanya()\r\n     * @return the <code>Date</code> of the latest zman tefilah. If the calculation can't be computed such as in the\r\n     *         Arctic Circle where there is at least one day a year where the sun does not rise, and one where it does\r\n     *         not set, a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n     *         documentation.\r\n     */\r\n    getSofZmanTfilaBaalHatanya() {\r\n        return this.getSofZmanTfila(this.getSunriseBaalHatanya(), this.getSunsetBaalHatanya());\r\n    }\r\n    /**\r\n     * This method returns the latest time one is allowed eating chametz on Erev Pesach according to the opinion of the\r\n     * <em>Baal Hatanya</em>. This time is identical to the {@link #getSofZmanTfilaBaalHatanya() Sof zman\r\n       * tefilah Baal Hatanya}. This time is 4 hours into the day based on the opinion of the <em>Baal\r\n     * Hatanya</em> that the day is calculated from sunrise to sunset. This returns the time 4 *\r\n     * {@link #getShaahZmanisBaalHatanya()} after {@link #getSunriseBaalHatanya() <em>netz amiti</em> (sunrise)}.\r\n     *\r\n     * @see #getShaahZmanisBaalHatanya()\r\n     * @see #getSofZmanTfilaBaalHatanya()\r\n     * @return the <code>Date</code> one is allowed eating chametz on Erev Pesach. If the calculation can't be computed\r\n     *         such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\r\n     *         where it does not set, a null will be returned. See detailed explanation on top of the\r\n     *         {@link AstronomicalCalendar} documentation.\r\n     */\r\n    getSofZmanAchilasChametzBaalHatanya() {\r\n        return this.getSofZmanTfilaBaalHatanya();\r\n    }\r\n    /**\r\n     * This method returns the latest time for burning chametz on Erev Pesach according to the opinion of the\r\n     * <em>Baal Hatanya</em>. This time is 5 hours into the day based on the opinion of the\r\n     * <em>Baal Hatanya</em> that the day is calculated from sunrise to sunset. This returns the\r\n     * time 5 * {@link #getShaahZmanisBaalHatanya()} after {@link #getSunriseBaalHatanya() <em>netz amiti</em> (sunrise)}.\r\n     *\r\n     * @see #getShaahZmanisBaalHatanya()\r\n     * @return the <code>Date</code> of the latest time for burning chametz on Erev Pesach. If the calculation can't be\r\n     *         computed such as in the Arctic Circle where there is at least one day a year where the sun does not rise,\r\n     *         and one where it does not set, a null will be returned. See detailed explanation on top of the\r\n     *         {@link AstronomicalCalendar} documentation.\r\n     */\r\n    getSofZmanBiurChametzBaalHatanya() {\r\n        return ComplexZmanimCalendar.getTimeOffset(this.getSunriseBaalHatanya(), this.getShaahZmanisBaalHatanya() * 5);\r\n    }\r\n    /**\r\n     * This method returns the time of <em>mincha gedola</em>. <em>Mincha gedola</em> is the earliest time one can pray\r\n     * mincha. The <em><a href=\"https://en.wikipedia.org/wiki/Maimonides\">Rambam</a></em> is of the opinion that it is\r\n     * better to delay <em>mincha</em> until <em>{@link #getMinchaKetanaBaalHatanya() mincha ketana}</em> while the\r\n     * <em><a href=\"https://en.wikipedia.org/wiki/Asher_ben_Jehiel\">Ra\"sh</a></em>,\r\n     * <em><a href=\"https://en.wikipedia.org/wiki/Jacob_ben_Asher\">Tur</a></em>, <em><a href=\r\n     * \"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a></em> and others are of the opinion that <em>mincha</em> can be prayed\r\n     * <em>lechatchila</em> starting at <em>mincha gedola</em>. This is calculated as 6.5 {@link #getShaahZmanisBaalHatanya()\r\n       * sea level solar hours} after {@link #getSunriseBaalHatanya() <em>netz amiti</em> (sunrise)}. This calculation is based\r\n     * on the opinion of the <em>Baal Hatanya</em> that the day is calculated from sunrise to sunset. This returns the time 6.5 *\r\n     * {@link #getShaahZmanisBaalHatanya()} after {@link #getSunriseBaalHatanya() <em>netz amiti</em> (\"real\" sunrise)}.\r\n     *\r\n     * @see #getMinchaGedola(Date, Date)\r\n     * @see #getShaahZmanisBaalHatanya()\r\n     * @see #getMinchaKetanaBaalHatanya()\r\n     * @return the <code>Date</code> of the time of mincha gedola. If the calculation can't be computed such as in the\r\n     *         Arctic Circle where there is at least one day a year where the sun does not rise, and one where it does\r\n     *         not set, a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n     *         documentation.\r\n     */\r\n    getMinchaGedolaBaalHatanya() {\r\n        return this.getMinchaGedola(this.getSunriseBaalHatanya(), this.getSunsetBaalHatanya());\r\n    }\r\n    /**\r\n     * This is a conveniance method that returns the later of {@link #getMinchaGedolaBaalHatanya()} and\r\n     * {@link #getMinchaGedola30Minutes()}. In the winter when 1/2 of a <em>{@link #getShaahZmanisBaalHatanya() shaah zmanis}</em> is\r\n     * less than 30 minutes {@link #getMinchaGedola30Minutes()} will be returned, otherwise {@link #getMinchaGedolaBaalHatanya()}\r\n     * will be returned.\r\n     *\r\n     * @return the <code>Date</code> of the later of {@link #getMinchaGedolaBaalHatanya()} and {@link #getMinchaGedola30Minutes()}.\r\n     *         If the calculation can't be computed such as in the Arctic Circle where there is at least one day a year\r\n     *         where the sun does not rise, and one where it does not set, a null will be returned. See detailed\r\n     *         explanation on top of the {@link AstronomicalCalendar} documentation.\r\n     */\r\n    getMinchaGedolaBaalHatanyaGreaterThan30() {\r\n        if (this.getMinchaGedola30Minutes() === null || this.getMinchaGedolaBaalHatanya() === null) {\r\n            return null;\r\n        }\r\n        return DateTime.max(this.getMinchaGedola30Minutes(), this.getMinchaGedolaBaalHatanya());\r\n    }\r\n    /**\r\n     * This method returns the time of <em>mincha ketana</em>. This is the preferred earliest time to pray\r\n     * <em>mincha</em> in the opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Maimonides\">Rambam</a></em> and others.\r\n     * For more information on this see the documentation on <em>{@link #getMinchaGedolaBaalHatanya() mincha gedola}</em>.\r\n     * This is calculated as 9.5 {@link #getShaahZmanisBaalHatanya()  sea level solar hours} after {@link #getSunriseBaalHatanya()\r\n       * <em>netz amiti</em> (sunrise)}. This calculation is calculated based on the opinion of the <em>Baal Hatanya</em> that the\r\n     * day is calculated from sunrise to sunset. This returns the time 9.5 * {@link #getShaahZmanisBaalHatanya()} after {@link\r\n      * #getSunriseBaalHatanya() <em>netz amiti</em> (sunrise)}.\r\n     *\r\n     * @see #getMinchaKetana(Date, Date)\r\n     * @see #getShaahZmanisBaalHatanya()\r\n     * @see #getMinchaGedolaBaalHatanya()\r\n     * @return the <code>Date</code> of the time of mincha ketana. If the calculation can't be computed such as in the\r\n     *         Arctic Circle where there is at least one day a year where the sun does not rise, and one where it does\r\n     *         not set, a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n     *         documentation.\r\n     */\r\n    getMinchaKetanaBaalHatanya() {\r\n        return this.getMinchaKetana(this.getSunriseBaalHatanya(), this.getSunsetBaalHatanya());\r\n    }\r\n    /**\r\n     * This method returns the time of <em>plag hamincha</em>. This is calculated as 10.75 hours after sunrise. This\r\n     * calculation is based on the opinion of the <em>Baal Hatanya</em> that the day is calculated\r\n     * from sunrise to sunset. This returns the time 10.75 * {@link #getShaahZmanisBaalHatanya()} after\r\n     * {@link #getSunriseBaalHatanya() <em>netz amiti</em> (sunrise)}.\r\n     *\r\n     * @see #getPlagHamincha(Date, Date)\r\n     * @return the <code>Date</code> of the time of <em>plag hamincha</em>. If the calculation can't be computed such as\r\n     *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n     *         does not set, a null will be returned. See detailed explanation on top of the\r\n     *         {@link AstronomicalCalendar} documentation.\r\n     */\r\n    getPlagHaminchaBaalHatanya() {\r\n        return this.getPlagHamincha(this.getSunriseBaalHatanya(), this.getSunsetBaalHatanya());\r\n    }\r\n    /**\r\n     * A method that returns <em>tzais</em> (nightfall) when the sun is 6&deg; below the western geometric horizon\r\n     * (90&deg;) after {@link #getSunset sunset}. For information on the source of this calculation see\r\n     * {@link #ZENITH_6_DEGREES}.\r\n     *\r\n     * @return The <code>Date</code> of nightfall. If the calculation can't be computed such as northern and southern\r\n     *         locations even south of the Arctic Circle and north of the Antarctic Circle where the sun may not reach\r\n     *         low enough below the horizon for this calculation, a null will be returned. See detailed explanation on\r\n     *         top of the {@link AstronomicalCalendar} documentation.\r\n     * @see #ZENITH_6_DEGREES\r\n     */\r\n    getTzaisBaalHatanya() {\r\n        return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_6_DEGREES);\r\n    }\r\n    // eslint-disable-next-line class-methods-use-this\r\n    getClassName() {\r\n        return 'net.sourceforge.zmanim.ComplexZmanimCalendar';\r\n    }\r\n}\r\n/**\r\n * The zenith of 3.7&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\r\n * calculating <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> that <em>tzais</em> is the\r\n * time it takes to walk 3/4 of a <em>Mil</em> at 18 minutes a <em>Mil</em>, or 13.5 minutes after sunset. The sun\r\n * is 3.7&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} at this time in Jerusalem on March 16, about 4 days\r\n * before the equinox, the day that a solar hour is 60 minutes.\r\n *\r\n * @see #getTzaisGeonim3Point7Degrees()\r\n */\r\nComplexZmanimCalendar.ZENITH_3_POINT_7 = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 3.7;\r\n/**\r\n * The zenith of 3.8&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\r\n * calculating <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> that <em>tzais</em> is the\r\n * time it takes to walk 3/4 of a <em>Mil</em> at 18 minutes a <em>Mil</em>, or 13.5 minutes after sunset. The sun\r\n * is 3.8&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} at this time in Jerusalem on March 16, about 4 days\r\n * before the equinox, the day that a solar hour is 60 minutes.\r\n *\r\n * @see #getTzaisGeonim3Point8Degrees()\r\n */\r\nComplexZmanimCalendar.ZENITH_3_POINT_8 = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 3.8;\r\n/**\r\n * The zenith of 5.95&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\r\n * calculating <em>tzais</em> (nightfall) according to some opinions. This calculation is based on the position of\r\n * the sun 24 minutes after sunset in Jerusalem on March 16, about 4 days before the equinox, the day that a solar\r\n * hour is 60 minutes, which calculates to 5.95&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}.\r\n *\r\n * @see #getTzaisGeonim5Point95Degrees()\r\n */\r\nComplexZmanimCalendar.ZENITH_5_POINT_95 = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 5.95;\r\n/**\r\n * The zenith of 7.083&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This is often referred to as\r\n * 7&deg;5' or 7&deg; and 5 minutes. This calculation is used for calculating <em>alos</em> (dawn) and\r\n * <em>tzais</em> (nightfall) according to some opinions. This calculation is based on the position of the sun 30\r\n * minutes after sunset in Jerusalem on March 16, about 4 days before the equinox, the day that a solar hour is 60\r\n * minutes, which calculates to 7.0833333&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}. This is time some\r\n * opinions consider dark enough for 3 stars to be visible. This is the opinion of the\r\n * <em><a href=\"http://www.hebrewbooks.org/1053\">Sh\"Ut Melamed Leho'il</a></em>, <em>Sh\"Ut Bnei Tziyon</em>, <em>Tenuvas\r\n * Sadeh</em> and very close to the time of the <em><a href=\"http://www.hebrewbooks.org/22044\">Mekor Chesed</a></em> of\r\n * the <em>Sefer chasidim</em>. TODO Confirm the proper source.\r\n *\r\n * @see #getTzaisGeonim7Point083Degrees()\r\n * @see #getBainHasmashosRT13Point5MinutesBefore7Point083Degrees()\r\n */\r\nComplexZmanimCalendar.ZENITH_7_POINT_083 = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 7 + (5 / 60);\r\n/**\r\n * The zenith of 10.2&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\r\n * calculating <em>misheyakir</em> according to some opinions. This calculation is based on the position of the sun\r\n * 45 minutes before {@link #getSunrise sunrise} in Jerusalem on March 16, about 4 days before the equinox, the day\r\n * that a solar hour is 60 minutes which calculates to 10.2&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}.\r\n *\r\n * @see #getMisheyakir10Point2Degrees()\r\n */\r\nComplexZmanimCalendar.ZENITH_10_POINT_2 = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 10.2;\r\n/**\r\n * The zenith of 11&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\r\n * calculating <em>misheyakir</em> according to some opinions. This calculation is based on the position of the sun\r\n * 48 minutes before {@link #getSunrise sunrise} in Jerusalem on March 16, about 4 days before the equinox, the day\r\n * that a solar hour is 60 minutes which calculates to 11&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}\r\n *\r\n * @see #getMisheyakir11Degrees()\r\n */\r\nComplexZmanimCalendar.ZENITH_11_DEGREES = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 11;\r\n/**\r\n * The zenith of 11.5&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\r\n * calculating <em>misheyakir</em> according to some opinions. This calculation is based on the position of the sun\r\n * 52 minutes before {@link #getSunrise sunrise} in Jerusalem on March 16, about 4 days before the equinox, the day\r\n * that a solar hour is 60 minutes which calculates to 11.5&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}\r\n *\r\n * @see #getMisheyakir11Point5Degrees()\r\n */\r\nComplexZmanimCalendar.ZENITH_11_POINT_5 = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 11.5;\r\n/**\r\n * The zenith of 13.24&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\r\n * calculating <em>Rabbeinu Tam's bain hashmashos</em> according to some opinions.\r\n * NOTE: See comments on {@link #getBainHasmashosRT13Point24Degrees} for additional details about the degrees.\r\n *\r\n * @see #getBainHasmashosRT13Point24Degrees\r\n *\r\n */\r\nComplexZmanimCalendar.ZENITH_13_POINT_24 = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 13.24;\r\n/**\r\n * The zenith of 19&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\r\n * calculating <em>alos</em> according to some opinions.\r\n *\r\n * @see #getAlos19Degrees()\r\n * @see #getAlos18Degrees()\r\n */\r\nComplexZmanimCalendar.ZENITH_19_DEGREES = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 19;\r\n/**\r\n * The zenith of 19.8&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\r\n * calculating <em>alos</em> (dawn) and <em>tzais</em> (nightfall) according to some opinions. This calculation is\r\n * based on the position of the sun 90 minutes after sunset in Jerusalem on March 16, about 4 days before the\r\n * equinox, the day that a solar hour is 60 minutes which calculates to 19.8&deg; below {@link #GEOMETRIC_ZENITH\r\n   * geometric zenith}\r\n *\r\n * @see #getTzais19Point8Degrees()\r\n * @see #getAlos19Point8Degrees()\r\n * @see #getAlos90()\r\n * @see #getTzais90()\r\n */\r\nComplexZmanimCalendar.ZENITH_19_POINT_8 = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 19.8;\r\n/**\r\n * The zenith of 26&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\r\n * calculating <em>alos</em> (dawn) and <em>tzais</em> (nightfall) according to some opinions. This calculation is\r\n * based on the position of the sun {@link #getAlos120() 120 minutes} after sunset in Jerusalem on March 16, about 4\r\n * days before the equinox, the day that a solar hour is 60 minutes which calculates to 26&deg; below\r\n * {@link #GEOMETRIC_ZENITH geometric zenith}\r\n *\r\n * @see #getAlos26Degrees()\r\n * @see #getTzais26Degrees()\r\n * @see #getAlos120()\r\n * @see #getTzais120()\r\n */\r\nComplexZmanimCalendar.ZENITH_26_DEGREES = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 26;\r\n/**\r\n * The zenith of 4.37&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\r\n * calculating <em>tzais</em> (nightfall) according to some opinions. This calculation is based on the position of\r\n * the sun {@link #getTzaisGeonim4Point37Degrees() 16 7/8 minutes} after sunset (3/4 of a 22.5 minute Mil) in\r\n * Jerusalem on March 16, about 4 days before the equinox, the day that a solar hour is 60 minutes which calculates\r\n * to 4.37&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}\r\n *\r\n * @see #getTzaisGeonim4Point37Degrees()\r\n */\r\nComplexZmanimCalendar.ZENITH_4_POINT_37 = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 4.37;\r\n/**\r\n * The zenith of 4.61&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\r\n * calculating <em>tzais</em> (nightfall) according to some opinions. This calculation is based on the position of\r\n * the sun {@link #getTzaisGeonim4Point37Degrees() 18 minutes} after sunset (3/4 of a 24 minute Mil) in Jerusalem on\r\n * March 16, about 4 days before the equinox, the day that a solar hour is 60 minutes which calculates to 4.61&deg;\r\n * below {@link #GEOMETRIC_ZENITH geometric zenith}\r\n *\r\n * @see #getTzaisGeonim4Point61Degrees()\r\n */\r\nComplexZmanimCalendar.ZENITH_4_POINT_61 = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 4.61;\r\n/**\r\n * The zenith of 5.88&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). TODO add more documentation\r\n * @see #getTzaisGeonim4Point8Degrees()\r\n */\r\nComplexZmanimCalendar.ZENITH_4_POINT_8 = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 4.8;\r\n/**\r\n * The zenith of 3.65&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\r\n * calculating <em>tzais</em> (nightfall) according to some opinions. This calculation is based on the position of\r\n * the sun {@link #getTzaisGeonim3Point65Degrees() 13.5 minutes} after sunset (3/4 of an 18 minute Mil) in Jerusalem\r\n * on March 16, about 4 days before the equinox, the day that a solar hour is 60 minutes which calculates to\r\n * 3.65&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}\r\n *\r\n * @see #getTzaisGeonim3Point65Degrees()\r\n */\r\nComplexZmanimCalendar.ZENITH_3_POINT_65 = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 3.65;\r\n/**\r\n * The zenith of 3.676&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). TODO add more documentation\r\n */\r\nComplexZmanimCalendar.ZENITH_3_POINT_676 = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 3.676;\r\n/**\r\n * The zenith of 5.88&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). TODO add more documentation\r\n */\r\nComplexZmanimCalendar.ZENITH_5_POINT_88 = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 5.88;\r\n/**\r\n * The zenith of 1.583&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\r\n * calculating <em>netz amiti</em> (sunrise) and <em>shkiah amiti</em> (sunset) based on the opinion of the\r\n * <em><a href=\"https://en.wikipedia.org/wiki/Shneur_Zalman_of_Liadi\">Baal Hatanya</a></em>.\r\n *\r\n * @see #getSunriseBaalHatanya()\r\n * @see #getSunsetBaalHatanya()\r\n */\r\nComplexZmanimCalendar.ZENITH_1_POINT_583 = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 1.583;\r\n/**\r\n * The zenith of 16.9&deg; below geometric zenith (90&deg;). This calculation is used for determining <em>alos</em>\r\n * (dawn) based on the opinion of the <em>Baal Hatanya</em>. It is based on the calculation that the time between dawn\r\n * and <em>netz amiti</em> (sunrise) is 72 minutes, the time that is takes to walk 4 <em>mil</em> at 18 minutes\r\n * a mil (<em><a href=\"https://en.wikipedia.org/wiki/Maimonides\">Rambam</a></em> and others). The sun's position at 72\r\n * minutes before {@link #getSunriseBaalHatanya <em>netz amiti</em> (sunrise)} in Jerusalem on the equinox (on March 16,\r\n * about 4 days before the astronomical equinox, the day that a solar hour is 60 minutes) is 16.9&deg; below\r\n * {@link #GEOMETRIC_ZENITH geometric zenith}.\r\n *\r\n * @see #getAlosBaalHatanya()\r\n */\r\nComplexZmanimCalendar.ZENITH_16_POINT_9 = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 16.9;\r\n/**\r\n * The zenith of 6&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for calculating\r\n * <em>tzais</em> (nightfall) based on the opinion of the <em>Baal Hatanya</em>. This calculation is based on the position\r\n * of the sun 24 minutes after {@link #getSunset sunset} in Jerusalem on March 16, about 4 days before the equinox, the day\r\n * that a solar hour is 60 minutes, which is 6&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}.\r\n *\r\n * @see #getTzaisBaalHatanya()\r\n */\r\nComplexZmanimCalendar.ZENITH_6_DEGREES = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 6;\r\n/**\r\n * calculating <em>tzais</em> (nightfall) according to some opinions. This is based on the calculations of <a href=\r\n * \"https://en.wikipedia.org/wiki/Yechiel_Michel_Tucazinsky\">Rabbi Yechiel Michel Tucazinsky</a> of the position of\r\n * the sun no later than {@link #getTzaisGeonim6Point45Degrees() 31 minutes} after sunset in Jerusalem, and at the\r\n * height of the summer solstice, this zman is 28 minutes after<em>shkiah</em>. This computes to 6.45&deg; below\r\n * {@link #GEOMETRIC_ZENITH geometric zenith}.\r\n *\r\n * @see #getTzaisGeonim6Point45Degrees()\r\n */\r\nComplexZmanimCalendar.ZENITH_6_POINT_45 = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 6.45;\r\n/**\r\n * The zenith of 7.65&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\r\n * calculating <em>misheyakir</em> according to some opinions.\r\n *\r\n * @see #getMisheyakir7Point65Degrees()\r\n */\r\nComplexZmanimCalendar.ZENITH_7_POINT_65 = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 7.65;\r\n/**\r\n * The zenith of 7.67&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\r\n * calculating <em>tzais</em> according to some opinions.\r\n *\r\n * @see #getMisheyakir7Point65Degrees()\r\n */\r\nComplexZmanimCalendar.ZENITH_7_POINT_67 = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 7.67;\r\n/**\r\n * The zenith of 9.3&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\r\n * calculating <em>tzais</em> (nightfall) according to some opinions.\r\n *\r\n * @see #getTzaisGeonim9Point3Degrees()\r\n */\r\nComplexZmanimCalendar.ZENITH_9_POINT_3 = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 9.3;\r\n/**\r\n * The zenith of 9.5&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\r\n * calculating <em>misheyakir</em> according to some opinions.\r\n *\r\n * @see #getMisheyakir9Point5Degrees()\r\n */\r\nComplexZmanimCalendar.ZENITH_9_POINT_5 = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 9.5;\r\n/**\r\n * The zenith of 9.75&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\r\n * calculating <em>alos</em> (dawn) and <em>tzais</em> (nightfall) according to some opinions.\r\n *\r\n * @see #getTzaisGeonim9Point75Degrees()\r\n */\r\nComplexZmanimCalendar.ZENITH_9_POINT_75 = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 9.75;\r\n//# sourceMappingURL=ComplexZmanimCalendar.js.map"]},"metadata":{},"sourceType":"module"}