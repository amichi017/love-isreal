{"ast":null,"code":"import _classCallCheck from \"C:\\\\react\\\\my-app\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\react\\\\my-app\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport { MathUtils } from '../polyfills/Utils';\nimport { UnsupportedError } from '../polyfills/errors';\n/**\r\n * An abstract class that all sun time calculating classes extend. This allows the algorithm used to be changed at\r\n * runtime, easily allowing comparison the results of using different algorithms.\r\n * TODO: Consider methods that would allow atmospheric modeling. This can currently be adjusted by {@link\r\n  * #setRefraction(double) setting the refraction}.\r\n *\r\n * @author &copy; Eliyahu Hershfeld 2004 - 2019\r\n */\n\nexport var AstronomicalCalculator = /*#__PURE__*/function () {\n  function AstronomicalCalculator() {\n    _classCallCheck(this, AstronomicalCalculator);\n\n    /**\r\n     * The commonly used average solar refraction. Calendrical Calculations lists a more accurate global average of\r\n     * 34.478885263888294\r\n     *\r\n     * @see #getRefraction()\r\n     */\n    this.refraction = 34 / 60; // private double refraction = 34.478885263888294 / 60d;\n\n    /**\r\n     * The commonly used average solar radius in minutes of a degree.\r\n     *\r\n     * @see #getSolarRadius()\r\n     */\n\n    this.solarRadius = 16 / 60;\n    /**\r\n     * The commonly used average earth radius in KM. At this time, this only affects elevation adjustment and not the\r\n     * sunrise and sunset calculations. The value currently defaults to 6356.9 KM.\r\n     *\r\n     * @see #getEarthRadius()\r\n     * @see #setEarthRadius(double)\r\n     */\n\n    this.earthRadius = 6356.9; // in KM\n  }\n  /**\r\n   * A method that returns the earth radius in KM. The value currently defaults to 6356.9 KM if not set.\r\n   *\r\n   * @return the earthRadius the earth radius in KM.\r\n   */\n\n\n  _createClass(AstronomicalCalculator, [{\n    key: \"getEarthRadius\",\n    value: function getEarthRadius() {\n      return this.earthRadius;\n    }\n    /**\r\n     * A method that allows setting the earth's radius.\r\n     *\r\n     * @param earthRadius\r\n     *            the earthRadius to set in KM\r\n     */\n\n  }, {\n    key: \"setEarthRadius\",\n    value: function setEarthRadius(earthRadius) {\n      this.earthRadius = earthRadius;\n    }\n    /**\r\n     * Returns the default class for calculating sunrise and sunset. This is currently the {@link NOAACalculator},\r\n     * but this may change.\r\n     *\r\n     * @return AstronomicalCalculator the default class for calculating sunrise and sunset. In the current\r\n     *         implementation the default calculator returned is the {@link NOAACalculator}.\r\n     * @deprecated This depends on a circular dependency. Use <pre>new NOAACalculator()</pre> instead\r\n     */\n\n  }, {\n    key: \"getElevationAdjustment\",\n\n    /**\r\n     * Method to return the adjustment to the zenith required to account for the elevation. Since a person at a higher\r\n     * elevation can see farther below the horizon, the calculation for sunrise / sunset is calculated below the horizon\r\n     * used at sea level. This is only used for sunrise and sunset and not times before or after it such as\r\n     * {@link net.sourceforge.zmanim.AstronomicalCalendar#getBeginNauticalTwilight() nautical twilight} since those\r\n     * calculations are based on the level of available light at the given dip below the horizon, something that is not\r\n     * affected by elevation, the adjustment should only made if the zenith == 90&deg; {@link #adjustZenith adjusted}\r\n     * for refraction and solar radius. The algorithm used is\r\n     *\r\n     * <pre>\r\n     * elevationAdjustment = Math.toDegrees(Math.acos(earthRadiusInMeters / (earthRadiusInMeters + elevationMeters)));\r\n     * </pre>\r\n     *\r\n     * The source of this algorithm is <a href=\"http://www.calendarists.com\">Calendrical Calculations</a> by Edward M.\r\n     * Reingold and Nachum Dershowitz. An alternate algorithm that produces an almost identical (but not accurate)\r\n     * result found in Ma'aglay Tzedek by Moishe Kosower and other sources is:\r\n     *\r\n     * <pre>\r\n     * elevationAdjustment = 0.0347 * Math.sqrt(elevationMeters);\r\n     * </pre>\r\n     *\r\n     * @param elevation\r\n     *            elevation in Meters.\r\n     * @return the adjusted zenith\r\n     */\n    value: function getElevationAdjustment(elevation) {\n      // double elevationAdjustment = 0.0347 * Math.sqrt(elevation);\n      var elevationAdjustment = MathUtils.radiansToDegrees(Math.acos(this.earthRadius / (this.earthRadius + elevation / 1000)));\n      return elevationAdjustment;\n    }\n    /**\r\n     * Adjusts the zenith of astronomical sunrise and sunset to account for solar refraction, solar radius and\r\n     * elevation. The value for Sun's zenith and true rise/set Zenith (used in this class and subclasses) is the angle\r\n     * that the center of the Sun makes to a line perpendicular to the Earth's surface. If the Sun were a point and the\r\n     * Earth were without an atmosphere, true sunset and sunrise would correspond to a 90&deg; zenith. Because the Sun\r\n     * is not a point, and because the atmosphere refracts light, this 90&deg; zenith does not, in fact, correspond to\r\n     * true sunset or sunrise, instead the centre of the Sun's disk must lie just below the horizon for the upper edge\r\n     * to be obscured. This means that a zenith of just above 90&deg; must be used. The Sun subtends an angle of 16\r\n     * minutes of arc (this can be changed via the {@link #setSolarRadius(double)} method , and atmospheric refraction\r\n     * accounts for 34 minutes or so (this can be changed via the {@link #setRefraction(double)} method), giving a total\r\n     * of 50 arcminutes. The total value for ZENITH is 90+(5/6) or 90.8333333&deg; for true sunrise/sunset. Since a\r\n     * person at an elevation can see blow the horizon of a person at sea level, this will also adjust the zenith to\r\n     * account for elevation if available.\r\n     *\r\n     * @param zenith\r\n     *            the azimuth below the vertical zenith of 90&deg;. For sunset typically the {@link #adjustZenith\r\n       *            zenith} used for the calculation uses geometric zenith of 90&deg; and {@link #adjustZenith adjusts}\r\n     *            this slightly to account for solar refraction and the sun's radius. Another example would be\r\n     *            {@link net.sourceforge.zmanim.AstronomicalCalendar#getEndNauticalTwilight()} that passes\r\n     *            {@link net.sourceforge.zmanim.AstronomicalCalendar#NAUTICAL_ZENITH} to this method.\r\n     * @param elevation\r\n     *            elevation in Meters.\r\n     * @return The zenith adjusted to include the {@link #getSolarRadius sun's radius}, {@link #getRefraction\r\n       *         refraction} and {@link #getElevationAdjustment elevation} adjustment. This will only be adjusted for\r\n     *         sunrise and sunset (if the zenith == 90&deg;)\r\n     * @see #getElevationAdjustment(double)\r\n     */\n\n  }, {\n    key: \"adjustZenith\",\n    value: function adjustZenith(zenith, elevation) {\n      var adjustedZenith = zenith;\n\n      if (zenith === AstronomicalCalculator.GEOMETRIC_ZENITH) {\n        // only adjust if it is exactly sunrise or sunset\n        adjustedZenith = zenith + (this.getSolarRadius() + this.getRefraction() + this.getElevationAdjustment(elevation));\n      }\n\n      return adjustedZenith;\n    }\n    /**\r\n     * Method to get the refraction value to be used when calculating sunrise and sunset. The default value is 34 arc\r\n     * minutes. The <a href=\"http://emr.cs.iit.edu/home/reingold/calendar-book/second-edition/errata.pdf\">Errata and\r\n     * Notes for Calendrical Calculations: The Millennium Edition</a> by Edward M. Reingold and Nachum Dershowitz lists\r\n     * the actual average refraction value as 34.478885263888294 or approximately 34' 29\". The refraction value as well\r\n     * as the solarRadius and elevation adjustment are added to the zenith used to calculate sunrise and sunset.\r\n     *\r\n     * @return The refraction in arc minutes.\r\n     */\n\n  }, {\n    key: \"getRefraction\",\n    value: function getRefraction() {\n      return this.refraction;\n    }\n    /**\r\n     * A method to allow overriding the default refraction of the calculator.\r\n     * @todo At some point in the future, an AtmosphericModel or Refraction object that models the atmosphere of different\r\n     * locations might be used for increased accuracy.\r\n     *\r\n     * @param refraction\r\n     *            The refraction in arc minutes.\r\n     * @see #getRefraction()\r\n     */\n\n  }, {\n    key: \"setRefraction\",\n    value: function setRefraction(refraction) {\n      this.refraction = refraction;\n    }\n    /**\r\n     * Method to get the sun's radius. The default value is 16 arc minutes. The sun's radius as it appears from earth is\r\n     * almost universally given as 16 arc minutes but in fact it differs by the time of the year. At the <a\r\n     * href=\"http://en.wikipedia.org/wiki/Perihelion\">perihelion</a> it has an apparent radius of 16.293, while at the\r\n     * <a href=\"http://en.wikipedia.org/wiki/Aphelion\">aphelion</a> it has an apparent radius of 15.755. There is little\r\n     * affect for most location, but at high and low latitudes the difference becomes more apparent. My Calculations for\r\n     * the difference at the location of the <a href=\"http://www.rog.nmm.ac.uk\">Royal Observatory, Greenwich </a> show\r\n     * only a 4.494 second difference between the perihelion and aphelion radii, but moving into the arctic circle the\r\n     * difference becomes more noticeable. Tests for Tromso, Norway (latitude 69.672312, longitude 19.049787) show that\r\n     * on May 17, the rise of the midnight sun, a 2 minute 23 second difference is observed between the perihelion and\r\n     * aphelion radii using the USNO algorithm, but only 1 minute and 6 seconds difference using the NOAA algorithm.\r\n     * Areas farther north show an even greater difference. Note that these test are not real valid test cases because\r\n     * they show the extreme difference on days that are not the perihelion or aphelion, but are shown for illustrative\r\n     * purposes only.\r\n     *\r\n     * @return The sun's radius in arc minutes.\r\n     */\n\n  }, {\n    key: \"getSolarRadius\",\n    value: function getSolarRadius() {\n      return this.solarRadius;\n    }\n    /**\r\n     * Method to set the sun's radius.\r\n     *\r\n     * @param solarRadius\r\n     *            The sun's radius in arc minutes.\r\n     * @see #getSolarRadius()\r\n     */\n\n  }, {\n    key: \"setSolarRadius\",\n    value: function setSolarRadius(solarRadius) {\n      this.solarRadius = solarRadius;\n    }\n    /**\r\n     * @see java.lang.Object#clone()\r\n     * @since 1.1\r\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return JSON.parse(JSON.stringify(this));\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(object) {\n      return this === object;\n    }\n  }], [{\n    key: \"getDefault\",\n    value: function getDefault() {\n      throw new UnsupportedError('This method is deprecated, due to the fact that it depends on a circular dependency. ' + 'Use `new NOAACalculator()` instead.');\n    }\n  }]);\n\n  return AstronomicalCalculator;\n}();\n/**\r\n * The zenith of astronomical sunrise and sunset. The sun is 90&deg; from the vertical 0&deg;\r\n */\n\nAstronomicalCalculator.GEOMETRIC_ZENITH = 90;","map":{"version":3,"sources":["../../../src/util/AstronomicalCalculator.ts"],"names":[],"mappings":";;AAGA,SAAS,SAAT,QAA0B,oBAA1B;AACA,SAAS,gBAAT,QAAiC,qBAAjC;AAEA;;;;;;;AAOG;;AACH,WAAsB,sBAAtB;AAAA,oCAAA;AAAA;;AACE;;;;;AAKG;AACK,SAAA,UAAA,GAAqB,KAAK,EAA1B,CAPV,CAQE;;AAEA;;;;AAIG;;AACK,SAAA,WAAA,GAAsB,KAAK,EAA3B;AAER;;;;;;AAMG;;AACK,SAAA,WAAA,GAAsB,MAAtB,CAxBV,CAwBwC;AA2OvC;AAzOC;;;;AAIG;;;AA9BL;AAAA;AAAA,qCA+BuB;AACnB,aAAO,KAAK,WAAZ;AACD;AAED;;;;;AAKG;;AAxCL;AAAA;AAAA,mCAyCwB,WAzCxB,EAyC2C;AACvC,WAAK,WAAL,GAAmB,WAAnB;AACD;AAOD;;;;;;;AAOG;;AAzDL;AAAA;;AA4HE;;;;;;;;;;;;;;;;;;;;;;;;AAwBG;AApJL,2CAqJgC,SArJhC,EAqJiD;AAC7C;AACA,UAAM,mBAAmB,GAAW,SAAS,CAAC,gBAAV,CAA2B,IAAI,CAAC,IAAL,CAAU,KAAK,WAAL,IAAoB,KAAK,WAAL,GAAoB,SAAS,GAAG,IAApD,CAAV,CAA3B,CAApC;AACA,aAAO,mBAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BG;;AArLL;AAAA;AAAA,iCAsLsB,MAtLtB,EAsLsC,SAtLtC,EAsLuD;AACnD,UAAI,cAAc,GAAW,MAA7B;;AACA,UAAI,MAAM,KAAK,sBAAsB,CAAC,gBAAtC,EAAwD;AAAE;AACxD,QAAA,cAAc,GAAG,MAAM,IAAI,KAAK,cAAL,KAAwB,KAAK,aAAL,EAAxB,GAA+C,KAAK,sBAAL,CAA4B,SAA5B,CAAnD,CAAvB;AACD;;AACD,aAAO,cAAP;AACD;AAED;;;;;;;;AAQG;;AAtML;AAAA;AAAA,oCAuMsB;AAClB,aAAO,KAAK,UAAZ;AACD;AAED;;;;;;;;AAQG;;AAnNL;AAAA;AAAA,kCAoNuB,UApNvB,EAoNyC;AACrC,WAAK,UAAL,GAAkB,UAAlB;AACD;AAED;;;;;;;;;;;;;;;;AAgBG;;AAxOL;AAAA;AAAA,qCAyOuB;AACnB,aAAO,KAAK,WAAZ;AACD;AAED;;;;;;AAMG;;AAnPL;AAAA;AAAA,mCAoPwB,WApPxB,EAoP2C;AACvC,WAAK,WAAL,GAAmB,WAAnB;AACD;AAED;;;AAGG;;AA3PL;AAAA;AAAA,4BA4Pc;AACV,aAAO,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,SAAL,CAAe,IAAf,CAAX,CAAP;AACD;AA9PH;AAAA;AAAA,2BAgQgB,MAhQhB,EAgQ8B;AAC1B,aAAO,SAAS,MAAhB;AACD;AAlQH;AAAA;AAAA,iCA0D0B;AACtB,YAAM,IAAI,gBAAJ,CAAqB,0FACvB,qCADE,CAAN;AAED;AA7DH;;AAAA;AAAA;AA6CE;;AAEG;;AACqB,sBAAA,CAAA,gBAAA,GAA2B,EAA3B","sourceRoot":"","sourcesContent":["import { MathUtils } from '../polyfills/Utils';\r\nimport { UnsupportedError } from '../polyfills/errors';\r\n/**\r\n * An abstract class that all sun time calculating classes extend. This allows the algorithm used to be changed at\r\n * runtime, easily allowing comparison the results of using different algorithms.\r\n * TODO: Consider methods that would allow atmospheric modeling. This can currently be adjusted by {@link\r\n  * #setRefraction(double) setting the refraction}.\r\n *\r\n * @author &copy; Eliyahu Hershfeld 2004 - 2019\r\n */\r\nexport class AstronomicalCalculator {\r\n    constructor() {\r\n        /**\r\n         * The commonly used average solar refraction. Calendrical Calculations lists a more accurate global average of\r\n         * 34.478885263888294\r\n         *\r\n         * @see #getRefraction()\r\n         */\r\n        this.refraction = 34 / 60;\r\n        // private double refraction = 34.478885263888294 / 60d;\r\n        /**\r\n         * The commonly used average solar radius in minutes of a degree.\r\n         *\r\n         * @see #getSolarRadius()\r\n         */\r\n        this.solarRadius = 16 / 60;\r\n        /**\r\n         * The commonly used average earth radius in KM. At this time, this only affects elevation adjustment and not the\r\n         * sunrise and sunset calculations. The value currently defaults to 6356.9 KM.\r\n         *\r\n         * @see #getEarthRadius()\r\n         * @see #setEarthRadius(double)\r\n         */\r\n        this.earthRadius = 6356.9; // in KM\r\n    }\r\n    /**\r\n     * A method that returns the earth radius in KM. The value currently defaults to 6356.9 KM if not set.\r\n     *\r\n     * @return the earthRadius the earth radius in KM.\r\n     */\r\n    getEarthRadius() {\r\n        return this.earthRadius;\r\n    }\r\n    /**\r\n     * A method that allows setting the earth's radius.\r\n     *\r\n     * @param earthRadius\r\n     *            the earthRadius to set in KM\r\n     */\r\n    setEarthRadius(earthRadius) {\r\n        this.earthRadius = earthRadius;\r\n    }\r\n    /**\r\n     * Returns the default class for calculating sunrise and sunset. This is currently the {@link NOAACalculator},\r\n     * but this may change.\r\n     *\r\n     * @return AstronomicalCalculator the default class for calculating sunrise and sunset. In the current\r\n     *         implementation the default calculator returned is the {@link NOAACalculator}.\r\n     * @deprecated This depends on a circular dependency. Use <pre>new NOAACalculator()</pre> instead\r\n     */\r\n    static getDefault() {\r\n        throw new UnsupportedError('This method is deprecated, due to the fact that it depends on a circular dependency. '\r\n            + 'Use `new NOAACalculator()` instead.');\r\n    }\r\n    /**\r\n     * Method to return the adjustment to the zenith required to account for the elevation. Since a person at a higher\r\n     * elevation can see farther below the horizon, the calculation for sunrise / sunset is calculated below the horizon\r\n     * used at sea level. This is only used for sunrise and sunset and not times before or after it such as\r\n     * {@link net.sourceforge.zmanim.AstronomicalCalendar#getBeginNauticalTwilight() nautical twilight} since those\r\n     * calculations are based on the level of available light at the given dip below the horizon, something that is not\r\n     * affected by elevation, the adjustment should only made if the zenith == 90&deg; {@link #adjustZenith adjusted}\r\n     * for refraction and solar radius. The algorithm used is\r\n     *\r\n     * <pre>\r\n     * elevationAdjustment = Math.toDegrees(Math.acos(earthRadiusInMeters / (earthRadiusInMeters + elevationMeters)));\r\n     * </pre>\r\n     *\r\n     * The source of this algorithm is <a href=\"http://www.calendarists.com\">Calendrical Calculations</a> by Edward M.\r\n     * Reingold and Nachum Dershowitz. An alternate algorithm that produces an almost identical (but not accurate)\r\n     * result found in Ma'aglay Tzedek by Moishe Kosower and other sources is:\r\n     *\r\n     * <pre>\r\n     * elevationAdjustment = 0.0347 * Math.sqrt(elevationMeters);\r\n     * </pre>\r\n     *\r\n     * @param elevation\r\n     *            elevation in Meters.\r\n     * @return the adjusted zenith\r\n     */\r\n    getElevationAdjustment(elevation) {\r\n        // double elevationAdjustment = 0.0347 * Math.sqrt(elevation);\r\n        const elevationAdjustment = MathUtils.radiansToDegrees(Math.acos(this.earthRadius / (this.earthRadius + (elevation / 1000))));\r\n        return elevationAdjustment;\r\n    }\r\n    /**\r\n     * Adjusts the zenith of astronomical sunrise and sunset to account for solar refraction, solar radius and\r\n     * elevation. The value for Sun's zenith and true rise/set Zenith (used in this class and subclasses) is the angle\r\n     * that the center of the Sun makes to a line perpendicular to the Earth's surface. If the Sun were a point and the\r\n     * Earth were without an atmosphere, true sunset and sunrise would correspond to a 90&deg; zenith. Because the Sun\r\n     * is not a point, and because the atmosphere refracts light, this 90&deg; zenith does not, in fact, correspond to\r\n     * true sunset or sunrise, instead the centre of the Sun's disk must lie just below the horizon for the upper edge\r\n     * to be obscured. This means that a zenith of just above 90&deg; must be used. The Sun subtends an angle of 16\r\n     * minutes of arc (this can be changed via the {@link #setSolarRadius(double)} method , and atmospheric refraction\r\n     * accounts for 34 minutes or so (this can be changed via the {@link #setRefraction(double)} method), giving a total\r\n     * of 50 arcminutes. The total value for ZENITH is 90+(5/6) or 90.8333333&deg; for true sunrise/sunset. Since a\r\n     * person at an elevation can see blow the horizon of a person at sea level, this will also adjust the zenith to\r\n     * account for elevation if available.\r\n     *\r\n     * @param zenith\r\n     *            the azimuth below the vertical zenith of 90&deg;. For sunset typically the {@link #adjustZenith\r\n       *            zenith} used for the calculation uses geometric zenith of 90&deg; and {@link #adjustZenith adjusts}\r\n     *            this slightly to account for solar refraction and the sun's radius. Another example would be\r\n     *            {@link net.sourceforge.zmanim.AstronomicalCalendar#getEndNauticalTwilight()} that passes\r\n     *            {@link net.sourceforge.zmanim.AstronomicalCalendar#NAUTICAL_ZENITH} to this method.\r\n     * @param elevation\r\n     *            elevation in Meters.\r\n     * @return The zenith adjusted to include the {@link #getSolarRadius sun's radius}, {@link #getRefraction\r\n       *         refraction} and {@link #getElevationAdjustment elevation} adjustment. This will only be adjusted for\r\n     *         sunrise and sunset (if the zenith == 90&deg;)\r\n     * @see #getElevationAdjustment(double)\r\n     */\r\n    adjustZenith(zenith, elevation) {\r\n        let adjustedZenith = zenith;\r\n        if (zenith === AstronomicalCalculator.GEOMETRIC_ZENITH) { // only adjust if it is exactly sunrise or sunset\r\n            adjustedZenith = zenith + (this.getSolarRadius() + this.getRefraction() + this.getElevationAdjustment(elevation));\r\n        }\r\n        return adjustedZenith;\r\n    }\r\n    /**\r\n     * Method to get the refraction value to be used when calculating sunrise and sunset. The default value is 34 arc\r\n     * minutes. The <a href=\"http://emr.cs.iit.edu/home/reingold/calendar-book/second-edition/errata.pdf\">Errata and\r\n     * Notes for Calendrical Calculations: The Millennium Edition</a> by Edward M. Reingold and Nachum Dershowitz lists\r\n     * the actual average refraction value as 34.478885263888294 or approximately 34' 29\". The refraction value as well\r\n     * as the solarRadius and elevation adjustment are added to the zenith used to calculate sunrise and sunset.\r\n     *\r\n     * @return The refraction in arc minutes.\r\n     */\r\n    getRefraction() {\r\n        return this.refraction;\r\n    }\r\n    /**\r\n     * A method to allow overriding the default refraction of the calculator.\r\n     * @todo At some point in the future, an AtmosphericModel or Refraction object that models the atmosphere of different\r\n     * locations might be used for increased accuracy.\r\n     *\r\n     * @param refraction\r\n     *            The refraction in arc minutes.\r\n     * @see #getRefraction()\r\n     */\r\n    setRefraction(refraction) {\r\n        this.refraction = refraction;\r\n    }\r\n    /**\r\n     * Method to get the sun's radius. The default value is 16 arc minutes. The sun's radius as it appears from earth is\r\n     * almost universally given as 16 arc minutes but in fact it differs by the time of the year. At the <a\r\n     * href=\"http://en.wikipedia.org/wiki/Perihelion\">perihelion</a> it has an apparent radius of 16.293, while at the\r\n     * <a href=\"http://en.wikipedia.org/wiki/Aphelion\">aphelion</a> it has an apparent radius of 15.755. There is little\r\n     * affect for most location, but at high and low latitudes the difference becomes more apparent. My Calculations for\r\n     * the difference at the location of the <a href=\"http://www.rog.nmm.ac.uk\">Royal Observatory, Greenwich </a> show\r\n     * only a 4.494 second difference between the perihelion and aphelion radii, but moving into the arctic circle the\r\n     * difference becomes more noticeable. Tests for Tromso, Norway (latitude 69.672312, longitude 19.049787) show that\r\n     * on May 17, the rise of the midnight sun, a 2 minute 23 second difference is observed between the perihelion and\r\n     * aphelion radii using the USNO algorithm, but only 1 minute and 6 seconds difference using the NOAA algorithm.\r\n     * Areas farther north show an even greater difference. Note that these test are not real valid test cases because\r\n     * they show the extreme difference on days that are not the perihelion or aphelion, but are shown for illustrative\r\n     * purposes only.\r\n     *\r\n     * @return The sun's radius in arc minutes.\r\n     */\r\n    getSolarRadius() {\r\n        return this.solarRadius;\r\n    }\r\n    /**\r\n     * Method to set the sun's radius.\r\n     *\r\n     * @param solarRadius\r\n     *            The sun's radius in arc minutes.\r\n     * @see #getSolarRadius()\r\n     */\r\n    setSolarRadius(solarRadius) {\r\n        this.solarRadius = solarRadius;\r\n    }\r\n    /**\r\n     * @see java.lang.Object#clone()\r\n     * @since 1.1\r\n     */\r\n    clone() {\r\n        return JSON.parse(JSON.stringify(this));\r\n    }\r\n    equals(object) {\r\n        return this === object;\r\n    }\r\n}\r\n/**\r\n * The zenith of astronomical sunrise and sunset. The sun is 90&deg; from the vertical 0&deg;\r\n */\r\nAstronomicalCalculator.GEOMETRIC_ZENITH = 90;\r\n//# sourceMappingURL=AstronomicalCalculator.js.map"]},"metadata":{},"sourceType":"module"}