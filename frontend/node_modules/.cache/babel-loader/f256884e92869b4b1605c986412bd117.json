{"ast":null,"code":"import { DateTime, Interval } from 'luxon';\nimport { Calendar } from '../polyfills/Utils';\nimport { Daf } from './Daf';\nimport { JewishCalendar } from './JewishCalendar';\nimport { IllegalArgumentException } from '../polyfills/errors';\n/**\r\n * This class calculates the <a href=\"https://en.wikipedia.org/wiki/Jerusalem_Talmud\">Yerusalmi</a> <a href=\r\n * \"https://en.wikipedia.org/wiki/Daf_Yomi\">Daf Yomi</a> page ({@link Daf}) for the a given date.\r\n *\r\n * @author &copy; elihaidv\r\n * @author &copy; Eliyahu Hershfeld 2017 - 2019\r\n */\n\nexport class YerushalmiYomiCalculator {\n  /**\r\n   * Returns the <a href=\"https://en.wikipedia.org/wiki/Daf_Yomi\">Daf Yomi</a>\r\n   * <a href=\"https://en.wikipedia.org/wiki/Jerusalem_Talmud\">Yerusalmi</a> page ({@link Daf}) for a given date.\r\n   * The first Daf Yomi cycle started on To Bishvat 5740 (February, 2, 1980) and calculations prior to this\r\n   * date will result in an IllegalArgumentException thrown.\r\n   *\r\n   * @param jewishCalendar\r\n   *            the calendar date for calculation\r\n   * @return the {@link Daf}.\r\n   *\r\n   * @throws IllegalArgumentException\r\n   *             if the date is prior to the September 11, 1923 start date of the first Daf Yomi cycle\r\n   */\n  static getDafYomiYerushalmi(jewishCalendar) {\n    let nextCycle = DateTime.local();\n    let prevCycle = DateTime.local();\n    const requested = jewishCalendar.getDate();\n    let masechta = 0;\n    let dafYomi; // There is no Daf Yomi on Yom Kippur and Tisha B'Av.\n\n    if (jewishCalendar.getYomTovIndex() === JewishCalendar.YOM_KIPPUR || jewishCalendar.getYomTovIndex() === JewishCalendar.TISHA_BEAV) {\n      return new Daf(39, 0);\n    }\n\n    if (requested < YerushalmiYomiCalculator.DAF_YOMI_START_DAY) {\n      // TODO: should we return a null or throw an ?\n      throw new IllegalArgumentException(`${requested} is prior to organized Daf Yomi Yerushlmi cycles that started on ${YerushalmiYomiCalculator.DAF_YOMI_START_DAY}`);\n    } // Start to calculate current cycle. Initialize the start day\n\n\n    nextCycle = YerushalmiYomiCalculator.DAF_YOMI_START_DAY; // Go cycle by cycle, until we get the next cycle\n\n    while (requested > nextCycle) {\n      prevCycle = nextCycle; // Adds the number of whole shas dafs. and the number of days that not have daf.\n\n      nextCycle = nextCycle.plus({\n        days: YerushalmiYomiCalculator.WHOLE_SHAS_DAFS\n      }).plus({\n        days: YerushalmiYomiCalculator.getNumOfSpecialDays(prevCycle, nextCycle)\n      });\n    } // Get the number of days from cycle start until request.\n\n\n    const dafNo = 0 - prevCycle.diff(requested).days; // Get the number of special days to subtract\n\n    const specialDays = YerushalmiYomiCalculator.getNumOfSpecialDays(prevCycle, requested);\n    let total = dafNo - specialDays; // Finally find the daf.\n\n    for (let i = 0; i < YerushalmiYomiCalculator.BLATT_PER_MASECHTA.length; i++) {\n      if (total <= YerushalmiYomiCalculator.BLATT_PER_MASECHTA[i]) {\n        dafYomi = new Daf(masechta, total + 1);\n        break;\n      }\n\n      total -= YerushalmiYomiCalculator.BLATT_PER_MASECHTA[i];\n      masechta++;\n    }\n\n    return dafYomi;\n  }\n  /**\r\n   * Return the number of special days (Yom Kippur and Tisha B'Av) on which there is no daf, between the two given dates\r\n   *\r\n   * @param start - start date to calculate\r\n   * @param end - end date to calculate\r\n   * @return the number of special days\r\n   */\n\n\n  static getNumOfSpecialDays(start, end) {\n    // Find the start and end Jewish years\n    const jewishStartYear = new JewishCalendar(start).getJewishYear();\n    const jewishEndYear = new JewishCalendar(end).getJewishYear(); // Value to return\n\n    let specialDays = 0; // Instant of special dates\n\n    const yomKippur = new JewishCalendar(jewishStartYear, 7, 10);\n    const tishaBeav = new JewishCalendar(jewishStartYear, 5, 9); // Go over the years and find special dates\n\n    for (let i = jewishStartYear; i <= jewishEndYear; i++) {\n      yomKippur.setJewishYear(i);\n      tishaBeav.setJewishYear(i);\n      const interval = Interval.fromDateTimes(start, end);\n      if (interval.contains(yomKippur.getDate())) specialDays++;\n      if (interval.contains(tishaBeav.getDate())) specialDays++;\n    }\n\n    return specialDays;\n  }\n\n}\nYerushalmiYomiCalculator.DAF_YOMI_START_DAY = DateTime.fromObject({\n  year: 1980,\n  month: Calendar.FEBRUARY + 1,\n  day: 2\n});\nYerushalmiYomiCalculator.WHOLE_SHAS_DAFS = 1554;\nYerushalmiYomiCalculator.BLATT_PER_MASECHTA = [68, 37, 34, 44, 31, 59, 26, 33, 28, 20, 13, 92, 65, 71, 22, 22, 42, 26, 26, 33, 34, 22, 19, 85, 72, 47, 40, 47, 54, 48, 44, 37, 34, 44, 9, 57, 37, 19, 13];","map":{"version":3,"sources":["../../../src/hebrewcalendar/YerushalmiYomiCalculator.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { DateTime, Interval } from 'luxon';\r\nimport { Calendar } from '../polyfills/Utils';\r\nimport { Daf } from './Daf';\r\nimport { JewishCalendar } from './JewishCalendar';\r\nimport { IllegalArgumentException } from '../polyfills/errors';\r\n/**\r\n * This class calculates the <a href=\"https://en.wikipedia.org/wiki/Jerusalem_Talmud\">Yerusalmi</a> <a href=\r\n * \"https://en.wikipedia.org/wiki/Daf_Yomi\">Daf Yomi</a> page ({@link Daf}) for the a given date.\r\n *\r\n * @author &copy; elihaidv\r\n * @author &copy; Eliyahu Hershfeld 2017 - 2019\r\n */\r\nexport class YerushalmiYomiCalculator {\r\n    /**\r\n     * Returns the <a href=\"https://en.wikipedia.org/wiki/Daf_Yomi\">Daf Yomi</a>\r\n     * <a href=\"https://en.wikipedia.org/wiki/Jerusalem_Talmud\">Yerusalmi</a> page ({@link Daf}) for a given date.\r\n     * The first Daf Yomi cycle started on To Bishvat 5740 (February, 2, 1980) and calculations prior to this\r\n     * date will result in an IllegalArgumentException thrown.\r\n     *\r\n     * @param jewishCalendar\r\n     *            the calendar date for calculation\r\n     * @return the {@link Daf}.\r\n     *\r\n     * @throws IllegalArgumentException\r\n     *             if the date is prior to the September 11, 1923 start date of the first Daf Yomi cycle\r\n     */\r\n    static getDafYomiYerushalmi(jewishCalendar) {\r\n        let nextCycle = DateTime.local();\r\n        let prevCycle = DateTime.local();\r\n        const requested = jewishCalendar.getDate();\r\n        let masechta = 0;\r\n        let dafYomi;\r\n        // There is no Daf Yomi on Yom Kippur and Tisha B'Av.\r\n        if (jewishCalendar.getYomTovIndex() === JewishCalendar.YOM_KIPPUR || jewishCalendar.getYomTovIndex() === JewishCalendar.TISHA_BEAV) {\r\n            return new Daf(39, 0);\r\n        }\r\n        if (requested < YerushalmiYomiCalculator.DAF_YOMI_START_DAY) {\r\n            // TODO: should we return a null or throw an ?\r\n            throw new IllegalArgumentException(`${requested} is prior to organized Daf Yomi Yerushlmi cycles that started on ${YerushalmiYomiCalculator.DAF_YOMI_START_DAY}`);\r\n        }\r\n        // Start to calculate current cycle. Initialize the start day\r\n        nextCycle = YerushalmiYomiCalculator.DAF_YOMI_START_DAY;\r\n        // Go cycle by cycle, until we get the next cycle\r\n        while (requested > nextCycle) {\r\n            prevCycle = nextCycle;\r\n            // Adds the number of whole shas dafs. and the number of days that not have daf.\r\n            nextCycle = nextCycle.plus({ days: YerushalmiYomiCalculator.WHOLE_SHAS_DAFS })\r\n                .plus({ days: YerushalmiYomiCalculator.getNumOfSpecialDays(prevCycle, nextCycle) });\r\n        }\r\n        // Get the number of days from cycle start until request.\r\n        const dafNo = 0 - (prevCycle.diff(requested).days);\r\n        // Get the number of special days to subtract\r\n        const specialDays = YerushalmiYomiCalculator.getNumOfSpecialDays(prevCycle, requested);\r\n        let total = dafNo - specialDays;\r\n        // Finally find the daf.\r\n        for (let i = 0; i < YerushalmiYomiCalculator.BLATT_PER_MASECHTA.length; i++) {\r\n            if (total <= YerushalmiYomiCalculator.BLATT_PER_MASECHTA[i]) {\r\n                dafYomi = new Daf(masechta, total + 1);\r\n                break;\r\n            }\r\n            total -= YerushalmiYomiCalculator.BLATT_PER_MASECHTA[i];\r\n            masechta++;\r\n        }\r\n        return dafYomi;\r\n    }\r\n    /**\r\n     * Return the number of special days (Yom Kippur and Tisha B'Av) on which there is no daf, between the two given dates\r\n     *\r\n     * @param start - start date to calculate\r\n     * @param end - end date to calculate\r\n     * @return the number of special days\r\n     */\r\n    static getNumOfSpecialDays(start, end) {\r\n        // Find the start and end Jewish years\r\n        const jewishStartYear = new JewishCalendar(start).getJewishYear();\r\n        const jewishEndYear = new JewishCalendar(end).getJewishYear();\r\n        // Value to return\r\n        let specialDays = 0;\r\n        // Instant of special dates\r\n        const yomKippur = new JewishCalendar(jewishStartYear, 7, 10);\r\n        const tishaBeav = new JewishCalendar(jewishStartYear, 5, 9);\r\n        // Go over the years and find special dates\r\n        for (let i = jewishStartYear; i <= jewishEndYear; i++) {\r\n            yomKippur.setJewishYear(i);\r\n            tishaBeav.setJewishYear(i);\r\n            const interval = Interval.fromDateTimes(start, end);\r\n            if (interval.contains(yomKippur.getDate()))\r\n                specialDays++;\r\n            if (interval.contains(tishaBeav.getDate()))\r\n                specialDays++;\r\n        }\r\n        return specialDays;\r\n    }\r\n}\r\nYerushalmiYomiCalculator.DAF_YOMI_START_DAY = DateTime.fromObject({\r\n    year: 1980,\r\n    month: Calendar.FEBRUARY + 1,\r\n    day: 2,\r\n});\r\nYerushalmiYomiCalculator.WHOLE_SHAS_DAFS = 1554;\r\nYerushalmiYomiCalculator.BLATT_PER_MASECHTA = [68, 37, 34, 44, 31, 59, 26, 33, 28, 20, 13, 92, 65, 71, 22,\r\n    22, 42, 26, 26, 33, 34, 22, 19, 85, 72, 47, 40, 47, 54, 48, 44, 37, 34, 44, 9, 57, 37, 19, 13];\r\n//# sourceMappingURL=YerushalmiYomiCalculator.js.map"]},"metadata":{},"sourceType":"module"}